/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 1817.0, "series": [{"data": [[0.0, 22.0], [0.1, 25.0], [0.2, 26.0], [0.3, 26.0], [0.4, 29.0], [0.5, 31.0], [0.6, 31.0], [0.7, 31.0], [0.8, 31.0], [0.9, 32.0], [1.0, 32.0], [1.1, 32.0], [1.2, 32.0], [1.3, 33.0], [1.4, 33.0], [1.5, 44.0], [1.6, 49.0], [1.7, 49.0], [1.8, 50.0], [1.9, 51.0], [2.0, 51.0], [2.1, 51.0], [2.2, 51.0], [2.3, 51.0], [2.4, 51.0], [2.5, 51.0], [2.6, 51.0], [2.7, 51.0], [2.8, 51.0], [2.9, 51.0], [3.0, 51.0], [3.1, 51.0], [3.2, 51.0], [3.3, 51.0], [3.4, 51.0], [3.5, 51.0], [3.6, 51.0], [3.7, 51.0], [3.8, 51.0], [3.9, 51.0], [4.0, 51.0], [4.1, 51.0], [4.2, 51.0], [4.3, 51.0], [4.4, 52.0], [4.5, 52.0], [4.6, 52.0], [4.7, 52.0], [4.8, 52.0], [4.9, 53.0], [5.0, 53.0], [5.1, 53.0], [5.2, 90.0], [5.3, 90.0], [5.4, 95.0], [5.5, 96.0], [5.6, 101.0], [5.7, 103.0], [5.8, 104.0], [5.9, 105.0], [6.0, 108.0], [6.1, 108.0], [6.2, 108.0], [6.3, 108.0], [6.4, 109.0], [6.5, 109.0], [6.6, 111.0], [6.7, 112.0], [6.8, 112.0], [6.9, 112.0], [7.0, 112.0], [7.1, 112.0], [7.2, 116.0], [7.3, 118.0], [7.4, 120.0], [7.5, 120.0], [7.6, 120.0], [7.7, 121.0], [7.8, 122.0], [7.9, 122.0], [8.0, 124.0], [8.1, 125.0], [8.2, 125.0], [8.3, 125.0], [8.4, 127.0], [8.5, 129.0], [8.6, 132.0], [8.7, 133.0], [8.8, 134.0], [8.9, 135.0], [9.0, 135.0], [9.1, 136.0], [9.2, 136.0], [9.3, 136.0], [9.4, 139.0], [9.5, 140.0], [9.6, 140.0], [9.7, 140.0], [9.8, 141.0], [9.9, 142.0], [10.0, 142.0], [10.1, 144.0], [10.2, 144.0], [10.3, 145.0], [10.4, 147.0], [10.5, 151.0], [10.6, 152.0], [10.7, 153.0], [10.8, 153.0], [10.9, 154.0], [11.0, 154.0], [11.1, 155.0], [11.2, 155.0], [11.3, 155.0], [11.4, 156.0], [11.5, 156.0], [11.6, 156.0], [11.7, 157.0], [11.8, 159.0], [11.9, 159.0], [12.0, 160.0], [12.1, 160.0], [12.2, 160.0], [12.3, 161.0], [12.4, 162.0], [12.5, 162.0], [12.6, 163.0], [12.7, 163.0], [12.8, 166.0], [12.9, 167.0], [13.0, 168.0], [13.1, 168.0], [13.2, 169.0], [13.3, 169.0], [13.4, 169.0], [13.5, 171.0], [13.6, 171.0], [13.7, 171.0], [13.8, 171.0], [13.9, 172.0], [14.0, 172.0], [14.1, 172.0], [14.2, 172.0], [14.3, 172.0], [14.4, 173.0], [14.5, 173.0], [14.6, 174.0], [14.7, 174.0], [14.8, 175.0], [14.9, 177.0], [15.0, 178.0], [15.1, 179.0], [15.2, 180.0], [15.3, 180.0], [15.4, 181.0], [15.5, 181.0], [15.6, 182.0], [15.7, 182.0], [15.8, 183.0], [15.9, 183.0], [16.0, 183.0], [16.1, 185.0], [16.2, 186.0], [16.3, 187.0], [16.4, 188.0], [16.5, 188.0], [16.6, 188.0], [16.7, 189.0], [16.8, 189.0], [16.9, 190.0], [17.0, 191.0], [17.1, 191.0], [17.2, 192.0], [17.3, 192.0], [17.4, 192.0], [17.5, 192.0], [17.6, 193.0], [17.7, 193.0], [17.8, 193.0], [17.9, 193.0], [18.0, 194.0], [18.1, 194.0], [18.2, 195.0], [18.3, 196.0], [18.4, 197.0], [18.5, 197.0], [18.6, 199.0], [18.7, 200.0], [18.8, 201.0], [18.9, 202.0], [19.0, 202.0], [19.1, 202.0], [19.2, 203.0], [19.3, 203.0], [19.4, 203.0], [19.5, 204.0], [19.6, 204.0], [19.7, 204.0], [19.8, 205.0], [19.9, 205.0], [20.0, 206.0], [20.1, 206.0], [20.2, 207.0], [20.3, 207.0], [20.4, 208.0], [20.5, 208.0], [20.6, 209.0], [20.7, 209.0], [20.8, 211.0], [20.9, 211.0], [21.0, 211.0], [21.1, 211.0], [21.2, 211.0], [21.3, 211.0], [21.4, 212.0], [21.5, 212.0], [21.6, 213.0], [21.7, 214.0], [21.8, 215.0], [21.9, 216.0], [22.0, 216.0], [22.1, 217.0], [22.2, 217.0], [22.3, 218.0], [22.4, 218.0], [22.5, 218.0], [22.6, 219.0], [22.7, 222.0], [22.8, 223.0], [22.9, 223.0], [23.0, 224.0], [23.1, 224.0], [23.2, 224.0], [23.3, 225.0], [23.4, 227.0], [23.5, 227.0], [23.6, 228.0], [23.7, 229.0], [23.8, 229.0], [23.9, 229.0], [24.0, 233.0], [24.1, 233.0], [24.2, 234.0], [24.3, 234.0], [24.4, 235.0], [24.5, 236.0], [24.6, 236.0], [24.7, 236.0], [24.8, 236.0], [24.9, 238.0], [25.0, 238.0], [25.1, 240.0], [25.2, 240.0], [25.3, 242.0], [25.4, 243.0], [25.5, 243.0], [25.6, 243.0], [25.7, 244.0], [25.8, 244.0], [25.9, 244.0], [26.0, 247.0], [26.1, 247.0], [26.2, 251.0], [26.3, 251.0], [26.4, 251.0], [26.5, 252.0], [26.6, 252.0], [26.7, 253.0], [26.8, 253.0], [26.9, 254.0], [27.0, 254.0], [27.1, 255.0], [27.2, 256.0], [27.3, 256.0], [27.4, 256.0], [27.5, 256.0], [27.6, 257.0], [27.7, 257.0], [27.8, 259.0], [27.9, 259.0], [28.0, 260.0], [28.1, 261.0], [28.2, 261.0], [28.3, 262.0], [28.4, 265.0], [28.5, 265.0], [28.6, 265.0], [28.7, 265.0], [28.8, 266.0], [28.9, 266.0], [29.0, 266.0], [29.1, 267.0], [29.2, 269.0], [29.3, 270.0], [29.4, 270.0], [29.5, 270.0], [29.6, 271.0], [29.7, 272.0], [29.8, 272.0], [29.9, 272.0], [30.0, 273.0], [30.1, 274.0], [30.2, 276.0], [30.3, 276.0], [30.4, 279.0], [30.5, 280.0], [30.6, 280.0], [30.7, 280.0], [30.8, 281.0], [30.9, 283.0], [31.0, 283.0], [31.1, 283.0], [31.2, 283.0], [31.3, 283.0], [31.4, 284.0], [31.5, 284.0], [31.6, 284.0], [31.7, 285.0], [31.8, 286.0], [31.9, 286.0], [32.0, 287.0], [32.1, 289.0], [32.2, 289.0], [32.3, 289.0], [32.4, 289.0], [32.5, 289.0], [32.6, 289.0], [32.7, 289.0], [32.8, 290.0], [32.9, 290.0], [33.0, 290.0], [33.1, 291.0], [33.2, 291.0], [33.3, 291.0], [33.4, 291.0], [33.5, 291.0], [33.6, 292.0], [33.7, 292.0], [33.8, 292.0], [33.9, 292.0], [34.0, 294.0], [34.1, 294.0], [34.2, 296.0], [34.3, 296.0], [34.4, 296.0], [34.5, 297.0], [34.6, 297.0], [34.7, 297.0], [34.8, 298.0], [34.9, 298.0], [35.0, 298.0], [35.1, 299.0], [35.2, 299.0], [35.3, 299.0], [35.4, 300.0], [35.5, 300.0], [35.6, 301.0], [35.7, 302.0], [35.8, 303.0], [35.9, 304.0], [36.0, 304.0], [36.1, 304.0], [36.2, 305.0], [36.3, 305.0], [36.4, 305.0], [36.5, 305.0], [36.6, 305.0], [36.7, 306.0], [36.8, 306.0], [36.9, 306.0], [37.0, 307.0], [37.1, 308.0], [37.2, 308.0], [37.3, 309.0], [37.4, 310.0], [37.5, 310.0], [37.6, 311.0], [37.7, 312.0], [37.8, 312.0], [37.9, 313.0], [38.0, 313.0], [38.1, 314.0], [38.2, 314.0], [38.3, 314.0], [38.4, 314.0], [38.5, 314.0], [38.6, 315.0], [38.7, 315.0], [38.8, 316.0], [38.9, 316.0], [39.0, 318.0], [39.1, 318.0], [39.2, 319.0], [39.3, 320.0], [39.4, 320.0], [39.5, 320.0], [39.6, 320.0], [39.7, 320.0], [39.8, 320.0], [39.9, 320.0], [40.0, 321.0], [40.1, 321.0], [40.2, 321.0], [40.3, 321.0], [40.4, 321.0], [40.5, 321.0], [40.6, 322.0], [40.7, 322.0], [40.8, 322.0], [40.9, 325.0], [41.0, 325.0], [41.1, 325.0], [41.2, 325.0], [41.3, 326.0], [41.4, 327.0], [41.5, 328.0], [41.6, 329.0], [41.7, 329.0], [41.8, 329.0], [41.9, 329.0], [42.0, 332.0], [42.1, 332.0], [42.2, 332.0], [42.3, 332.0], [42.4, 332.0], [42.5, 333.0], [42.6, 333.0], [42.7, 333.0], [42.8, 333.0], [42.9, 334.0], [43.0, 334.0], [43.1, 335.0], [43.2, 336.0], [43.3, 336.0], [43.4, 336.0], [43.5, 337.0], [43.6, 337.0], [43.7, 337.0], [43.8, 337.0], [43.9, 338.0], [44.0, 338.0], [44.1, 339.0], [44.2, 339.0], [44.3, 340.0], [44.4, 340.0], [44.5, 340.0], [44.6, 342.0], [44.7, 342.0], [44.8, 343.0], [44.9, 343.0], [45.0, 343.0], [45.1, 344.0], [45.2, 344.0], [45.3, 344.0], [45.4, 345.0], [45.5, 345.0], [45.6, 345.0], [45.7, 345.0], [45.8, 345.0], [45.9, 346.0], [46.0, 347.0], [46.1, 348.0], [46.2, 349.0], [46.3, 349.0], [46.4, 349.0], [46.5, 350.0], [46.6, 350.0], [46.7, 350.0], [46.8, 350.0], [46.9, 351.0], [47.0, 351.0], [47.1, 351.0], [47.2, 352.0], [47.3, 352.0], [47.4, 352.0], [47.5, 353.0], [47.6, 353.0], [47.7, 353.0], [47.8, 353.0], [47.9, 353.0], [48.0, 354.0], [48.1, 354.0], [48.2, 355.0], [48.3, 355.0], [48.4, 356.0], [48.5, 356.0], [48.6, 356.0], [48.7, 357.0], [48.8, 357.0], [48.9, 359.0], [49.0, 359.0], [49.1, 359.0], [49.2, 359.0], [49.3, 359.0], [49.4, 359.0], [49.5, 360.0], [49.6, 360.0], [49.7, 361.0], [49.8, 362.0], [49.9, 363.0], [50.0, 363.0], [50.1, 363.0], [50.2, 365.0], [50.3, 365.0], [50.4, 365.0], [50.5, 366.0], [50.6, 366.0], [50.7, 366.0], [50.8, 366.0], [50.9, 366.0], [51.0, 367.0], [51.1, 367.0], [51.2, 367.0], [51.3, 368.0], [51.4, 368.0], [51.5, 368.0], [51.6, 369.0], [51.7, 370.0], [51.8, 370.0], [51.9, 370.0], [52.0, 371.0], [52.1, 371.0], [52.2, 371.0], [52.3, 371.0], [52.4, 371.0], [52.5, 371.0], [52.6, 372.0], [52.7, 374.0], [52.8, 374.0], [52.9, 376.0], [53.0, 376.0], [53.1, 377.0], [53.2, 377.0], [53.3, 378.0], [53.4, 378.0], [53.5, 379.0], [53.6, 379.0], [53.7, 379.0], [53.8, 379.0], [53.9, 381.0], [54.0, 381.0], [54.1, 382.0], [54.2, 382.0], [54.3, 382.0], [54.4, 382.0], [54.5, 383.0], [54.6, 383.0], [54.7, 383.0], [54.8, 383.0], [54.9, 384.0], [55.0, 384.0], [55.1, 384.0], [55.2, 385.0], [55.3, 386.0], [55.4, 386.0], [55.5, 387.0], [55.6, 388.0], [55.7, 388.0], [55.8, 389.0], [55.9, 391.0], [56.0, 392.0], [56.1, 392.0], [56.2, 392.0], [56.3, 392.0], [56.4, 392.0], [56.5, 393.0], [56.6, 393.0], [56.7, 394.0], [56.8, 394.0], [56.9, 395.0], [57.0, 396.0], [57.1, 397.0], [57.2, 397.0], [57.3, 397.0], [57.4, 397.0], [57.5, 397.0], [57.6, 398.0], [57.7, 398.0], [57.8, 398.0], [57.9, 398.0], [58.0, 398.0], [58.1, 399.0], [58.2, 399.0], [58.3, 399.0], [58.4, 400.0], [58.5, 400.0], [58.6, 400.0], [58.7, 401.0], [58.8, 401.0], [58.9, 402.0], [59.0, 403.0], [59.1, 403.0], [59.2, 403.0], [59.3, 404.0], [59.4, 405.0], [59.5, 405.0], [59.6, 406.0], [59.7, 407.0], [59.8, 407.0], [59.9, 407.0], [60.0, 408.0], [60.1, 409.0], [60.2, 409.0], [60.3, 410.0], [60.4, 410.0], [60.5, 411.0], [60.6, 411.0], [60.7, 412.0], [60.8, 412.0], [60.9, 412.0], [61.0, 413.0], [61.1, 413.0], [61.2, 414.0], [61.3, 414.0], [61.4, 415.0], [61.5, 415.0], [61.6, 416.0], [61.7, 416.0], [61.8, 417.0], [61.9, 418.0], [62.0, 418.0], [62.1, 418.0], [62.2, 419.0], [62.3, 419.0], [62.4, 419.0], [62.5, 420.0], [62.6, 423.0], [62.7, 423.0], [62.8, 424.0], [62.9, 424.0], [63.0, 424.0], [63.1, 425.0], [63.2, 425.0], [63.3, 426.0], [63.4, 427.0], [63.5, 427.0], [63.6, 428.0], [63.7, 428.0], [63.8, 428.0], [63.9, 429.0], [64.0, 429.0], [64.1, 430.0], [64.2, 430.0], [64.3, 431.0], [64.4, 431.0], [64.5, 432.0], [64.6, 432.0], [64.7, 432.0], [64.8, 433.0], [64.9, 434.0], [65.0, 434.0], [65.1, 435.0], [65.2, 435.0], [65.3, 436.0], [65.4, 438.0], [65.5, 438.0], [65.6, 438.0], [65.7, 438.0], [65.8, 439.0], [65.9, 440.0], [66.0, 440.0], [66.1, 440.0], [66.2, 441.0], [66.3, 441.0], [66.4, 442.0], [66.5, 442.0], [66.6, 443.0], [66.7, 443.0], [66.8, 445.0], [66.9, 446.0], [67.0, 447.0], [67.1, 448.0], [67.2, 448.0], [67.3, 449.0], [67.4, 449.0], [67.5, 449.0], [67.6, 449.0], [67.7, 450.0], [67.8, 451.0], [67.9, 452.0], [68.0, 453.0], [68.1, 453.0], [68.2, 454.0], [68.3, 454.0], [68.4, 455.0], [68.5, 456.0], [68.6, 456.0], [68.7, 456.0], [68.8, 457.0], [68.9, 457.0], [69.0, 457.0], [69.1, 458.0], [69.2, 458.0], [69.3, 458.0], [69.4, 458.0], [69.5, 459.0], [69.6, 459.0], [69.7, 460.0], [69.8, 460.0], [69.9, 460.0], [70.0, 462.0], [70.1, 462.0], [70.2, 462.0], [70.3, 463.0], [70.4, 463.0], [70.5, 464.0], [70.6, 464.0], [70.7, 465.0], [70.8, 467.0], [70.9, 468.0], [71.0, 468.0], [71.1, 468.0], [71.2, 469.0], [71.3, 470.0], [71.4, 471.0], [71.5, 472.0], [71.6, 473.0], [71.7, 474.0], [71.8, 474.0], [71.9, 475.0], [72.0, 475.0], [72.1, 475.0], [72.2, 476.0], [72.3, 476.0], [72.4, 476.0], [72.5, 476.0], [72.6, 478.0], [72.7, 479.0], [72.8, 479.0], [72.9, 480.0], [73.0, 480.0], [73.1, 481.0], [73.2, 481.0], [73.3, 481.0], [73.4, 482.0], [73.5, 482.0], [73.6, 483.0], [73.7, 485.0], [73.8, 485.0], [73.9, 486.0], [74.0, 488.0], [74.1, 489.0], [74.2, 489.0], [74.3, 490.0], [74.4, 490.0], [74.5, 491.0], [74.6, 491.0], [74.7, 491.0], [74.8, 491.0], [74.9, 491.0], [75.0, 491.0], [75.1, 492.0], [75.2, 493.0], [75.3, 494.0], [75.4, 494.0], [75.5, 495.0], [75.6, 496.0], [75.7, 496.0], [75.8, 496.0], [75.9, 499.0], [76.0, 499.0], [76.1, 500.0], [76.2, 500.0], [76.3, 501.0], [76.4, 501.0], [76.5, 501.0], [76.6, 502.0], [76.7, 503.0], [76.8, 504.0], [76.9, 504.0], [77.0, 504.0], [77.1, 505.0], [77.2, 505.0], [77.3, 506.0], [77.4, 506.0], [77.5, 507.0], [77.6, 507.0], [77.7, 507.0], [77.8, 507.0], [77.9, 508.0], [78.0, 508.0], [78.1, 509.0], [78.2, 509.0], [78.3, 510.0], [78.4, 510.0], [78.5, 511.0], [78.6, 511.0], [78.7, 513.0], [78.8, 513.0], [78.9, 514.0], [79.0, 514.0], [79.1, 516.0], [79.2, 517.0], [79.3, 517.0], [79.4, 518.0], [79.5, 519.0], [79.6, 519.0], [79.7, 520.0], [79.8, 520.0], [79.9, 520.0], [80.0, 521.0], [80.1, 521.0], [80.2, 522.0], [80.3, 522.0], [80.4, 523.0], [80.5, 524.0], [80.6, 524.0], [80.7, 524.0], [80.8, 525.0], [80.9, 525.0], [81.0, 526.0], [81.1, 526.0], [81.2, 528.0], [81.3, 528.0], [81.4, 529.0], [81.5, 530.0], [81.6, 530.0], [81.7, 530.0], [81.8, 531.0], [81.9, 532.0], [82.0, 532.0], [82.1, 532.0], [82.2, 534.0], [82.3, 534.0], [82.4, 535.0], [82.5, 536.0], [82.6, 536.0], [82.7, 537.0], [82.8, 539.0], [82.9, 539.0], [83.0, 539.0], [83.1, 539.0], [83.2, 540.0], [83.3, 541.0], [83.4, 541.0], [83.5, 542.0], [83.6, 543.0], [83.7, 543.0], [83.8, 543.0], [83.9, 543.0], [84.0, 544.0], [84.1, 546.0], [84.2, 547.0], [84.3, 548.0], [84.4, 548.0], [84.5, 548.0], [84.6, 549.0], [84.7, 549.0], [84.8, 551.0], [84.9, 553.0], [85.0, 553.0], [85.1, 553.0], [85.2, 553.0], [85.3, 553.0], [85.4, 554.0], [85.5, 554.0], [85.6, 554.0], [85.7, 556.0], [85.8, 558.0], [85.9, 559.0], [86.0, 559.0], [86.1, 561.0], [86.2, 562.0], [86.3, 563.0], [86.4, 566.0], [86.5, 567.0], [86.6, 569.0], [86.7, 569.0], [86.8, 569.0], [86.9, 570.0], [87.0, 571.0], [87.1, 571.0], [87.2, 571.0], [87.3, 571.0], [87.4, 573.0], [87.5, 573.0], [87.6, 574.0], [87.7, 575.0], [87.8, 575.0], [87.9, 578.0], [88.0, 580.0], [88.1, 583.0], [88.2, 584.0], [88.3, 585.0], [88.4, 585.0], [88.5, 585.0], [88.6, 586.0], [88.7, 586.0], [88.8, 587.0], [88.9, 587.0], [89.0, 588.0], [89.1, 588.0], [89.2, 589.0], [89.3, 590.0], [89.4, 595.0], [89.5, 595.0], [89.6, 596.0], [89.7, 600.0], [89.8, 600.0], [89.9, 602.0], [90.0, 603.0], [90.1, 604.0], [90.2, 604.0], [90.3, 606.0], [90.4, 607.0], [90.5, 608.0], [90.6, 610.0], [90.7, 613.0], [90.8, 614.0], [90.9, 615.0], [91.0, 617.0], [91.1, 618.0], [91.2, 618.0], [91.3, 619.0], [91.4, 619.0], [91.5, 621.0], [91.6, 621.0], [91.7, 627.0], [91.8, 628.0], [91.9, 630.0], [92.0, 630.0], [92.1, 633.0], [92.2, 634.0], [92.3, 635.0], [92.4, 635.0], [92.5, 635.0], [92.6, 636.0], [92.7, 637.0], [92.8, 638.0], [92.9, 642.0], [93.0, 642.0], [93.1, 646.0], [93.2, 647.0], [93.3, 649.0], [93.4, 651.0], [93.5, 651.0], [93.6, 651.0], [93.7, 652.0], [93.8, 653.0], [93.9, 653.0], [94.0, 653.0], [94.1, 656.0], [94.2, 657.0], [94.3, 658.0], [94.4, 658.0], [94.5, 662.0], [94.6, 662.0], [94.7, 665.0], [94.8, 665.0], [94.9, 666.0], [95.0, 666.0], [95.1, 667.0], [95.2, 667.0], [95.3, 670.0], [95.4, 672.0], [95.5, 673.0], [95.6, 674.0], [95.7, 675.0], [95.8, 676.0], [95.9, 677.0], [96.0, 677.0], [96.1, 681.0], [96.2, 682.0], [96.3, 682.0], [96.4, 683.0], [96.5, 684.0], [96.6, 684.0], [96.7, 686.0], [96.8, 688.0], [96.9, 688.0], [97.0, 690.0], [97.1, 692.0], [97.2, 693.0], [97.3, 694.0], [97.4, 697.0], [97.5, 699.0], [97.6, 702.0], [97.7, 706.0], [97.8, 706.0], [97.9, 708.0], [98.0, 708.0], [98.1, 710.0], [98.2, 713.0], [98.3, 713.0], [98.4, 718.0], [98.5, 721.0], [98.6, 723.0], [98.7, 726.0], [98.8, 726.0], [98.9, 728.0], [99.0, 730.0], [99.1, 739.0], [99.2, 740.0], [99.3, 745.0], [99.4, 751.0], [99.5, 755.0], [99.6, 767.0], [99.7, 777.0], [99.8, 792.0], [99.9, 808.0]], "isOverall": false, "label": "/dialog/send", "isController": false}, {"data": [[0.0, 389.0], [0.1, 389.0], [0.2, 491.0], [0.3, 491.0], [0.4, 516.0], [0.5, 516.0], [0.6, 516.0], [0.7, 537.0], [0.8, 558.0], [0.9, 559.0], [1.0, 564.0], [1.1, 564.0], [1.2, 565.0], [1.3, 569.0], [1.4, 569.0], [1.5, 592.0], [1.6, 605.0], [1.7, 605.0], [1.8, 611.0], [1.9, 614.0], [2.0, 617.0], [2.1, 629.0], [2.2, 632.0], [2.3, 632.0], [2.4, 632.0], [2.5, 633.0], [2.6, 640.0], [2.7, 655.0], [2.8, 655.0], [2.9, 655.0], [3.0, 655.0], [3.1, 656.0], [3.2, 656.0], [3.3, 664.0], [3.4, 664.0], [3.5, 664.0], [3.6, 673.0], [3.7, 674.0], [3.8, 674.0], [3.9, 674.0], [4.0, 679.0], [4.1, 679.0], [4.2, 679.0], [4.3, 684.0], [4.4, 696.0], [4.5, 700.0], [4.6, 700.0], [4.7, 700.0], [4.8, 700.0], [4.9, 700.0], [5.0, 700.0], [5.1, 701.0], [5.2, 701.0], [5.3, 702.0], [5.4, 703.0], [5.5, 707.0], [5.6, 715.0], [5.7, 715.0], [5.8, 716.0], [5.9, 724.0], [6.0, 736.0], [6.1, 736.0], [6.2, 736.0], [6.3, 736.0], [6.4, 738.0], [6.5, 739.0], [6.6, 739.0], [6.7, 739.0], [6.8, 739.0], [6.9, 739.0], [7.0, 739.0], [7.1, 739.0], [7.2, 739.0], [7.3, 739.0], [7.4, 739.0], [7.5, 739.0], [7.6, 739.0], [7.7, 740.0], [7.8, 740.0], [7.9, 740.0], [8.0, 747.0], [8.1, 747.0], [8.2, 747.0], [8.3, 748.0], [8.4, 748.0], [8.5, 754.0], [8.6, 754.0], [8.7, 754.0], [8.8, 755.0], [8.9, 755.0], [9.0, 755.0], [9.1, 761.0], [9.2, 762.0], [9.3, 770.0], [9.4, 771.0], [9.5, 771.0], [9.6, 771.0], [9.7, 771.0], [9.8, 771.0], [9.9, 771.0], [10.0, 772.0], [10.1, 772.0], [10.2, 772.0], [10.3, 772.0], [10.4, 772.0], [10.5, 793.0], [10.6, 793.0], [10.7, 795.0], [10.8, 796.0], [10.9, 803.0], [11.0, 803.0], [11.1, 803.0], [11.2, 803.0], [11.3, 803.0], [11.4, 804.0], [11.5, 804.0], [11.6, 805.0], [11.7, 809.0], [11.8, 809.0], [11.9, 809.0], [12.0, 809.0], [12.1, 810.0], [12.2, 810.0], [12.3, 832.0], [12.4, 832.0], [12.5, 841.0], [12.6, 849.0], [12.7, 849.0], [12.8, 851.0], [12.9, 855.0], [13.0, 855.0], [13.1, 855.0], [13.2, 856.0], [13.3, 856.0], [13.4, 862.0], [13.5, 862.0], [13.6, 863.0], [13.7, 863.0], [13.8, 863.0], [13.9, 863.0], [14.0, 863.0], [14.1, 863.0], [14.2, 863.0], [14.3, 865.0], [14.4, 865.0], [14.5, 865.0], [14.6, 867.0], [14.7, 867.0], [14.8, 867.0], [14.9, 869.0], [15.0, 869.0], [15.1, 869.0], [15.2, 874.0], [15.3, 874.0], [15.4, 874.0], [15.5, 875.0], [15.6, 875.0], [15.7, 875.0], [15.8, 875.0], [15.9, 875.0], [16.0, 875.0], [16.1, 875.0], [16.2, 875.0], [16.3, 878.0], [16.4, 888.0], [16.5, 888.0], [16.6, 888.0], [16.7, 889.0], [16.8, 889.0], [16.9, 889.0], [17.0, 889.0], [17.1, 889.0], [17.2, 889.0], [17.3, 889.0], [17.4, 889.0], [17.5, 889.0], [17.6, 889.0], [17.7, 889.0], [17.8, 897.0], [17.9, 898.0], [18.0, 907.0], [18.1, 909.0], [18.2, 909.0], [18.3, 909.0], [18.4, 909.0], [18.5, 910.0], [18.6, 910.0], [18.7, 918.0], [18.8, 919.0], [18.9, 919.0], [19.0, 925.0], [19.1, 926.0], [19.2, 926.0], [19.3, 927.0], [19.4, 927.0], [19.5, 927.0], [19.6, 928.0], [19.7, 928.0], [19.8, 942.0], [19.9, 963.0], [20.0, 963.0], [20.1, 964.0], [20.2, 964.0], [20.3, 964.0], [20.4, 964.0], [20.5, 964.0], [20.6, 964.0], [20.7, 964.0], [20.8, 964.0], [20.9, 965.0], [21.0, 965.0], [21.1, 976.0], [21.2, 977.0], [21.3, 978.0], [21.4, 978.0], [21.5, 978.0], [21.6, 978.0], [21.7, 978.0], [21.8, 978.0], [21.9, 978.0], [22.0, 979.0], [22.1, 979.0], [22.2, 979.0], [22.3, 981.0], [22.4, 981.0], [22.5, 981.0], [22.6, 981.0], [22.7, 982.0], [22.8, 982.0], [22.9, 983.0], [23.0, 983.0], [23.1, 983.0], [23.2, 983.0], [23.3, 985.0], [23.4, 990.0], [23.5, 990.0], [23.6, 1034.0], [23.7, 1034.0], [23.8, 1034.0], [23.9, 1035.0], [24.0, 1035.0], [24.1, 1035.0], [24.2, 1035.0], [24.3, 1035.0], [24.4, 1036.0], [24.5, 1036.0], [24.6, 1036.0], [24.7, 1036.0], [24.8, 1045.0], [24.9, 1045.0], [25.0, 1046.0], [25.1, 1050.0], [25.2, 1050.0], [25.3, 1062.0], [25.4, 1064.0], [25.5, 1075.0], [25.6, 1075.0], [25.7, 1075.0], [25.8, 1075.0], [25.9, 1075.0], [26.0, 1076.0], [26.1, 1076.0], [26.2, 1076.0], [26.3, 1102.0], [26.4, 1102.0], [26.5, 1102.0], [26.6, 1102.0], [26.7, 1102.0], [26.8, 1102.0], [26.9, 1102.0], [27.0, 1103.0], [27.1, 1103.0], [27.2, 1103.0], [27.3, 1103.0], [27.4, 1103.0], [27.5, 1113.0], [27.6, 1113.0], [27.7, 1113.0], [27.8, 1117.0], [27.9, 1117.0], [28.0, 1117.0], [28.1, 1117.0], [28.2, 1117.0], [28.3, 1117.0], [28.4, 1118.0], [28.5, 1118.0], [28.6, 1118.0], [28.7, 1118.0], [28.8, 1122.0], [28.9, 1122.0], [29.0, 1122.0], [29.1, 1122.0], [29.2, 1123.0], [29.3, 1123.0], [29.4, 1123.0], [29.5, 1123.0], [29.6, 1123.0], [29.7, 1123.0], [29.8, 1123.0], [29.9, 1123.0], [30.0, 1123.0], [30.1, 1124.0], [30.2, 1136.0], [30.3, 1137.0], [30.4, 1137.0], [30.5, 1137.0], [30.6, 1139.0], [30.7, 1140.0], [30.8, 1140.0], [30.9, 1140.0], [31.0, 1140.0], [31.1, 1141.0], [31.2, 1141.0], [31.3, 1141.0], [31.4, 1141.0], [31.5, 1141.0], [31.6, 1141.0], [31.7, 1141.0], [31.8, 1141.0], [31.9, 1142.0], [32.0, 1142.0], [32.1, 1142.0], [32.2, 1142.0], [32.3, 1144.0], [32.4, 1146.0], [32.5, 1147.0], [32.6, 1148.0], [32.7, 1148.0], [32.8, 1148.0], [32.9, 1154.0], [33.0, 1154.0], [33.1, 1154.0], [33.2, 1154.0], [33.3, 1154.0], [33.4, 1154.0], [33.5, 1154.0], [33.6, 1154.0], [33.7, 1155.0], [33.8, 1155.0], [33.9, 1156.0], [34.0, 1156.0], [34.1, 1157.0], [34.2, 1158.0], [34.3, 1158.0], [34.4, 1158.0], [34.5, 1158.0], [34.6, 1158.0], [34.7, 1158.0], [34.8, 1158.0], [34.9, 1158.0], [35.0, 1158.0], [35.1, 1158.0], [35.2, 1158.0], [35.3, 1159.0], [35.4, 1159.0], [35.5, 1160.0], [35.6, 1171.0], [35.7, 1171.0], [35.8, 1172.0], [35.9, 1178.0], [36.0, 1178.0], [36.1, 1178.0], [36.2, 1178.0], [36.3, 1178.0], [36.4, 1178.0], [36.5, 1179.0], [36.6, 1179.0], [36.7, 1179.0], [36.8, 1179.0], [36.9, 1189.0], [37.0, 1189.0], [37.1, 1189.0], [37.2, 1189.0], [37.3, 1189.0], [37.4, 1189.0], [37.5, 1189.0], [37.6, 1190.0], [37.7, 1190.0], [37.8, 1190.0], [37.9, 1190.0], [38.0, 1190.0], [38.1, 1190.0], [38.2, 1190.0], [38.3, 1190.0], [38.4, 1191.0], [38.5, 1191.0], [38.6, 1191.0], [38.7, 1191.0], [38.8, 1191.0], [38.9, 1191.0], [39.0, 1191.0], [39.1, 1191.0], [39.2, 1191.0], [39.3, 1192.0], [39.4, 1192.0], [39.5, 1192.0], [39.6, 1192.0], [39.7, 1192.0], [39.8, 1193.0], [39.9, 1195.0], [40.0, 1195.0], [40.1, 1195.0], [40.2, 1195.0], [40.3, 1195.0], [40.4, 1195.0], [40.5, 1195.0], [40.6, 1196.0], [40.7, 1196.0], [40.8, 1198.0], [40.9, 1198.0], [41.0, 1198.0], [41.1, 1199.0], [41.2, 1199.0], [41.3, 1199.0], [41.4, 1199.0], [41.5, 1199.0], [41.6, 1200.0], [41.7, 1201.0], [41.8, 1201.0], [41.9, 1201.0], [42.0, 1201.0], [42.1, 1201.0], [42.2, 1201.0], [42.3, 1202.0], [42.4, 1202.0], [42.5, 1202.0], [42.6, 1202.0], [42.7, 1202.0], [42.8, 1202.0], [42.9, 1208.0], [43.0, 1208.0], [43.1, 1208.0], [43.2, 1208.0], [43.3, 1208.0], [43.4, 1209.0], [43.5, 1216.0], [43.6, 1216.0], [43.7, 1216.0], [43.8, 1217.0], [43.9, 1222.0], [44.0, 1223.0], [44.1, 1223.0], [44.2, 1224.0], [44.3, 1224.0], [44.4, 1227.0], [44.5, 1228.0], [44.6, 1228.0], [44.7, 1228.0], [44.8, 1228.0], [44.9, 1228.0], [45.0, 1228.0], [45.1, 1228.0], [45.2, 1228.0], [45.3, 1228.0], [45.4, 1228.0], [45.5, 1228.0], [45.6, 1229.0], [45.7, 1229.0], [45.8, 1229.0], [45.9, 1229.0], [46.0, 1229.0], [46.1, 1229.0], [46.2, 1229.0], [46.3, 1229.0], [46.4, 1230.0], [46.5, 1242.0], [46.6, 1242.0], [46.7, 1242.0], [46.8, 1242.0], [46.9, 1243.0], [47.0, 1243.0], [47.1, 1243.0], [47.2, 1243.0], [47.3, 1243.0], [47.4, 1243.0], [47.5, 1243.0], [47.6, 1243.0], [47.7, 1243.0], [47.8, 1243.0], [47.9, 1243.0], [48.0, 1244.0], [48.1, 1244.0], [48.2, 1244.0], [48.3, 1244.0], [48.4, 1244.0], [48.5, 1244.0], [48.6, 1244.0], [48.7, 1244.0], [48.8, 1244.0], [48.9, 1244.0], [49.0, 1244.0], [49.1, 1244.0], [49.2, 1245.0], [49.3, 1250.0], [49.4, 1250.0], [49.5, 1251.0], [49.6, 1251.0], [49.7, 1251.0], [49.8, 1252.0], [49.9, 1252.0], [50.0, 1252.0], [50.1, 1252.0], [50.2, 1252.0], [50.3, 1252.0], [50.4, 1252.0], [50.5, 1252.0], [50.6, 1252.0], [50.7, 1253.0], [50.8, 1253.0], [50.9, 1253.0], [51.0, 1253.0], [51.1, 1257.0], [51.2, 1258.0], [51.3, 1258.0], [51.4, 1258.0], [51.5, 1258.0], [51.6, 1259.0], [51.7, 1259.0], [51.8, 1259.0], [51.9, 1260.0], [52.0, 1260.0], [52.1, 1260.0], [52.2, 1260.0], [52.3, 1260.0], [52.4, 1261.0], [52.5, 1264.0], [52.6, 1265.0], [52.7, 1272.0], [52.8, 1273.0], [52.9, 1273.0], [53.0, 1273.0], [53.1, 1273.0], [53.2, 1273.0], [53.3, 1273.0], [53.4, 1273.0], [53.5, 1274.0], [53.6, 1274.0], [53.7, 1274.0], [53.8, 1275.0], [53.9, 1275.0], [54.0, 1275.0], [54.1, 1276.0], [54.2, 1276.0], [54.3, 1276.0], [54.4, 1276.0], [54.5, 1276.0], [54.6, 1276.0], [54.7, 1276.0], [54.8, 1278.0], [54.9, 1281.0], [55.0, 1285.0], [55.1, 1287.0], [55.2, 1289.0], [55.3, 1289.0], [55.4, 1299.0], [55.5, 1300.0], [55.6, 1300.0], [55.7, 1312.0], [55.8, 1312.0], [55.9, 1313.0], [56.0, 1313.0], [56.1, 1313.0], [56.2, 1313.0], [56.3, 1313.0], [56.4, 1313.0], [56.5, 1314.0], [56.6, 1314.0], [56.7, 1314.0], [56.8, 1314.0], [56.9, 1314.0], [57.0, 1315.0], [57.1, 1315.0], [57.2, 1315.0], [57.3, 1315.0], [57.4, 1315.0], [57.5, 1315.0], [57.6, 1315.0], [57.7, 1315.0], [57.8, 1316.0], [57.9, 1316.0], [58.0, 1316.0], [58.1, 1316.0], [58.2, 1316.0], [58.3, 1316.0], [58.4, 1316.0], [58.5, 1316.0], [58.6, 1317.0], [58.7, 1319.0], [58.8, 1319.0], [58.9, 1319.0], [59.0, 1320.0], [59.1, 1320.0], [59.2, 1321.0], [59.3, 1323.0], [59.4, 1323.0], [59.5, 1327.0], [59.6, 1328.0], [59.7, 1328.0], [59.8, 1328.0], [59.9, 1328.0], [60.0, 1328.0], [60.1, 1328.0], [60.2, 1328.0], [60.3, 1329.0], [60.4, 1329.0], [60.5, 1329.0], [60.6, 1329.0], [60.7, 1330.0], [60.8, 1330.0], [60.9, 1330.0], [61.0, 1330.0], [61.1, 1330.0], [61.2, 1336.0], [61.3, 1341.0], [61.4, 1341.0], [61.5, 1341.0], [61.6, 1341.0], [61.7, 1341.0], [61.8, 1341.0], [61.9, 1342.0], [62.0, 1346.0], [62.1, 1346.0], [62.2, 1346.0], [62.3, 1347.0], [62.4, 1349.0], [62.5, 1349.0], [62.6, 1354.0], [62.7, 1355.0], [62.8, 1367.0], [62.9, 1368.0], [63.0, 1368.0], [63.1, 1368.0], [63.2, 1368.0], [63.3, 1368.0], [63.4, 1368.0], [63.5, 1375.0], [63.6, 1376.0], [63.7, 1377.0], [63.8, 1378.0], [63.9, 1378.0], [64.0, 1395.0], [64.1, 1397.0], [64.2, 1397.0], [64.3, 1400.0], [64.4, 1402.0], [64.5, 1402.0], [64.6, 1402.0], [64.7, 1402.0], [64.8, 1402.0], [64.9, 1402.0], [65.0, 1402.0], [65.1, 1402.0], [65.2, 1402.0], [65.3, 1403.0], [65.4, 1404.0], [65.5, 1404.0], [65.6, 1405.0], [65.7, 1413.0], [65.8, 1415.0], [65.9, 1416.0], [66.0, 1417.0], [66.1, 1417.0], [66.2, 1417.0], [66.3, 1417.0], [66.4, 1418.0], [66.5, 1427.0], [66.6, 1429.0], [66.7, 1429.0], [66.8, 1436.0], [66.9, 1447.0], [67.0, 1455.0], [67.1, 1455.0], [67.2, 1456.0], [67.3, 1456.0], [67.4, 1456.0], [67.5, 1456.0], [67.6, 1456.0], [67.7, 1456.0], [67.8, 1456.0], [67.9, 1456.0], [68.0, 1456.0], [68.1, 1457.0], [68.2, 1458.0], [68.3, 1463.0], [68.4, 1463.0], [68.5, 1469.0], [68.6, 1473.0], [68.7, 1473.0], [68.8, 1473.0], [68.9, 1474.0], [69.0, 1474.0], [69.1, 1474.0], [69.2, 1475.0], [69.3, 1475.0], [69.4, 1475.0], [69.5, 1476.0], [69.6, 1476.0], [69.7, 1476.0], [69.8, 1476.0], [69.9, 1476.0], [70.0, 1477.0], [70.1, 1477.0], [70.2, 1477.0], [70.3, 1478.0], [70.4, 1478.0], [70.5, 1481.0], [70.6, 1483.0], [70.7, 1483.0], [70.8, 1483.0], [70.9, 1484.0], [71.0, 1486.0], [71.1, 1487.0], [71.2, 1487.0], [71.3, 1487.0], [71.4, 1487.0], [71.5, 1488.0], [71.6, 1488.0], [71.7, 1488.0], [71.8, 1489.0], [71.9, 1489.0], [72.0, 1490.0], [72.1, 1496.0], [72.2, 1496.0], [72.3, 1509.0], [72.4, 1518.0], [72.5, 1518.0], [72.6, 1519.0], [72.7, 1519.0], [72.8, 1533.0], [72.9, 1533.0], [73.0, 1533.0], [73.1, 1533.0], [73.2, 1534.0], [73.3, 1534.0], [73.4, 1541.0], [73.5, 1542.0], [73.6, 1550.0], [73.7, 1585.0], [73.8, 1585.0], [73.9, 1586.0], [74.0, 1587.0], [74.1, 1587.0], [74.2, 1589.0], [74.3, 1591.0], [74.4, 1592.0], [74.5, 1592.0], [74.6, 1594.0], [74.7, 1605.0], [74.8, 1607.0], [74.9, 1607.0], [75.0, 1608.0], [75.1, 1608.0], [75.2, 1609.0], [75.3, 1609.0], [75.4, 1609.0], [75.5, 1610.0], [75.6, 1613.0], [75.7, 1613.0], [75.8, 1614.0], [75.9, 1616.0], [76.0, 1619.0], [76.1, 1619.0], [76.2, 1620.0], [76.3, 1620.0], [76.4, 1620.0], [76.5, 1625.0], [76.6, 1641.0], [76.7, 1642.0], [76.8, 1645.0], [76.9, 1648.0], [77.0, 1648.0], [77.1, 1648.0], [77.2, 1648.0], [77.3, 1648.0], [77.4, 1648.0], [77.5, 1649.0], [77.6, 1650.0], [77.7, 1651.0], [77.8, 1651.0], [77.9, 1653.0], [78.0, 1653.0], [78.1, 1653.0], [78.2, 1655.0], [78.3, 1655.0], [78.4, 1655.0], [78.5, 1655.0], [78.6, 1655.0], [78.7, 1655.0], [78.8, 1656.0], [78.9, 1656.0], [79.0, 1656.0], [79.1, 1656.0], [79.2, 1656.0], [79.3, 1656.0], [79.4, 1657.0], [79.5, 1657.0], [79.6, 1657.0], [79.7, 1657.0], [79.8, 1657.0], [79.9, 1657.0], [80.0, 1657.0], [80.1, 1657.0], [80.2, 1657.0], [80.3, 1657.0], [80.4, 1658.0], [80.5, 1658.0], [80.6, 1658.0], [80.7, 1658.0], [80.8, 1659.0], [80.9, 1659.0], [81.0, 1659.0], [81.1, 1659.0], [81.2, 1659.0], [81.3, 1659.0], [81.4, 1659.0], [81.5, 1659.0], [81.6, 1660.0], [81.7, 1660.0], [81.8, 1660.0], [81.9, 1661.0], [82.0, 1662.0], [82.1, 1663.0], [82.2, 1663.0], [82.3, 1665.0], [82.4, 1665.0], [82.5, 1666.0], [82.6, 1668.0], [82.7, 1668.0], [82.8, 1668.0], [82.9, 1668.0], [83.0, 1668.0], [83.1, 1668.0], [83.2, 1668.0], [83.3, 1669.0], [83.4, 1670.0], [83.5, 1673.0], [83.6, 1674.0], [83.7, 1674.0], [83.8, 1674.0], [83.9, 1674.0], [84.0, 1674.0], [84.1, 1674.0], [84.2, 1674.0], [84.3, 1674.0], [84.4, 1674.0], [84.5, 1675.0], [84.6, 1675.0], [84.7, 1675.0], [84.8, 1676.0], [84.9, 1676.0], [85.0, 1676.0], [85.1, 1676.0], [85.2, 1677.0], [85.3, 1677.0], [85.4, 1677.0], [85.5, 1677.0], [85.6, 1678.0], [85.7, 1678.0], [85.8, 1679.0], [85.9, 1679.0], [86.0, 1679.0], [86.1, 1679.0], [86.2, 1679.0], [86.3, 1680.0], [86.4, 1685.0], [86.5, 1685.0], [86.6, 1685.0], [86.7, 1685.0], [86.8, 1686.0], [86.9, 1686.0], [87.0, 1686.0], [87.1, 1686.0], [87.2, 1688.0], [87.3, 1688.0], [87.4, 1689.0], [87.5, 1689.0], [87.6, 1689.0], [87.7, 1689.0], [87.8, 1689.0], [87.9, 1690.0], [88.0, 1691.0], [88.1, 1691.0], [88.2, 1691.0], [88.3, 1691.0], [88.4, 1693.0], [88.5, 1696.0], [88.6, 1697.0], [88.7, 1698.0], [88.8, 1698.0], [88.9, 1698.0], [89.0, 1699.0], [89.1, 1699.0], [89.2, 1699.0], [89.3, 1700.0], [89.4, 1700.0], [89.5, 1700.0], [89.6, 1701.0], [89.7, 1701.0], [89.8, 1701.0], [89.9, 1702.0], [90.0, 1702.0], [90.1, 1702.0], [90.2, 1703.0], [90.3, 1703.0], [90.4, 1703.0], [90.5, 1704.0], [90.6, 1704.0], [90.7, 1704.0], [90.8, 1704.0], [90.9, 1710.0], [91.0, 1712.0], [91.1, 1714.0], [91.2, 1716.0], [91.3, 1716.0], [91.4, 1717.0], [91.5, 1717.0], [91.6, 1718.0], [91.7, 1718.0], [91.8, 1719.0], [91.9, 1719.0], [92.0, 1719.0], [92.1, 1719.0], [92.2, 1720.0], [92.3, 1720.0], [92.4, 1720.0], [92.5, 1720.0], [92.6, 1721.0], [92.7, 1721.0], [92.8, 1721.0], [92.9, 1721.0], [93.0, 1723.0], [93.1, 1723.0], [93.2, 1729.0], [93.3, 1730.0], [93.4, 1730.0], [93.5, 1730.0], [93.6, 1732.0], [93.7, 1732.0], [93.8, 1733.0], [93.9, 1734.0], [94.0, 1734.0], [94.1, 1736.0], [94.2, 1739.0], [94.3, 1739.0], [94.4, 1740.0], [94.5, 1740.0], [94.6, 1740.0], [94.7, 1740.0], [94.8, 1740.0], [94.9, 1741.0], [95.0, 1741.0], [95.1, 1743.0], [95.2, 1743.0], [95.3, 1744.0], [95.4, 1744.0], [95.5, 1745.0], [95.6, 1745.0], [95.7, 1746.0], [95.8, 1746.0], [95.9, 1747.0], [96.0, 1748.0], [96.1, 1748.0], [96.2, 1749.0], [96.3, 1749.0], [96.4, 1753.0], [96.5, 1754.0], [96.6, 1755.0], [96.7, 1757.0], [96.8, 1757.0], [96.9, 1759.0], [97.0, 1759.0], [97.1, 1763.0], [97.2, 1763.0], [97.3, 1763.0], [97.4, 1763.0], [97.5, 1763.0], [97.6, 1763.0], [97.7, 1768.0], [97.8, 1768.0], [97.9, 1769.0], [98.0, 1769.0], [98.1, 1772.0], [98.2, 1773.0], [98.3, 1773.0], [98.4, 1782.0], [98.5, 1784.0], [98.6, 1784.0], [98.7, 1785.0], [98.8, 1796.0], [98.9, 1804.0], [99.0, 1806.0], [99.1, 1807.0], [99.2, 1807.0], [99.3, 1807.0], [99.4, 1807.0], [99.5, 1807.0], [99.6, 1807.0], [99.7, 1808.0], [99.8, 1808.0], [99.9, 1817.0]], "isOverall": false, "label": "/dialog/list", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 230.0, "series": [{"data": [[0.0, 56.0], [300.0, 230.0], [600.0, 79.0], [700.0, 23.0], [100.0, 131.0], [200.0, 166.0], [400.0, 178.0], [800.0, 1.0], [500.0, 136.0]], "isOverall": false, "label": "/dialog/send", "isController": false}, {"data": [[600.0, 29.0], [700.0, 64.0], [800.0, 71.0], [900.0, 55.0], [1000.0, 27.0], [1100.0, 153.0], [300.0, 2.0], [1200.0, 139.0], [1300.0, 88.0], [1400.0, 80.0], [1500.0, 25.0], [1600.0, 146.0], [400.0, 1.0], [1700.0, 96.0], [1800.0, 11.0], [500.0, 13.0]], "isOverall": false, "label": "/dialog/list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 278.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 956.0, "series": [{"data": [[0.0, 766.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 956.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 278.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 518.0031746031747, "minX": 1.746282126E12, "maxY": 978.2636363636368, "series": [{"data": [[1.746282127E12, 978.2636363636368], [1.746282128E12, 518.0031746031747], [1.746282126E12, 518.9801980198022]], "isOverall": false, "label": "OTUS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.746282128E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 44.418604651162795, "minX": 2.0, "maxY": 1807.5, "series": [{"data": [[518.0, 196.6], [632.0, 312.0], [648.0, 340.75], [649.0, 327.38461538461536], [683.0, 361.0], [684.0, 320.0], [685.0, 357.1666666666667], [687.0, 359.91666666666663], [701.0, 359.8], [744.0, 377.5], [745.0, 321.6666666666667], [760.0, 372.15384615384613], [762.0, 322.6666666666667], [768.0, 357.125], [811.0, 443.0], [812.0, 420.0], [813.0, 397.0], [814.0, 363.3333333333333], [816.0, 323.5], [823.0, 383.1000000000001], [883.0, 384.12500000000006], [890.0, 401.61538461538464], [891.0, 319.0], [905.0, 405.5], [915.0, 400.61111111111103], [921.0, 395.68421052631584], [930.0, 401.2631578947369], [959.0, 512.7727272727273], [958.0, 726.0], [955.0, 759.0], [952.0, 784.5], [951.0, 808.0], [960.0, 418.6500000000001], [962.0, 586.0], [961.0, 700.75], [963.0, 689.0], [966.0, 634.1428571428572], [965.0, 663.75], [986.0, 481.72727272727275], [967.0, 647.3636363636363], [969.0, 616.0], [970.0, 463.5384615384615], [973.0, 632.0833333333334], [974.0, 424.70588235294116], [975.0, 585.7333333333335], [990.0, 266.0], [980.0, 556.8888888888889], [978.0, 548.0], [983.0, 527.4736842105265], [982.0, 536.611111111111], [989.0, 403.125], [988.0, 414.62499999999994], [987.0, 473.46666666666664], [997.0, 406.10714285714283], [995.0, 418.6111111111111], [994.0, 384.8857142857143], [992.0, 394.06666666666666], [126.0, 44.418604651162795], [127.0, 46.75], [241.0, 171.0], [244.0, 167.75], [268.0, 192.5], [276.0, 189.33333333333334], [277.0, 192.5], [282.0, 208.0], [285.0, 209.0], [287.0, 209.66666666666666], [319.0, 210.5], [326.0, 205.0], [331.0, 256.0], [332.0, 208.84615384615384], [351.0, 194.39999999999998], [358.0, 191.54545454545456], [365.0, 202.34210526315786], [366.0, 188.8604651162791], [370.0, 156.5], [371.0, 176.38095238095238], [381.0, 198.79999999999998], [406.0, 169.33333333333334], [455.0, 203.55555555555554], [456.0, 125.0], [465.0, 208.9], [472.0, 221.33333333333334], [473.0, 145.0], [485.0, 190.14285714285714], [495.0, 186.85714285714286]], "isOverall": false, "label": "/dialog/send", "isController": false}, {"data": [[747.7279999999997, 367.7239999999999]], "isOverall": false, "label": "/dialog/send-Aggregated", "isController": false}, {"data": [[2.0, 514.0], [3.0, 516.0], [4.0, 537.0], [10.0, 516.0], [11.0, 679.0], [13.0, 564.0], [14.0, 844.0], [15.0, 765.6666666666666], [16.0, 722.0], [17.0, 1123.0], [18.0, 1122.5], [22.0, 869.0], [23.0, 687.5], [24.0, 869.0], [25.0, 806.0], [74.0, 611.0], [85.0, 991.75], [91.0, 1102.5], [90.0, 786.4], [89.0, 888.8], [88.0, 1300.0], [95.0, 1103.0], [93.0, 968.3333333333334], [98.0, 805.0], [97.0, 889.0], [96.0, 1103.0], [102.0, 1102.5], [100.0, 983.0], [107.0, 983.5], [105.0, 655.0], [111.0, 865.0], [110.0, 759.75], [109.0, 632.0], [115.0, 982.0], [114.0, 961.0], [113.0, 1060.2], [112.0, 996.6], [116.0, 887.5], [122.0, 982.0], [125.0, 979.3333333333334], [135.0, 909.0], [134.0, 981.0], [132.0, 918.5], [130.0, 944.0], [128.0, 803.0], [142.0, 1065.0], [140.0, 1117.0], [139.0, 803.0], [138.0, 909.0], [137.0, 1117.0], [151.0, 973.8], [150.0, 763.5], [148.0, 1117.0], [147.0, 1000.6666666666666], [145.0, 863.0], [144.0, 863.0], [158.0, 1035.5], [156.0, 911.4], [155.0, 981.0], [154.0, 1208.0], [153.0, 981.0], [152.0, 1276.0], [167.0, 1075.25], [165.0, 869.1666666666666], [164.0, 871.375], [163.0, 1118.375], [162.0, 976.0], [181.0, 949.0], [179.0, 605.0], [178.0, 929.5], [177.0, 1158.0], [176.0, 929.7500000000001], [185.0, 1071.5], [199.0, 874.0], [198.0, 955.6], [197.0, 875.0], [200.0, 867.0], [215.0, 739.0], [214.0, 1195.0], [211.0, 739.2], [209.0, 739.0], [223.0, 967.0], [222.0, 967.0], [221.0, 740.0], [220.0, 1195.0], [218.0, 891.6666666666666], [217.0, 853.0], [216.0, 1195.0], [230.0, 1216.0], [229.0, 736.0], [227.0, 976.5], [225.0, 736.0], [271.0, 1200.0], [270.0, 1123.0], [269.0, 996.5], [267.0, 990.7142857142857], [261.0, 965.0], [285.0, 664.0], [287.0, 1148.0], [284.0, 1039.3846153846155], [275.0, 1141.142857142857], [273.0, 778.0], [274.0, 674.0], [283.0, 592.0], [282.0, 1006.6], [281.0, 911.6666666666666], [280.0, 1320.0], [279.0, 1158.0], [278.0, 964.0], [276.0, 951.5], [288.0, 1147.0], [319.0, 1341.0], [317.0, 1341.0], [335.0, 1202.0], [331.0, 1225.25], [327.0, 1296.5], [326.0, 1253.0], [324.0, 1253.0], [323.0, 1252.0], [350.0, 1190.0], [348.0, 1189.5], [347.0, 1252.0], [346.0, 1216.8], [345.0, 1025.0], [341.0, 1228.0], [338.0, 1051.5], [366.0, 927.0], [365.0, 507.0], [364.0, 1456.0], [362.0, 1409.5], [359.0, 1270.6666666666667], [356.0, 1179.0], [355.0, 1025.0], [382.0, 1330.0], [379.0, 1266.0], [371.0, 1224.0], [369.0, 1156.0], [396.0, 1029.0], [397.0, 810.0], [395.0, 1252.0], [390.0, 1223.0], [388.0, 1330.0], [387.0, 1294.6666666666667], [384.0, 1145.4], [412.0, 1241.5], [414.0, 1315.0], [415.0, 1008.6666666666666], [413.0, 1184.5], [409.0, 1145.8333333333333], [408.0, 855.0], [406.0, 1329.0], [404.0, 1328.5], [402.0, 1129.6666666666667], [400.0, 1073.8], [430.0, 1328.0], [431.0, 1244.0], [429.0, 1154.0], [427.0, 1260.0], [424.0, 1260.0], [423.0, 1244.0], [421.0, 1261.0], [418.0, 1315.0], [416.0, 701.0], [435.0, 1314.0], [446.0, 1171.0], [447.0, 1200.5], [445.0, 1003.0], [443.0, 766.0], [441.0, 1241.0], [438.0, 1328.0], [437.0, 1293.5], [433.0, 1154.0], [432.0, 1285.5], [462.0, 1228.0], [463.0, 1246.4615384615386], [461.0, 1153.7], [458.0, 1258.0], [455.0, 1285.0], [454.0, 747.0], [453.0, 1134.1666666666667], [450.0, 926.0], [448.0, 1031.1], [477.0, 1113.0], [478.0, 919.0], [476.0, 1113.0], [467.0, 1316.0], [466.0, 1316.0], [465.0, 1316.0], [475.0, 1113.0], [474.0, 640.0], [473.0, 1315.0], [471.0, 1315.0], [469.0, 1316.0], [468.0, 1317.0], [495.0, 1272.0], [494.0, 1273.0], [493.0, 1321.0], [492.0, 1274.0], [490.0, 1273.0], [488.0, 1261.5], [486.0, 1368.0], [485.0, 1304.6666666666667], [508.0, 1518.0], [502.0, 1419.75], [499.0, 1146.0], [497.0, 1304.3333333333333], [542.0, 1534.0], [518.0, 389.0], [534.0, 1533.5], [533.0, 1533.0], [532.0, 1243.0], [531.0, 1243.0], [523.0, 1244.0], [522.0, 1244.0], [517.0, 1244.0], [516.0, 1323.6666666666667], [515.0, 1483.0], [513.0, 1477.8], [573.0, 1651.0], [571.0, 1651.0], [569.0, 1478.0], [568.0, 1478.0], [565.0, 1377.0], [561.0, 1533.0], [601.0, 1142.0], [603.0, 1267.0], [607.0, 1476.0], [602.0, 1477.0], [596.0, 1477.0], [597.0, 1142.0], [588.0, 1192.0], [585.0, 1404.0], [581.0, 1328.0], [580.0, 1404.0], [634.0, 1141.0], [638.0, 1417.0], [639.0, 1402.0], [635.0, 1418.0], [629.0, 1341.0], [626.0, 1476.0], [621.0, 1192.0], [610.0, 1403.0], [619.0, 1191.5], [616.0, 1341.0], [669.0, 1346.0], [668.0, 1346.0], [665.0, 1346.0], [654.0, 1347.0], [647.0, 1417.0], [643.0, 1417.0], [642.0, 1140.0], [640.0, 1271.5], [679.0, 1215.0], [673.0, 1330.5], [678.0, 1285.6785714285713], [677.0, 1402.0], [676.0, 865.0], [688.0, 1189.0], [703.0, 1228.0], [700.0, 1509.0], [702.0, 1198.0], [699.0, 1205.0], [698.0, 1228.0], [696.0, 1342.0], [697.0, 1189.0], [690.0, 793.0], [692.0, 1350.5], [694.0, 1297.0], [695.0, 1400.0], [680.0, 1209.5], [684.0, 1476.0], [682.0, 1228.0], [686.0, 1184.5], [687.0, 1352.0], [704.0, 1176.75], [705.0, 1455.6666666666667], [707.0, 770.0], [723.0, 1137.0], [727.0, 1676.0], [735.0, 1676.0], [741.0, 1406.0], [736.0, 1406.5], [742.0, 1405.5], [761.0, 1807.0], [762.0, 1804.0], [745.0, 1807.5], [746.0, 1807.0], [748.0, 1807.0], [751.0, 1806.0], [754.0, 1807.0], [755.0, 1807.0], [758.0, 1640.5], [786.0, 1673.0], [823.0, 1234.5], [822.0, 1229.0], [825.0, 930.5], [856.0, 1514.3863636363646], [859.0, 1719.0], [833.0, 738.0], [834.0, 1189.0], [840.0, 762.0], [843.0, 878.0], [851.0, 1785.0], [889.0, 1674.0], [894.0, 1745.0], [895.0, 1759.0], [893.0, 1676.3846153846155], [885.0, 1663.0], [880.0, 1663.0], [878.0, 1668.0], [871.0, 1675.3796296296296], [866.0, 1413.0], [877.0, 1668.0], [876.0, 1668.0], [873.0, 1668.5], [925.0, 1657.5], [926.0, 1751.0], [922.0, 1706.5], [921.0, 1659.0], [920.0, 1655.0], [903.0, 1728.75], [902.0, 1659.0], [901.0, 1660.0], [917.0, 1653.0], [914.0, 1658.5], [913.0, 1657.0], [911.0, 1657.5], [910.0, 1658.0], [909.0, 1746.0], [908.0, 1657.0], [906.0, 1688.0], [948.0, 1653.0], [959.0, 1589.0], [958.0, 1591.6666666666667], [955.0, 1619.6666666666667], [952.0, 1641.0], [943.0, 1677.0], [931.0, 1659.0], [928.0, 1658.0], [933.0, 1656.6], [932.0, 1659.0], [942.0, 1656.0], [940.0, 1655.0], [936.0, 1655.6666666666667], [951.0, 1668.0], [950.0, 1550.0], [949.0, 1571.0], [946.0, 1648.0], [945.0, 1744.0], [979.0, 1265.0], [989.0, 1050.0], [988.0, 1076.0], [987.0, 1148.0], [986.0, 1171.3333333333333], [975.0, 1349.0], [961.0, 1541.5], [965.0, 1496.0], [963.0, 1519.0], [967.0, 1436.0], [966.0, 1447.0], [973.0, 1376.0], [970.0, 1378.0], [969.0, 1397.0], [983.0, 1242.0], [982.0, 1250.0], [980.0, 1264.0], [978.0, 1287.0], [977.0, 1289.0], [997.0, 897.5], [995.0, 942.0], [994.0, 990.0], [992.0, 1034.0]], "isOverall": false, "label": "/dialog/list", "isController": false}, {"data": [[541.9130000000006, 1268.3679999999981]], "isOverall": false, "label": "/dialog/list-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 256363.0, "minX": 1.746282126E12, "maxY": 3.80886396E8, "series": [{"data": [[1.746282127E12, 1.6474764E7], [1.746282128E12, 3.80886396E8], [1.746282126E12, 991094.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.746282127E12, 276332.0], [1.746282128E12, 424305.0], [1.746282126E12, 256363.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.746282128E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 249.02788844621514, "minX": 1.746282126E12, "maxY": 1352.7692307692305, "series": [{"data": [[1.746282127E12, 487.3734939759036], [1.746282126E12, 249.02788844621514]], "isOverall": false, "label": "/dialog/send", "isController": false}, {"data": [[1.746282127E12, 1352.7692307692305], [1.746282128E12, 1266.1904761904755], [1.746282126E12, 491.3333333333333]], "isOverall": false, "label": "/dialog/list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.746282128E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 153.66666666666666, "minX": 1.746282126E12, "maxY": 581.5777777777781, "series": [{"data": [[1.746282127E12, 487.3734939759036], [1.746282126E12, 249.02788844621514]], "isOverall": false, "label": "/dialog/send", "isController": false}, {"data": [[1.746282127E12, 197.44230769230774], [1.746282128E12, 581.5777777777781], [1.746282126E12, 153.66666666666666]], "isOverall": false, "label": "/dialog/list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.746282128E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.746282126E12, "maxY": 6.56972111553784, "series": [{"data": [[1.746282127E12, 0.6586345381526104], [1.746282126E12, 6.56972111553784]], "isOverall": false, "label": "/dialog/send", "isController": false}, {"data": [[1.746282127E12, 0.0], [1.746282128E12, 0.0], [1.746282126E12, 0.0]], "isOverall": false, "label": "/dialog/list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.746282128E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.746282126E12, "maxY": 1817.0, "series": [{"data": [[1.746282127E12, 1712.0], [1.746282128E12, 1817.0], [1.746282126E12, 696.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.746282127E12, 776.0000000000003], [1.746282128E12, 1703.4], [1.746282126E12, 410.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.746282127E12, 1620.0], [1.746282128E12, 1806.54], [1.746282126E12, 528.8199999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.746282127E12, 1375.4499999999998], [1.746282128E12, 1743.6999999999998], [1.746282126E12, 459.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.746282127E12, 243.0], [1.746282128E12, 491.0], [1.746282126E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.746282127E12, 501.5], [1.746282128E12, 1244.0], [1.746282126E12, 242.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.746282128E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 242.0, "minX": 505.0, "maxY": 1244.0, "series": [{"data": [[550.0, 501.5], [945.0, 1244.0], [505.0, 242.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 945.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 238.0, "minX": 505.0, "maxY": 585.0, "series": [{"data": [[550.0, 462.5], [945.0, 585.0], [505.0, 238.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 945.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 574.0, "minX": 1.746282126E12, "maxY": 1426.0, "series": [{"data": [[1.746282127E12, 574.0], [1.746282126E12, 1426.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.746282127E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 505.0, "minX": 1.746282126E12, "maxY": 945.0, "series": [{"data": [[1.746282127E12, 550.0], [1.746282128E12, 945.0], [1.746282126E12, 505.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.746282128E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.746282126E12, "maxY": 945.0, "series": [{"data": [[1.746282127E12, 52.0], [1.746282128E12, 945.0], [1.746282126E12, 3.0]], "isOverall": false, "label": "/dialog/list-success", "isController": false}, {"data": [[1.746282127E12, 498.0], [1.746282126E12, 502.0]], "isOverall": false, "label": "/dialog/send-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.746282128E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 505.0, "minX": 1.746282126E12, "maxY": 945.0, "series": [{"data": [[1.746282127E12, 550.0], [1.746282128E12, 945.0], [1.746282126E12, 505.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.746282128E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

