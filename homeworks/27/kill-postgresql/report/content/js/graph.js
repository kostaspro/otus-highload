/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2765.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 5.0], [2.8, 5.0], [2.9, 7.0], [3.0, 10.0], [3.1, 16.0], [3.2, 19.0], [3.3, 26.0], [3.4, 34.0], [3.5, 41.0], [3.6, 45.0], [3.7, 50.0], [3.8, 54.0], [3.9, 57.0], [4.0, 60.0], [4.1, 63.0], [4.2, 66.0], [4.3, 69.0], [4.4, 72.0], [4.5, 74.0], [4.6, 76.0], [4.7, 78.0], [4.8, 80.0], [4.9, 83.0], [5.0, 85.0], [5.1, 87.0], [5.2, 90.0], [5.3, 92.0], [5.4, 94.0], [5.5, 96.0], [5.6, 98.0], [5.7, 101.0], [5.8, 103.0], [5.9, 105.0], [6.0, 106.0], [6.1, 108.0], [6.2, 110.0], [6.3, 112.0], [6.4, 114.0], [6.5, 115.0], [6.6, 118.0], [6.7, 119.0], [6.8, 121.0], [6.9, 123.0], [7.0, 125.0], [7.1, 127.0], [7.2, 129.0], [7.3, 131.0], [7.4, 133.0], [7.5, 135.0], [7.6, 137.0], [7.7, 138.0], [7.8, 140.0], [7.9, 142.0], [8.0, 143.0], [8.1, 145.0], [8.2, 147.0], [8.3, 149.0], [8.4, 150.0], [8.5, 151.0], [8.6, 153.0], [8.7, 154.0], [8.8, 155.0], [8.9, 157.0], [9.0, 158.0], [9.1, 159.0], [9.2, 160.0], [9.3, 162.0], [9.4, 163.0], [9.5, 164.0], [9.6, 165.0], [9.7, 167.0], [9.8, 168.0], [9.9, 169.0], [10.0, 170.0], [10.1, 171.0], [10.2, 172.0], [10.3, 173.0], [10.4, 175.0], [10.5, 176.0], [10.6, 177.0], [10.7, 178.0], [10.8, 179.0], [10.9, 180.0], [11.0, 181.0], [11.1, 182.0], [11.2, 183.0], [11.3, 184.0], [11.4, 185.0], [11.5, 186.0], [11.6, 187.0], [11.7, 188.0], [11.8, 189.0], [11.9, 190.0], [12.0, 191.0], [12.1, 192.0], [12.2, 192.0], [12.3, 193.0], [12.4, 194.0], [12.5, 195.0], [12.6, 196.0], [12.7, 197.0], [12.8, 198.0], [12.9, 199.0], [13.0, 200.0], [13.1, 200.0], [13.2, 201.0], [13.3, 202.0], [13.4, 203.0], [13.5, 204.0], [13.6, 204.0], [13.7, 205.0], [13.8, 206.0], [13.9, 207.0], [14.0, 208.0], [14.1, 209.0], [14.2, 210.0], [14.3, 211.0], [14.4, 211.0], [14.5, 212.0], [14.6, 213.0], [14.7, 214.0], [14.8, 215.0], [14.9, 216.0], [15.0, 217.0], [15.1, 218.0], [15.2, 219.0], [15.3, 220.0], [15.4, 221.0], [15.5, 222.0], [15.6, 223.0], [15.7, 224.0], [15.8, 225.0], [15.9, 226.0], [16.0, 227.0], [16.1, 228.0], [16.2, 229.0], [16.3, 231.0], [16.4, 232.0], [16.5, 233.0], [16.6, 234.0], [16.7, 235.0], [16.8, 236.0], [16.9, 237.0], [17.0, 238.0], [17.1, 239.0], [17.2, 240.0], [17.3, 241.0], [17.4, 242.0], [17.5, 243.0], [17.6, 244.0], [17.7, 245.0], [17.8, 245.0], [17.9, 246.0], [18.0, 247.0], [18.1, 248.0], [18.2, 249.0], [18.3, 250.0], [18.4, 251.0], [18.5, 252.0], [18.6, 253.0], [18.7, 254.0], [18.8, 255.0], [18.9, 255.0], [19.0, 256.0], [19.1, 257.0], [19.2, 258.0], [19.3, 259.0], [19.4, 260.0], [19.5, 260.0], [19.6, 261.0], [19.7, 262.0], [19.8, 263.0], [19.9, 264.0], [20.0, 265.0], [20.1, 265.0], [20.2, 266.0], [20.3, 267.0], [20.4, 267.0], [20.5, 268.0], [20.6, 269.0], [20.7, 270.0], [20.8, 270.0], [20.9, 271.0], [21.0, 272.0], [21.1, 272.0], [21.2, 273.0], [21.3, 274.0], [21.4, 274.0], [21.5, 275.0], [21.6, 275.0], [21.7, 276.0], [21.8, 277.0], [21.9, 277.0], [22.0, 278.0], [22.1, 279.0], [22.2, 279.0], [22.3, 280.0], [22.4, 280.0], [22.5, 281.0], [22.6, 282.0], [22.7, 283.0], [22.8, 283.0], [22.9, 284.0], [23.0, 284.0], [23.1, 285.0], [23.2, 286.0], [23.3, 286.0], [23.4, 287.0], [23.5, 287.0], [23.6, 288.0], [23.7, 289.0], [23.8, 289.0], [23.9, 290.0], [24.0, 291.0], [24.1, 291.0], [24.2, 292.0], [24.3, 292.0], [24.4, 293.0], [24.5, 293.0], [24.6, 294.0], [24.7, 295.0], [24.8, 295.0], [24.9, 296.0], [25.0, 296.0], [25.1, 297.0], [25.2, 297.0], [25.3, 298.0], [25.4, 298.0], [25.5, 299.0], [25.6, 299.0], [25.7, 300.0], [25.8, 300.0], [25.9, 301.0], [26.0, 301.0], [26.1, 302.0], [26.2, 302.0], [26.3, 303.0], [26.4, 303.0], [26.5, 304.0], [26.6, 304.0], [26.7, 305.0], [26.8, 305.0], [26.9, 306.0], [27.0, 306.0], [27.1, 307.0], [27.2, 307.0], [27.3, 308.0], [27.4, 308.0], [27.5, 308.0], [27.6, 309.0], [27.7, 309.0], [27.8, 310.0], [27.9, 310.0], [28.0, 311.0], [28.1, 311.0], [28.2, 311.0], [28.3, 312.0], [28.4, 312.0], [28.5, 313.0], [28.6, 313.0], [28.7, 314.0], [28.8, 314.0], [28.9, 314.0], [29.0, 315.0], [29.1, 315.0], [29.2, 316.0], [29.3, 316.0], [29.4, 317.0], [29.5, 317.0], [29.6, 318.0], [29.7, 318.0], [29.8, 319.0], [29.9, 319.0], [30.0, 319.0], [30.1, 320.0], [30.2, 320.0], [30.3, 321.0], [30.4, 321.0], [30.5, 322.0], [30.6, 322.0], [30.7, 323.0], [30.8, 323.0], [30.9, 324.0], [31.0, 324.0], [31.1, 325.0], [31.2, 325.0], [31.3, 326.0], [31.4, 326.0], [31.5, 326.0], [31.6, 327.0], [31.7, 327.0], [31.8, 328.0], [31.9, 328.0], [32.0, 329.0], [32.1, 329.0], [32.2, 330.0], [32.3, 330.0], [32.4, 331.0], [32.5, 331.0], [32.6, 331.0], [32.7, 332.0], [32.8, 332.0], [32.9, 333.0], [33.0, 333.0], [33.1, 334.0], [33.2, 334.0], [33.3, 335.0], [33.4, 335.0], [33.5, 336.0], [33.6, 336.0], [33.7, 336.0], [33.8, 337.0], [33.9, 337.0], [34.0, 338.0], [34.1, 338.0], [34.2, 339.0], [34.3, 339.0], [34.4, 339.0], [34.5, 340.0], [34.6, 340.0], [34.7, 341.0], [34.8, 341.0], [34.9, 342.0], [35.0, 342.0], [35.1, 342.0], [35.2, 343.0], [35.3, 343.0], [35.4, 344.0], [35.5, 344.0], [35.6, 344.0], [35.7, 345.0], [35.8, 345.0], [35.9, 346.0], [36.0, 346.0], [36.1, 347.0], [36.2, 347.0], [36.3, 347.0], [36.4, 348.0], [36.5, 348.0], [36.6, 349.0], [36.7, 349.0], [36.8, 349.0], [36.9, 350.0], [37.0, 350.0], [37.1, 351.0], [37.2, 351.0], [37.3, 351.0], [37.4, 352.0], [37.5, 352.0], [37.6, 352.0], [37.7, 353.0], [37.8, 353.0], [37.9, 354.0], [38.0, 354.0], [38.1, 354.0], [38.2, 355.0], [38.3, 355.0], [38.4, 355.0], [38.5, 356.0], [38.6, 356.0], [38.7, 356.0], [38.8, 357.0], [38.9, 357.0], [39.0, 358.0], [39.1, 358.0], [39.2, 358.0], [39.3, 358.0], [39.4, 359.0], [39.5, 359.0], [39.6, 360.0], [39.7, 360.0], [39.8, 360.0], [39.9, 361.0], [40.0, 361.0], [40.1, 362.0], [40.2, 362.0], [40.3, 362.0], [40.4, 363.0], [40.5, 363.0], [40.6, 363.0], [40.7, 364.0], [40.8, 364.0], [40.9, 365.0], [41.0, 365.0], [41.1, 365.0], [41.2, 365.0], [41.3, 366.0], [41.4, 366.0], [41.5, 367.0], [41.6, 367.0], [41.7, 367.0], [41.8, 368.0], [41.9, 368.0], [42.0, 368.0], [42.1, 369.0], [42.2, 369.0], [42.3, 369.0], [42.4, 370.0], [42.5, 370.0], [42.6, 370.0], [42.7, 371.0], [42.8, 371.0], [42.9, 371.0], [43.0, 372.0], [43.1, 372.0], [43.2, 372.0], [43.3, 373.0], [43.4, 373.0], [43.5, 373.0], [43.6, 373.0], [43.7, 374.0], [43.8, 374.0], [43.9, 374.0], [44.0, 375.0], [44.1, 375.0], [44.2, 375.0], [44.3, 376.0], [44.4, 376.0], [44.5, 377.0], [44.6, 377.0], [44.7, 377.0], [44.8, 378.0], [44.9, 378.0], [45.0, 378.0], [45.1, 379.0], [45.2, 379.0], [45.3, 379.0], [45.4, 379.0], [45.5, 380.0], [45.6, 380.0], [45.7, 381.0], [45.8, 381.0], [45.9, 381.0], [46.0, 381.0], [46.1, 382.0], [46.2, 382.0], [46.3, 382.0], [46.4, 382.0], [46.5, 383.0], [46.6, 383.0], [46.7, 383.0], [46.8, 384.0], [46.9, 384.0], [47.0, 384.0], [47.1, 385.0], [47.2, 385.0], [47.3, 385.0], [47.4, 385.0], [47.5, 386.0], [47.6, 386.0], [47.7, 386.0], [47.8, 386.0], [47.9, 387.0], [48.0, 387.0], [48.1, 387.0], [48.2, 388.0], [48.3, 388.0], [48.4, 388.0], [48.5, 388.0], [48.6, 389.0], [48.7, 389.0], [48.8, 389.0], [48.9, 390.0], [49.0, 390.0], [49.1, 390.0], [49.2, 390.0], [49.3, 391.0], [49.4, 391.0], [49.5, 391.0], [49.6, 392.0], [49.7, 392.0], [49.8, 392.0], [49.9, 392.0], [50.0, 393.0], [50.1, 393.0], [50.2, 393.0], [50.3, 394.0], [50.4, 394.0], [50.5, 394.0], [50.6, 395.0], [50.7, 395.0], [50.8, 395.0], [50.9, 395.0], [51.0, 396.0], [51.1, 396.0], [51.2, 396.0], [51.3, 397.0], [51.4, 397.0], [51.5, 397.0], [51.6, 397.0], [51.7, 398.0], [51.8, 398.0], [51.9, 398.0], [52.0, 399.0], [52.1, 399.0], [52.2, 399.0], [52.3, 399.0], [52.4, 400.0], [52.5, 400.0], [52.6, 400.0], [52.7, 401.0], [52.8, 401.0], [52.9, 401.0], [53.0, 401.0], [53.1, 402.0], [53.2, 402.0], [53.3, 402.0], [53.4, 403.0], [53.5, 403.0], [53.6, 403.0], [53.7, 404.0], [53.8, 404.0], [53.9, 404.0], [54.0, 404.0], [54.1, 405.0], [54.2, 405.0], [54.3, 405.0], [54.4, 406.0], [54.5, 406.0], [54.6, 406.0], [54.7, 407.0], [54.8, 407.0], [54.9, 407.0], [55.0, 408.0], [55.1, 408.0], [55.2, 408.0], [55.3, 409.0], [55.4, 409.0], [55.5, 409.0], [55.6, 410.0], [55.7, 410.0], [55.8, 410.0], [55.9, 411.0], [56.0, 411.0], [56.1, 411.0], [56.2, 412.0], [56.3, 412.0], [56.4, 412.0], [56.5, 413.0], [56.6, 413.0], [56.7, 413.0], [56.8, 414.0], [56.9, 414.0], [57.0, 415.0], [57.1, 415.0], [57.2, 415.0], [57.3, 415.0], [57.4, 416.0], [57.5, 416.0], [57.6, 416.0], [57.7, 417.0], [57.8, 417.0], [57.9, 417.0], [58.0, 418.0], [58.1, 418.0], [58.2, 419.0], [58.3, 419.0], [58.4, 419.0], [58.5, 420.0], [58.6, 420.0], [58.7, 420.0], [58.8, 420.0], [58.9, 421.0], [59.0, 421.0], [59.1, 422.0], [59.2, 422.0], [59.3, 422.0], [59.4, 423.0], [59.5, 423.0], [59.6, 424.0], [59.7, 424.0], [59.8, 424.0], [59.9, 425.0], [60.0, 425.0], [60.1, 426.0], [60.2, 426.0], [60.3, 426.0], [60.4, 427.0], [60.5, 427.0], [60.6, 428.0], [60.7, 428.0], [60.8, 428.0], [60.9, 429.0], [61.0, 429.0], [61.1, 430.0], [61.2, 430.0], [61.3, 430.0], [61.4, 431.0], [61.5, 431.0], [61.6, 432.0], [61.7, 432.0], [61.8, 432.0], [61.9, 433.0], [62.0, 433.0], [62.1, 434.0], [62.2, 434.0], [62.3, 434.0], [62.4, 435.0], [62.5, 435.0], [62.6, 436.0], [62.7, 436.0], [62.8, 436.0], [62.9, 437.0], [63.0, 437.0], [63.1, 438.0], [63.2, 438.0], [63.3, 438.0], [63.4, 439.0], [63.5, 439.0], [63.6, 440.0], [63.7, 440.0], [63.8, 441.0], [63.9, 441.0], [64.0, 441.0], [64.1, 442.0], [64.2, 442.0], [64.3, 443.0], [64.4, 443.0], [64.5, 443.0], [64.6, 444.0], [64.7, 444.0], [64.8, 445.0], [64.9, 445.0], [65.0, 446.0], [65.1, 446.0], [65.2, 446.0], [65.3, 447.0], [65.4, 447.0], [65.5, 448.0], [65.6, 448.0], [65.7, 448.0], [65.8, 449.0], [65.9, 449.0], [66.0, 450.0], [66.1, 450.0], [66.2, 451.0], [66.3, 451.0], [66.4, 451.0], [66.5, 452.0], [66.6, 452.0], [66.7, 453.0], [66.8, 453.0], [66.9, 453.0], [67.0, 454.0], [67.1, 454.0], [67.2, 455.0], [67.3, 455.0], [67.4, 455.0], [67.5, 456.0], [67.6, 456.0], [67.7, 457.0], [67.8, 457.0], [67.9, 457.0], [68.0, 458.0], [68.1, 458.0], [68.2, 459.0], [68.3, 459.0], [68.4, 459.0], [68.5, 460.0], [68.6, 460.0], [68.7, 461.0], [68.8, 461.0], [68.9, 462.0], [69.0, 462.0], [69.1, 462.0], [69.2, 463.0], [69.3, 463.0], [69.4, 464.0], [69.5, 464.0], [69.6, 465.0], [69.7, 465.0], [69.8, 465.0], [69.9, 466.0], [70.0, 466.0], [70.1, 467.0], [70.2, 467.0], [70.3, 468.0], [70.4, 468.0], [70.5, 468.0], [70.6, 469.0], [70.7, 469.0], [70.8, 470.0], [70.9, 470.0], [71.0, 471.0], [71.1, 471.0], [71.2, 471.0], [71.3, 472.0], [71.4, 472.0], [71.5, 473.0], [71.6, 473.0], [71.7, 474.0], [71.8, 474.0], [71.9, 475.0], [72.0, 475.0], [72.1, 475.0], [72.2, 476.0], [72.3, 476.0], [72.4, 477.0], [72.5, 477.0], [72.6, 478.0], [72.7, 478.0], [72.8, 479.0], [72.9, 479.0], [73.0, 480.0], [73.1, 480.0], [73.2, 481.0], [73.3, 481.0], [73.4, 482.0], [73.5, 482.0], [73.6, 483.0], [73.7, 483.0], [73.8, 484.0], [73.9, 484.0], [74.0, 485.0], [74.1, 485.0], [74.2, 486.0], [74.3, 486.0], [74.4, 487.0], [74.5, 488.0], [74.6, 488.0], [74.7, 489.0], [74.8, 489.0], [74.9, 490.0], [75.0, 490.0], [75.1, 491.0], [75.2, 492.0], [75.3, 492.0], [75.4, 493.0], [75.5, 493.0], [75.6, 494.0], [75.7, 495.0], [75.8, 496.0], [75.9, 496.0], [76.0, 497.0], [76.1, 498.0], [76.2, 498.0], [76.3, 499.0], [76.4, 500.0], [76.5, 500.0], [76.6, 501.0], [76.7, 501.0], [76.8, 502.0], [76.9, 503.0], [77.0, 503.0], [77.1, 504.0], [77.2, 505.0], [77.3, 505.0], [77.4, 506.0], [77.5, 507.0], [77.6, 507.0], [77.7, 508.0], [77.8, 509.0], [77.9, 509.0], [78.0, 510.0], [78.1, 511.0], [78.2, 511.0], [78.3, 512.0], [78.4, 513.0], [78.5, 514.0], [78.6, 514.0], [78.7, 515.0], [78.8, 516.0], [78.9, 516.0], [79.0, 517.0], [79.1, 518.0], [79.2, 519.0], [79.3, 519.0], [79.4, 520.0], [79.5, 521.0], [79.6, 522.0], [79.7, 522.0], [79.8, 523.0], [79.9, 524.0], [80.0, 525.0], [80.1, 526.0], [80.2, 526.0], [80.3, 527.0], [80.4, 528.0], [80.5, 529.0], [80.6, 530.0], [80.7, 531.0], [80.8, 531.0], [80.9, 532.0], [81.0, 533.0], [81.1, 534.0], [81.2, 535.0], [81.3, 536.0], [81.4, 537.0], [81.5, 538.0], [81.6, 539.0], [81.7, 540.0], [81.8, 541.0], [81.9, 542.0], [82.0, 543.0], [82.1, 544.0], [82.2, 545.0], [82.3, 546.0], [82.4, 547.0], [82.5, 548.0], [82.6, 549.0], [82.7, 550.0], [82.8, 551.0], [82.9, 552.0], [83.0, 553.0], [83.1, 554.0], [83.2, 555.0], [83.3, 557.0], [83.4, 558.0], [83.5, 559.0], [83.6, 560.0], [83.7, 561.0], [83.8, 562.0], [83.9, 564.0], [84.0, 565.0], [84.1, 566.0], [84.2, 567.0], [84.3, 568.0], [84.4, 569.0], [84.5, 570.0], [84.6, 571.0], [84.7, 573.0], [84.8, 574.0], [84.9, 575.0], [85.0, 577.0], [85.1, 578.0], [85.2, 579.0], [85.3, 581.0], [85.4, 582.0], [85.5, 584.0], [85.6, 585.0], [85.7, 587.0], [85.8, 588.0], [85.9, 590.0], [86.0, 591.0], [86.1, 593.0], [86.2, 595.0], [86.3, 596.0], [86.4, 598.0], [86.5, 600.0], [86.6, 602.0], [86.7, 604.0], [86.8, 606.0], [86.9, 608.0], [87.0, 610.0], [87.1, 612.0], [87.2, 614.0], [87.3, 616.0], [87.4, 617.0], [87.5, 619.0], [87.6, 621.0], [87.7, 623.0], [87.8, 625.0], [87.9, 627.0], [88.0, 630.0], [88.1, 632.0], [88.2, 635.0], [88.3, 637.0], [88.4, 639.0], [88.5, 641.0], [88.6, 644.0], [88.7, 646.0], [88.8, 649.0], [88.9, 652.0], [89.0, 654.0], [89.1, 657.0], [89.2, 659.0], [89.3, 663.0], [89.4, 665.0], [89.5, 668.0], [89.6, 671.0], [89.7, 674.0], [89.8, 677.0], [89.9, 680.0], [90.0, 683.0], [90.1, 687.0], [90.2, 690.0], [90.3, 693.0], [90.4, 697.0], [90.5, 701.0], [90.6, 705.0], [90.7, 709.0], [90.8, 713.0], [90.9, 717.0], [91.0, 721.0], [91.1, 725.0], [91.2, 730.0], [91.3, 736.0], [91.4, 741.0], [91.5, 746.0], [91.6, 752.0], [91.7, 758.0], [91.8, 764.0], [91.9, 769.0], [92.0, 776.0], [92.1, 782.0], [92.2, 788.0], [92.3, 794.0], [92.4, 802.0], [92.5, 810.0], [92.6, 820.0], [92.7, 829.0], [92.8, 839.0], [92.9, 848.0], [93.0, 856.0], [93.1, 869.0], [93.2, 885.0], [93.3, 901.0], [93.4, 924.0], [93.5, 934.0], [93.6, 952.0], [93.7, 984.0], [93.8, 1003.0], [93.9, 1016.0], [94.0, 1040.0], [94.1, 1050.0], [94.2, 1063.0], [94.3, 1087.0], [94.4, 1106.0], [94.5, 1117.0], [94.6, 1128.0], [94.7, 1144.0], [94.8, 1156.0], [94.9, 1166.0], [95.0, 1173.0], [95.1, 1181.0], [95.2, 1188.0], [95.3, 1195.0], [95.4, 1202.0], [95.5, 1212.0], [95.6, 1221.0], [95.7, 1231.0], [95.8, 1243.0], [95.9, 1251.0], [96.0, 1260.0], [96.1, 1270.0], [96.2, 1279.0], [96.3, 1288.0], [96.4, 1295.0], [96.5, 1302.0], [96.6, 1310.0], [96.7, 1316.0], [96.8, 1322.0], [96.9, 1328.0], [97.0, 1333.0], [97.1, 1340.0], [97.2, 1347.0], [97.3, 1356.0], [97.4, 1367.0], [97.5, 1375.0], [97.6, 1384.0], [97.7, 1393.0], [97.8, 1404.0], [97.9, 1414.0], [98.0, 1423.0], [98.1, 1434.0], [98.2, 1449.0], [98.3, 1468.0], [98.4, 1488.0], [98.5, 1504.0], [98.6, 1518.0], [98.7, 1542.0], [98.8, 1568.0], [98.9, 1621.0], [99.0, 1650.0], [99.1, 1676.0], [99.2, 1705.0], [99.3, 1726.0], [99.4, 1755.0], [99.5, 1995.0], [99.6, 2014.0], [99.7, 2131.0], [99.8, 2166.0], [99.9, 2442.0], [100.0, 2765.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 18109.0, "series": [{"data": [[0.0, 3840.0], [600.0, 2728.0], [700.0, 1305.0], [800.0, 618.0], [900.0, 329.0], [1000.0, 398.0], [1100.0, 687.0], [1200.0, 739.0], [1300.0, 886.0], [1400.0, 483.0], [1500.0, 265.0], [100.0, 4990.0], [1600.0, 217.0], [1700.0, 185.0], [1800.0, 11.0], [1900.0, 26.0], [2000.0, 107.0], [2100.0, 98.0], [2200.0, 3.0], [2300.0, 41.0], [2400.0, 41.0], [2500.0, 29.0], [2600.0, 13.0], [2700.0, 1.0], [200.0, 8630.0], [300.0, 18109.0], [400.0, 16370.0], [500.0, 6834.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 904.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 50045.0, "series": [{"data": [[0.0, 50045.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 14861.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 904.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 2173.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 128.58333333333331, "minX": 1.749374572E12, "maxY": 1000.0, "series": [{"data": [[1.749374578E12, 1000.0], [1.749374577E12, 1000.0], [1.749374581E12, 1000.0], [1.74937458E12, 1000.0], [1.749374579E12, 1000.0], [1.749374573E12, 646.4690265486739], [1.749374572E12, 128.58333333333331], [1.749374576E12, 1000.0], [1.749374575E12, 1000.0], [1.749374574E12, 1000.0], [1.749374589E12, 1000.0], [1.749374588E12, 1000.0], [1.749374587E12, 1000.0], [1.749374592E12, 1000.0], [1.749374591E12, 1000.0], [1.74937459E12, 1000.0], [1.749374584E12, 1000.0], [1.749374583E12, 1000.0], [1.749374582E12, 1000.0], [1.749374586E12, 1000.0], [1.749374585E12, 1000.0], [1.7493746E12, 1000.0], [1.749374599E12, 1000.0], [1.749374598E12, 1000.0], [1.749374602E12, 991.0227113906361], [1.749374601E12, 1000.0], [1.749374594E12, 1000.0], [1.749374593E12, 1000.0], [1.749374597E12, 1000.0], [1.749374596E12, 1000.0], [1.749374595E12, 1000.0], [1.749374603E12, 387.57901554404185]], "isOverall": false, "label": "OTUS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374603E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 2180.0, "series": [{"data": [[2.0, 1317.0], [3.0, 1314.0], [4.0, 1998.0], [5.0, 1999.0], [6.0, 1998.0], [7.0, 1998.0], [8.0, 1995.0], [9.0, 1995.0], [11.0, 2087.5], [12.0, 2180.0], [14.0, 1992.0], [15.0, 1990.0], [16.0, 2178.0], [17.0, 1990.0], [19.0, 2080.5], [20.0, 2173.0], [21.0, 1982.0], [23.0, 2072.5], [24.0, 2166.0], [25.0, 2167.0], [26.0, 2160.0], [27.0, 2157.0], [28.0, 2160.0], [29.0, 2160.0], [30.0, 2157.0], [31.0, 2157.0], [33.0, 2160.0], [34.0, 2161.0], [37.0, 2155.0], [36.0, 2149.5], [39.0, 2152.0], [41.0, 2153.0], [40.0, 2158.0], [43.0, 2153.0], [42.0, 2147.0], [45.0, 2140.0], [44.0, 2141.0], [49.0, 2137.0], [48.0, 2147.0], [50.0, 2135.0], [53.0, 2132.0], [52.0, 2137.0], [55.0, 2136.0], [54.0, 2137.5], [56.0, 2129.0], [59.0, 2134.6666666666665], [61.0, 2137.5], [62.0, 2151.0], [66.0, 2130.0], [65.0, 2140.0], [64.0, 2141.5], [71.0, 2133.5], [70.0, 2132.3333333333335], [74.0, 2133.0], [73.0, 2128.5], [79.0, 2134.0], [78.0, 2133.0], [80.0, 2129.0], [85.0, 2134.6666666666665], [84.0, 2132.0], [90.0, 2136.0], [88.0, 2131.0], [95.0, 2128.75], [93.0, 2132.0], [103.0, 2132.1666666666665], [101.0, 2132.0], [100.0, 2123.0], [107.0, 2133.0], [105.0, 2136.0], [104.0, 2125.0], [111.0, 2133.0], [110.0, 2129.0], [113.0, 2076.0], [112.0, 2123.0], [116.0, 32.5], [118.0, 38.0], [119.0, 41.0], [117.0, 2077.0], [123.0, 404.75], [122.0, 1496.0], [121.0, 2084.0], [120.0, 2074.333333333333], [126.0, 604.0], [125.0, 2059.0], [124.0, 2061.0], [134.0, 54.22222222222222], [135.0, 480.625], [133.0, 2058.0], [132.0, 1465.0], [131.0, 2055.0], [130.0, 1524.5], [128.0, 2057.5], [143.0, 1518.5], [141.0, 627.0], [140.0, 1567.0], [139.0, 2056.0], [137.0, 1811.5], [151.0, 1093.5], [150.0, 1040.5], [147.0, 1563.0], [146.0, 599.0], [145.0, 1561.0], [144.0, 1462.0], [159.0, 76.33333333333333], [158.0, 1528.6666666666667], [155.0, 623.0], [154.0, 1465.3333333333333], [160.0, 71.5], [161.0, 802.2], [163.0, 83.66666666666667], [164.0, 270.66666666666663], [165.0, 148.0], [166.0, 88.5], [167.0, 604.3333333333334], [162.0, 624.0], [175.0, 599.0], [173.0, 1212.0], [172.0, 1747.0], [170.0, 1554.0], [169.0, 1052.5], [180.0, 442.0], [183.0, 1174.0], [178.0, 1376.6666666666667], [184.0, 74.0], [191.0, 615.0], [190.0, 626.0], [189.0, 1739.0], [188.0, 629.0], [187.0, 638.0], [186.0, 1300.3333333333333], [193.0, 453.0], [195.0, 914.0], [199.0, 928.6666666666667], [197.0, 1547.0], [194.0, 616.0], [204.0, 231.625], [206.0, 98.125], [205.0, 959.0], [202.0, 628.5], [201.0, 613.0], [209.0, 130.0], [210.0, 497.25], [211.0, 98.33333333333333], [212.0, 77.0], [213.0, 937.75], [214.0, 94.4], [215.0, 580.875], [208.0, 1006.0], [217.0, 661.0], [218.0, 274.0], [219.0, 380.83333333333337], [221.0, 367.3333333333333], [222.0, 394.0], [223.0, 860.0], [216.0, 1771.0], [225.0, 507.5], [226.0, 914.0], [229.0, 132.0], [231.0, 659.0], [230.0, 1148.3333333333333], [228.0, 1182.5], [224.0, 1729.0], [235.0, 545.8], [237.0, 158.0], [239.0, 160.0], [236.0, 1889.5], [232.0, 868.0], [240.0, 124.6], [241.0, 311.0], [244.0, 136.5], [243.0, 1351.0], [248.0, 963.0], [253.0, 284.0], [254.0, 934.0], [255.0, 1761.0], [249.0, 1353.4], [268.0, 43.666666666666664], [256.0, 178.0], [259.0, 907.75], [257.0, 1304.0], [261.0, 83.75], [260.0, 631.0], [262.0, 1181.3333333333333], [263.0, 1744.0], [265.0, 339.5], [267.0, 64.0], [271.0, 1410.5], [270.0, 856.0], [284.0, 120.0], [278.0, 648.25], [276.0, 149.0], [279.0, 381.0], [272.0, 743.0], [274.0, 1740.0], [273.0, 1956.75], [280.0, 109.75], [281.0, 189.9], [282.0, 111.0], [283.0, 247.0], [285.0, 143.25], [286.0, 717.4285714285714], [287.0, 145.66666666666666], [300.0, 531.25], [289.0, 127.5], [288.0, 1195.5], [291.0, 1171.0], [290.0, 851.0], [293.0, 121.0], [292.0, 851.0], [295.0, 788.6666666666666], [296.0, 135.0], [297.0, 550.5], [298.0, 1209.3333333333333], [299.0, 613.0], [302.0, 182.5], [301.0, 936.0], [303.0, 296.0], [307.0, 127.5], [304.0, 140.0], [305.0, 474.125], [306.0, 552.5], [308.0, 229.0], [309.0, 858.0], [311.0, 952.5], [316.0, 81.0], [319.0, 1736.0], [312.0, 598.0], [315.0, 736.5], [313.0, 621.0], [318.0, 853.0], [317.0, 1181.5], [332.0, 275.25], [322.0, 258.25], [323.0, 141.83333333333331], [324.0, 107.0], [325.0, 1749.0], [327.0, 1761.0], [326.0, 861.0], [331.0, 350.875], [333.0, 905.5], [334.0, 108.0], [335.0, 1724.0], [328.0, 1094.2], [329.0, 1753.0], [350.0, 911.5], [341.0, 78.6], [343.0, 1442.3333333333333], [339.0, 1726.0], [336.0, 1302.5], [342.0, 1738.0], [345.0, 318.4], [346.0, 70.33333333333333], [348.0, 204.5], [351.0, 67.33333333333333], [349.0, 929.0], [347.0, 889.5], [344.0, 841.0], [353.0, 437.0], [359.0, 443.5], [360.0, 613.6666666666666], [366.0, 647.0], [358.0, 1548.0], [355.0, 833.0], [354.0, 613.0], [352.0, 1272.5], [380.0, 428.5], [369.0, 28.5], [372.0, 65.66666666666667], [373.0, 57.66666666666667], [377.0, 22.333333333333332], [378.0, 744.7142857142858], [383.0, 471.75], [379.0, 1712.0], [374.0, 1721.3333333333333], [368.0, 1742.0], [397.0, 48.0], [386.0, 8.0], [387.0, 19.0], [396.0, 1429.5], [388.0, 79.0], [389.0, 1227.25], [391.0, 53.666666666666664], [384.0, 1419.3333333333333], [390.0, 1309.5], [392.0, 278.33333333333337], [393.0, 185.0], [394.0, 516.6666666666667], [398.0, 50.0], [399.0, 666.6], [401.0, 150.0], [400.0, 347.33333333333337], [402.0, 162.0], [403.0, 292.0], [404.0, 406.83333333333337], [405.0, 287.0], [407.0, 184.0], [406.0, 873.0], [408.0, 552.5], [409.0, 834.0], [414.0, 500.0], [415.0, 752.2], [412.0, 208.44444444444446], [413.0, 200.30769230769232], [410.0, 126.5], [411.0, 396.5], [418.0, 187.66666666666669], [416.0, 180.0], [417.0, 1100.3333333333333], [419.0, 237.0], [428.0, 193.33333333333334], [431.0, 219.66666666666669], [420.0, 762.6666666666666], [421.0, 421.14285714285717], [422.0, 230.8], [424.0, 431.26666666666665], [425.0, 395.66666666666663], [426.0, 240.71428571428572], [435.0, 256.0], [436.0, 106.5], [438.0, 93.0], [439.0, 941.5], [432.0, 1484.0], [440.0, 123.77777777777777], [447.0, 1745.0], [445.0, 1747.0], [444.0, 1721.0], [443.0, 1496.2499999999998], [442.0, 1717.0], [451.0, 1745.0], [460.0, 1426.6666666666667], [458.0, 1738.0], [456.0, 1746.0], [455.0, 591.5], [453.0, 1741.0], [452.0, 1714.0], [450.0, 1713.0], [449.0, 843.0], [471.0, 249.0], [467.0, 897.6666666666667], [466.0, 1443.6666666666667], [464.0, 847.0], [468.0, 56.6], [469.0, 109.91666666666666], [470.0, 362.49999999999994], [472.0, 56.16666666666667], [473.0, 64.75], [474.0, 54.75], [476.0, 59.8], [477.0, 262.75], [478.0, 56.0], [479.0, 66.0], [492.0, 63.0], [480.0, 576.3333333333334], [483.0, 833.5], [481.0, 1082.0], [485.0, 72.0], [484.0, 832.0], [487.0, 365.2857142857142], [491.0, 244.77777777777777], [495.0, 848.0], [494.0, 731.0], [493.0, 1424.5], [490.0, 904.25], [488.0, 1699.0], [509.0, 726.8], [497.0, 73.0], [498.0, 569.5], [507.0, 447.0], [508.0, 53.0], [506.0, 803.0], [505.0, 825.0], [504.0, 1733.0], [503.0, 1731.5], [501.0, 1124.3333333333333], [536.0, 309.0], [518.0, 381.58333333333337], [519.0, 66.33333333333333], [522.0, 44.0], [520.0, 819.0], [523.0, 808.0], [524.0, 451.0], [525.0, 58.36363636363637], [527.0, 810.0], [514.0, 1016.2], [526.0, 818.0], [530.0, 180.83333333333334], [535.0, 817.0], [533.0, 822.0], [532.0, 826.0], [531.0, 809.0], [543.0, 559.0], [528.0, 815.0], [539.0, 440.6666666666667], [538.0, 832.0], [541.0, 436.0], [571.0, 165.66666666666666], [548.0, 550.625], [545.0, 91.5], [546.0, 62.0], [547.0, 57.16666666666667], [550.0, 46.25], [549.0, 646.0], [551.0, 726.4], [552.0, 78.0], [553.0, 1237.0], [555.0, 797.0], [554.0, 800.0], [557.0, 792.0], [556.0, 1698.0], [558.0, 795.0], [570.0, 516.8571428571429], [572.0, 101.23076923076923], [573.0, 169.0], [575.0, 48.0], [567.0, 1665.0], [566.0, 566.0], [565.0, 2117.0], [564.0, 2081.0], [563.0, 1663.0], [562.0, 791.0], [561.0, 792.0], [574.0, 564.0], [602.0, 429.09090909090907], [590.0, 468.66666666666663], [577.0, 31.0], [581.0, 1374.6666666666667], [578.0, 1231.0], [591.0, 866.0], [576.0, 790.0], [600.0, 422.66666666666663], [601.0, 471.125], [603.0, 298.5], [604.0, 280.3333333333333], [605.0, 266.2857142857143], [606.0, 469.625], [593.0, 889.0], [592.0, 784.0], [586.0, 450.0], [585.0, 1069.0], [584.0, 1104.3333333333333], [587.0, 158.85714285714286], [589.0, 623.0], [588.0, 2013.0], [594.0, 476.33333333333337], [595.0, 131.14285714285714], [596.0, 489.07142857142856], [597.0, 616.75], [598.0, 290.2], [599.0, 1661.0], [613.0, 346.75000000000006], [609.0, 277.4444444444445], [608.0, 779.2857142857143], [622.0, 277.0], [623.0, 1248.0], [610.0, 563.2], [611.0, 397.06250000000006], [612.0, 309.57142857142856], [624.0, 694.6666666666667], [632.0, 71.0], [614.0, 785.0], [633.0, 332.5], [634.0, 245.70000000000002], [635.0, 614.0], [637.0, 470.5], [638.0, 1682.0], [625.0, 463.0], [629.0, 1216.5], [631.0, 1652.5], [630.0, 1647.0], [616.0, 395.2857142857143], [617.0, 278.625], [618.0, 286.83333333333337], [619.0, 550.0], [620.0, 752.2], [657.0, 1645.0], [642.0, 80.42857142857143], [655.0, 1350.0], [641.0, 1681.0], [640.0, 769.0], [652.0, 775.5], [651.0, 759.0], [650.0, 777.0], [649.0, 773.0], [648.0, 765.0], [669.0, 1529.25], [667.0, 1694.0], [665.0, 823.5], [646.0, 778.0], [645.0, 1227.0], [643.0, 1195.0], [663.0, 1677.0], [662.0, 788.0], [661.0, 743.6666666666666], [656.0, 1646.0], [696.0, 782.0], [701.0, 759.0], [690.0, 109.44444444444444], [688.0, 1646.0], [691.0, 1266.75], [692.0, 107.0909090909091], [700.0, 1692.0], [699.0, 1375.3333333333333], [698.0, 729.5], [687.0, 773.0], [672.0, 1228.0], [676.0, 1197.0], [674.0, 762.0], [679.0, 1426.0], [678.0, 1975.0], [686.0, 1643.0], [684.0, 770.5], [683.0, 1639.0], [682.0, 1639.0], [680.0, 1641.0], [693.0, 793.5], [710.0, 113.99999999999999], [715.0, 120.77777777777777], [709.0, 437.75], [707.0, 817.0], [705.0, 765.25], [719.0, 758.0], [718.0, 1655.25], [711.0, 250.625], [728.0, 691.0], [730.0, 777.0], [729.0, 791.0], [734.0, 804.0], [721.0, 761.0], [720.0, 1681.0], [731.0, 773.0], [723.0, 284.375], [724.0, 899.5], [725.0, 761.0], [712.0, 216.5], [713.0, 270.40000000000003], [714.0, 148.72727272727275], [716.0, 108.2], [717.0, 110.8125], [763.0, 424.5], [750.0, 220.25], [748.0, 472.0], [747.0, 473.5], [745.0, 2003.0], [744.0, 1394.5], [751.0, 270.8], [752.0, 143.66666666666666], [753.0, 476.0], [755.0, 493.0], [754.0, 484.0], [767.0, 141.5], [764.0, 428.0], [761.0, 1645.0], [760.0, 667.5], [743.0, 1929.0], [741.0, 858.0], [740.0, 844.0], [739.0, 1510.6], [758.0, 561.5], [757.0, 509.0], [772.0, 227.73333333333335], [768.0, 227.69230769230768], [783.0, 1509.0], [781.0, 1660.0], [779.0, 1660.0], [778.0, 1531.0], [777.0, 1526.0], [776.0, 1079.5], [769.0, 130.5], [770.0, 197.5], [771.0, 1587.0], [773.0, 817.0], [774.0, 436.0], [793.0, 647.0], [792.0, 1509.5], [795.0, 1220.6666666666667], [794.0, 623.0], [799.0, 1524.0], [784.0, 1067.5], [786.0, 1515.0], [785.0, 427.0], [789.0, 617.0], [788.0, 1563.0], [798.0, 1505.0], [797.0, 1516.0], [796.0, 1516.0], [816.0, 181.875], [807.0, 119.0], [805.0, 1156.0], [804.0, 1519.0], [801.0, 434.0], [813.0, 613.0], [812.0, 1617.0], [811.0, 1059.0], [824.0, 139.58333333333337], [826.0, 129.0], [827.0, 1102.0], [830.0, 1508.5], [828.0, 1534.0], [808.0, 127.4], [809.0, 1064.5], [810.0, 122.99999999999999], [818.0, 97.66666666666667], [817.0, 850.3333333333334], [819.0, 462.33333333333337], [820.0, 289.22222222222223], [821.0, 116.69230769230771], [823.0, 288.375], [822.0, 1513.0], [849.0, 449.4], [836.0, 767.3333333333333], [835.0, 748.1428571428571], [845.0, 1212.3333333333333], [832.0, 969.5], [833.0, 1509.0], [839.0, 737.5], [856.0, 405.5], [858.0, 1042.0], [859.0, 482.125], [860.0, 509.5454545454545], [862.0, 468.53846153846155], [863.0, 360.2857142857143], [841.0, 419.6], [842.0, 1511.0], [843.0, 297.5], [850.0, 422.0], [851.0, 904.5], [852.0, 415.0], [853.0, 435.5], [854.0, 398.00000000000006], [855.0, 614.3571428571429], [867.0, 416.59999999999997], [864.0, 570.3846153846152], [878.0, 465.0], [879.0, 955.5], [876.0, 761.6923076923077], [877.0, 400.99999999999994], [874.0, 120.33333333333333], [875.0, 301.3], [865.0, 429.9375], [866.0, 423.73333333333323], [868.0, 431.3076923076923], [869.0, 375.0], [870.0, 369.0], [871.0, 281.0714285714286], [880.0, 596.8333333333334], [895.0, 480.6666666666667], [893.0, 484.0], [894.0, 419.2], [891.0, 365.0], [892.0, 579.2222222222222], [888.0, 431.0], [889.0, 1568.3333333333333], [890.0, 434.75], [881.0, 411.0], [882.0, 399.6], [883.0, 593.75], [884.0, 537.6666666666667], [885.0, 577.3333333333333], [886.0, 964.0], [887.0, 602.2857142857142], [872.0, 354.3333333333333], [873.0, 169.44444444444446], [899.0, 831.6666666666666], [896.0, 439.0], [909.0, 1140.0], [907.0, 1500.0], [906.0, 1139.0], [905.0, 1103.0], [897.0, 436.0], [898.0, 512.3333333333334], [900.0, 885.3333333333333], [901.0, 186.0], [903.0, 962.5], [920.0, 110.66666666666666], [921.0, 513.0714285714286], [922.0, 121.6], [924.0, 131.25], [923.0, 1492.0], [925.0, 135.5], [914.0, 1604.0], [912.0, 1497.0], [917.0, 146.0], [918.0, 140.25], [919.0, 148.0], [958.0, 775.0], [959.0, 1647.0], [953.0, 1502.0], [952.0, 598.0], [951.0, 592.0], [949.0, 1488.0], [948.0, 1546.25], [944.0, 1505.0], [943.0, 1174.5], [933.0, 914.0], [930.0, 881.0], [941.0, 1491.5], [939.0, 1646.0], [938.0, 1494.0], [937.0, 1551.6666666666667], [936.0, 1500.0], [989.0, 1464.0], [990.0, 1471.0], [988.0, 879.0], [985.0, 1574.5], [983.0, 528.3333333333334], [980.0, 1244.5], [976.0, 1205.6666666666667], [973.0, 1487.0], [962.0, 1126.5], [961.0, 1534.0], [967.0, 1265.0], [963.0, 1487.0], [972.0, 1481.0], [970.0, 1588.0], [968.0, 597.0], [1000.0, 433.4082284770714], [999.0, 1084.5294117647056], [998.0, 1387.5], [996.0, 1285.8333333333333], [995.0, 1588.5], [994.0, 900.0], [993.0, 1022.5], [992.0, 1204.6666666666667], [1.0, 1318.0]], "isOverall": false, "label": "/user/search", "isController": false}, {"data": [[983.5454157657015, 441.09839224512365]], "isOverall": false, "label": "/user/search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11400.0, "minX": 1.749374572E12, "maxY": 7.1208635E7, "series": [{"data": [[1.749374578E12, 4.5264972E7], [1.749374577E12, 6.1104298E7], [1.749374581E12, 6.2804821E7], [1.74937458E12, 5.7393983E7], [1.749374579E12, 6.0542926E7], [1.749374573E12, 4.0568714E7], [1.749374572E12, 249893.0], [1.749374576E12, 7.1208635E7], [1.749374575E12, 6.3167575E7], [1.749374574E12, 6.7944212E7], [1.749374589E12, 5.8345458E7], [1.749374588E12, 5.2872551E7], [1.749374587E12, 6.2328198E7], [1.749374592E12, 5.4731999E7], [1.749374591E12, 6.4454124E7], [1.74937459E12, 6.5250545E7], [1.749374584E12, 6.2473522E7], [1.749374583E12, 5.4044741E7], [1.749374582E12, 5.4173022E7], [1.749374586E12, 6.3426202E7], [1.749374585E12, 6.0645269E7], [1.7493746E12, 3.7577383E7], [1.749374599E12, 4.9605683E7], [1.749374598E12, 5.409924E7], [1.749374602E12, 1.8910818E7], [1.749374601E12, 2.7676852E7], [1.749374594E12, 5.6296658E7], [1.749374593E12, 5.4093361E7], [1.749374597E12, 4.9912628E7], [1.749374596E12, 6.7235404E7], [1.749374595E12, 5.8186528E7], [1.749374603E12, 2.100577E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.749374578E12, 875425.0], [1.749374577E12, 1135250.0], [1.749374581E12, 1197000.0], [1.74937458E12, 1126700.0], [1.749374579E12, 1125750.0], [1.749374573E12, 805125.0], [1.749374572E12, 11400.0], [1.749374576E12, 1294375.0], [1.749374575E12, 1207925.0], [1.749374574E12, 1254475.0], [1.749374589E12, 1037400.0], [1.749374588E12, 1012700.0], [1.749374587E12, 1146175.0], [1.749374592E12, 1030750.0], [1.749374591E12, 1172300.0], [1.74937459E12, 1217900.0], [1.749374584E12, 1158050.0], [1.749374583E12, 984200.0], [1.749374582E12, 1029800.0], [1.749374586E12, 1132875.0], [1.749374585E12, 1123375.0], [1.7493746E12, 708700.0], [1.749374599E12, 944300.0], [1.749374598E12, 1014600.0], [1.749374602E12, 1351375.0], [1.749374601E12, 495425.0], [1.749374594E12, 1072550.0], [1.749374593E12, 1020775.0], [1.749374597E12, 934325.0], [1.749374596E12, 1223600.0], [1.749374595E12, 1057350.0], [1.749374603E12, 366700.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374603E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 47.75000000000001, "minX": 1.749374572E12, "maxY": 1336.743523316062, "series": [{"data": [[1.749374578E12, 571.6972770955683], [1.749374577E12, 288.8577405857748], [1.749374581E12, 398.86190476190524], [1.74937458E12, 441.06829679595296], [1.749374579E12, 507.4472573839665], [1.749374573E12, 193.66194690265482], [1.749374572E12, 47.75000000000001], [1.749374576E12, 414.19155963302705], [1.749374575E12, 367.8552890287065], [1.749374574E12, 396.43847027641016], [1.749374589E12, 465.0123626373631], [1.749374588E12, 423.39399624765406], [1.749374587E12, 392.65520099461224], [1.749374592E12, 388.6253456221196], [1.749374591E12, 338.20137763371145], [1.74937459E12, 450.08853354134203], [1.749374584E12, 423.58080393765437], [1.749374583E12, 459.82480694980654], [1.749374582E12, 433.2892066420668], [1.749374586E12, 457.7932914046129], [1.749374585E12, 418.01522198731504], [1.7493746E12, 507.01139410187653], [1.749374599E12, 545.960261569417], [1.749374598E12, 514.4784644194749], [1.749374602E12, 336.6212438853949], [1.749374601E12, 774.9079578139974], [1.749374594E12, 495.71877767936326], [1.749374593E12, 498.49697814969824], [1.749374597E12, 482.42857142857207], [1.749374596E12, 348.6809006211172], [1.749374595E12, 469.6253369272242], [1.749374603E12, 1336.743523316062]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374603E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 47.75000000000001, "minX": 1.749374572E12, "maxY": 1312.3419689119164, "series": [{"data": [[1.749374578E12, 548.8211425520562], [1.749374577E12, 276.798744769874], [1.749374581E12, 379.8428571428575], [1.74937458E12, 422.1041315345693], [1.749374579E12, 485.43122362869184], [1.749374573E12, 183.1498525073748], [1.749374572E12, 47.75000000000001], [1.749374576E12, 392.64697247706454], [1.749374575E12, 348.3594180102243], [1.749374574E12, 375.3392654297617], [1.749374589E12, 439.44597069597097], [1.749374588E12, 405.8564727954976], [1.749374587E12, 372.3108164111061], [1.749374592E12, 380.09493087557644], [1.749374591E12, 320.86021069692026], [1.74937459E12, 426.45709828393103], [1.749374584E12, 401.8314191960626], [1.749374583E12, 436.62306949806964], [1.749374582E12, 413.4764760147603], [1.749374586E12, 432.40880503144564], [1.749374585E12, 397.51120507399605], [1.7493746E12, 475.9316353887407], [1.749374599E12, 525.5140845070422], [1.749374598E12, 490.442883895131], [1.749374602E12, 323.69357092941993], [1.749374601E12, 737.2655800575268], [1.749374594E12, 477.11470327723725], [1.749374593E12, 481.43607624360715], [1.749374597E12, 467.76359938993363], [1.749374596E12, 332.70729813664616], [1.749374595E12, 444.020215633423], [1.749374603E12, 1312.3419689119164]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374603E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.749374572E12, "maxY": 21.125000000000007, "series": [{"data": [[1.749374578E12, 0.028296849973304863], [1.749374577E12, 0.0], [1.749374581E12, 0.0], [1.74937458E12, 0.0], [1.749374579E12, 4.219409282700446E-4], [1.749374573E12, 1.3168141592920353], [1.749374572E12, 21.125000000000007], [1.749374576E12, 0.0], [1.749374575E12, 0.0], [1.749374574E12, 0.06702006815600166], [1.749374589E12, 0.0], [1.749374588E12, 0.0], [1.749374587E12, 0.0], [1.749374592E12, 0.0], [1.749374591E12, 0.0], [1.74937459E12, 0.0], [1.749374584E12, 0.0], [1.749374583E12, 0.0], [1.749374582E12, 0.0], [1.749374586E12, 0.0], [1.749374585E12, 0.0], [1.7493746E12, 0.0], [1.749374599E12, 0.0], [1.749374598E12, 0.0], [1.749374602E12, 0.0], [1.749374601E12, 0.0], [1.749374594E12, 0.0], [1.749374593E12, 4.6490004649000615E-4], [1.749374597E12, 0.0], [1.749374596E12, 0.0], [1.749374595E12, 0.0], [1.749374603E12, 0.014248704663212437]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374603E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.749374572E12, "maxY": 2765.0, "series": [{"data": [[1.749374578E12, 1417.0], [1.749374577E12, 1048.0], [1.749374581E12, 1658.0], [1.74937458E12, 1853.0], [1.749374579E12, 1719.0], [1.749374573E12, 708.0], [1.749374572E12, 58.0], [1.749374576E12, 1185.0], [1.749374575E12, 1090.0], [1.749374574E12, 1702.0], [1.749374589E12, 1718.0], [1.749374588E12, 1639.0], [1.749374587E12, 1666.0], [1.749374592E12, 1420.0], [1.749374591E12, 758.0], [1.74937459E12, 1742.0], [1.749374584E12, 1477.0], [1.749374583E12, 1430.0], [1.749374582E12, 1535.0], [1.749374586E12, 1682.0], [1.749374585E12, 871.0], [1.7493746E12, 1197.0], [1.749374599E12, 2765.0], [1.749374598E12, 1769.0], [1.749374602E12, 2439.0], [1.749374601E12, 1909.0], [1.749374594E12, 2633.0], [1.749374593E12, 1641.0], [1.749374597E12, 1634.0], [1.749374596E12, 1665.0], [1.749374595E12, 1703.0], [1.749374603E12, 2184.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.749374578E12, 1225.0], [1.749374577E12, 612.0], [1.749374581E12, 479.0], [1.74937458E12, 555.0], [1.749374579E12, 681.8000000000002], [1.749374573E12, 414.0], [1.749374572E12, 57.5], [1.749374576E12, 624.8000000000002], [1.749374575E12, 621.0], [1.749374574E12, 580.0], [1.749374589E12, 582.0], [1.749374588E12, 573.4000000000001], [1.749374587E12, 508.0], [1.749374592E12, 1172.0], [1.749374591E12, 470.0], [1.74937459E12, 563.0], [1.749374584E12, 539.0999999999999], [1.749374583E12, 574.0], [1.749374582E12, 548.0], [1.749374586E12, 604.4000000000001], [1.749374585E12, 536.0], [1.7493746E12, 906.8000000000002], [1.749374599E12, 686.0], [1.749374598E12, 689.5999999999999], [1.749374602E12, 1526.2], [1.749374601E12, 1136.6000000000015], [1.749374594E12, 592.2000000000003], [1.749374593E12, 1301.0], [1.749374597E12, 1304.0], [1.749374596E12, 522.3000000000002], [1.749374595E12, 591.5999999999999], [1.749374603E12, 2131.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.749374578E12, 1342.12], [1.749374577E12, 866.2999999999997], [1.749374581E12, 709.79], [1.74937458E12, 1385.54], [1.749374579E12, 1524.4499999999998], [1.749374573E12, 568.04], [1.749374572E12, 58.0], [1.749374576E12, 936.7399999999998], [1.749374575E12, 869.56], [1.749374574E12, 836.0], [1.749374589E12, 1517.15], [1.749374588E12, 1405.3500000000004], [1.749374587E12, 746.5800000000004], [1.749374592E12, 1298.29], [1.749374591E12, 677.31], [1.74937459E12, 1292.0499999999997], [1.749374584E12, 1328.4400000000005], [1.749374583E12, 798.27], [1.749374582E12, 1285.2399999999998], [1.749374586E12, 1427.1399999999999], [1.749374585E12, 738.0], [1.7493746E12, 1151.48], [1.749374599E12, 2511.22], [1.749374598E12, 1579.2600000000002], [1.749374602E12, 1721.62], [1.749374601E12, 1692.44], [1.749374594E12, 2470.329999999998], [1.749374593E12, 1509.5], [1.749374597E12, 1481.5999999999997], [1.749374596E12, 988.0], [1.749374595E12, 1344.73], [1.749374603E12, 2166.4]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.749374578E12, 1280.0], [1.749374577E12, 684.5], [1.749374581E12, 578.8499999999995], [1.74937458E12, 643.3499999999999], [1.749374579E12, 1372.0], [1.749374573E12, 460.0], [1.749374572E12, 58.0], [1.749374576E12, 708.6999999999998], [1.749374575E12, 660.7999999999997], [1.749374574E12, 637.8000000000002], [1.749374589E12, 763.25], [1.749374588E12, 1284.0], [1.749374587E12, 594.2999999999997], [1.749374592E12, 1200.0], [1.749374591E12, 540.3999999999978], [1.74937459E12, 658.0], [1.749374584E12, 646.0999999999995], [1.749374583E12, 660.6999999999998], [1.749374582E12, 628.6499999999992], [1.749374586E12, 719.6999999999998], [1.749374585E12, 612.6999999999998], [1.7493746E12, 933.0], [1.749374599E12, 827.0499999999995], [1.749374598E12, 1432.0], [1.749374602E12, 1608.7499999999998], [1.749374601E12, 1386.9999999999995], [1.749374594E12, 1417.0], [1.749374593E12, 1375.0], [1.749374597E12, 1371.0], [1.749374596E12, 587.0], [1.749374595E12, 687.6500000000001], [1.749374603E12, 2139.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.749374578E12, 1.0], [1.749374577E12, 3.0], [1.749374581E12, 211.0], [1.74937458E12, 217.0], [1.749374579E12, 206.0], [1.749374573E12, 6.0], [1.749374572E12, 19.0], [1.749374576E12, 87.0], [1.749374575E12, 49.0], [1.749374574E12, 38.0], [1.749374589E12, 238.0], [1.749374588E12, 187.0], [1.749374587E12, 4.0], [1.749374592E12, 62.0], [1.749374591E12, 20.0], [1.74937459E12, 219.0], [1.749374584E12, 6.0], [1.749374583E12, 235.0], [1.749374582E12, 209.0], [1.749374586E12, 209.0], [1.749374585E12, 223.0], [1.7493746E12, 7.0], [1.749374599E12, 202.0], [1.749374598E12, 185.0], [1.749374602E12, 11.0], [1.749374601E12, 229.0], [1.749374594E12, 195.0], [1.749374593E12, 182.0], [1.749374597E12, 91.0], [1.749374596E12, 14.0], [1.749374595E12, 228.0], [1.749374603E12, 424.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.749374578E12, 241.0], [1.749374577E12, 200.0], [1.749374581E12, 387.0], [1.74937458E12, 419.0], [1.749374579E12, 416.0], [1.749374573E12, 158.0], [1.749374572E12, 49.5], [1.749374576E12, 389.0], [1.749374575E12, 319.0], [1.749374574E12, 390.0], [1.749374589E12, 409.0], [1.749374588E12, 350.0], [1.749374587E12, 372.0], [1.749374592E12, 189.0], [1.749374591E12, 339.0], [1.74937459E12, 439.0], [1.749374584E12, 395.0], [1.749374583E12, 449.0], [1.749374582E12, 408.0], [1.749374586E12, 414.0], [1.749374585E12, 404.0], [1.7493746E12, 468.0], [1.749374599E12, 493.0], [1.749374598E12, 429.0], [1.749374602E12, 1263.0], [1.749374601E12, 698.0], [1.749374594E12, 389.5], [1.749374593E12, 354.0], [1.749374597E12, 305.0], [1.749374596E12, 327.0], [1.749374595E12, 446.0], [1.749374603E12, 1559.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374603E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 24.0, "maxY": 2071.0, "series": [{"data": [[772.0, 1559.0], [1043.0, 698.0], [1492.0, 468.0], [1695.0, 158.0], [1873.0, 241.0], [1967.0, 305.0], [1988.0, 493.0], [2168.0, 408.0], [2072.0, 449.0], [2132.0, 350.0], [2170.0, 189.0], [2151.0, 354.0], [2136.0, 429.0], [2184.0, 409.0], [2258.0, 389.5], [2226.0, 446.0], [2390.0, 200.0], [2370.0, 416.0], [2372.0, 419.0], [2365.0, 404.0], [2385.0, 414.0], [2413.0, 372.0], [2543.0, 319.0], [2520.0, 387.0], [2438.0, 395.0], [2468.0, 339.0], [2641.0, 390.0], [2564.0, 439.0], [2576.0, 327.0], [2725.0, 389.0], [2862.0, 1263.0], [24.0, 49.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2151.0, 1998.0], [1043.0, 626.0], [2390.0, 606.0], [2862.0, 2.0], [1492.0, 217.0], [772.0, 2071.0], [1873.0, 1634.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2862.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 24.0, "maxY": 2071.0, "series": [{"data": [[772.0, 1485.0], [1043.0, 673.0], [1492.0, 449.0], [1695.0, 149.0], [1873.0, 225.0], [1967.0, 289.0], [1988.0, 478.5], [2168.0, 399.0], [2072.0, 438.0], [2132.0, 335.0], [2170.0, 185.0], [2151.0, 343.0], [2136.0, 420.0], [2184.0, 395.0], [2258.0, 378.0], [2226.0, 428.5], [2390.0, 196.0], [2370.0, 407.0], [2372.0, 411.0], [2365.0, 394.0], [2385.0, 399.0], [2413.0, 362.0], [2543.0, 297.0], [2520.0, 375.5], [2438.0, 386.0], [2468.0, 327.5], [2641.0, 372.0], [2564.0, 425.0], [2576.0, 314.0], [2725.0, 378.0], [2862.0, 1248.0], [24.0, 49.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2151.0, 997.5], [1043.0, 626.0], [2390.0, 606.0], [2862.0, 2.0], [1492.0, 217.0], [772.0, 2071.0], [1873.0, 647.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2862.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 163.0, "minX": 1.749374572E12, "maxY": 2725.0, "series": [{"data": [[1.749374578E12, 1873.0], [1.749374577E12, 2390.0], [1.749374581E12, 2520.0], [1.74937458E12, 2372.0], [1.749374579E12, 2370.0], [1.749374573E12, 2556.0], [1.749374572E12, 163.0], [1.749374576E12, 2725.0], [1.749374575E12, 2543.0], [1.749374574E12, 2641.0], [1.749374589E12, 2184.0], [1.749374588E12, 2132.0], [1.749374587E12, 2413.0], [1.749374592E12, 2170.0], [1.749374591E12, 2468.0], [1.74937459E12, 2564.0], [1.749374584E12, 2438.0], [1.749374583E12, 2072.0], [1.749374582E12, 2168.0], [1.749374586E12, 2385.0], [1.749374585E12, 2365.0], [1.7493746E12, 1492.0], [1.749374599E12, 1988.0], [1.749374598E12, 2136.0], [1.749374602E12, 2634.0], [1.749374601E12, 1043.0], [1.749374594E12, 2258.0], [1.749374593E12, 2151.0], [1.749374597E12, 1967.0], [1.749374596E12, 2576.0], [1.749374595E12, 2226.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374602E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.749374572E12, "maxY": 2725.0, "series": [{"data": [[1.749374578E12, 1843.0], [1.749374577E12, 2389.0], [1.749374581E12, 2520.0], [1.74937458E12, 2372.0], [1.749374579E12, 2370.0], [1.749374573E12, 1695.0], [1.749374572E12, 24.0], [1.749374576E12, 2725.0], [1.749374575E12, 2543.0], [1.749374574E12, 2641.0], [1.749374589E12, 2184.0], [1.749374588E12, 2132.0], [1.749374587E12, 2413.0], [1.749374592E12, 2170.0], [1.749374591E12, 2468.0], [1.74937459E12, 2564.0], [1.749374584E12, 2438.0], [1.749374583E12, 2072.0], [1.749374582E12, 2168.0], [1.749374586E12, 2385.0], [1.749374585E12, 2365.0], [1.7493746E12, 1475.0], [1.749374599E12, 1988.0], [1.749374598E12, 2136.0], [1.749374602E12, 768.0], [1.749374601E12, 1027.0], [1.749374594E12, 2258.0], [1.749374593E12, 2149.0], [1.749374597E12, 1967.0], [1.749374596E12, 2576.0], [1.749374595E12, 2226.0], [1.749374603E12, 759.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7493746E12, 17.0], [1.749374577E12, 1.0], [1.749374601E12, 16.0]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.749374602E12, 2011.0], [1.749374603E12, 12.0]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.749374602E12, 66.0], [1.749374603E12, 1.0]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.749374578E12, 30.0], [1.749374602E12, 17.0], [1.749374593E12, 2.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374603E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.749374572E12, "maxY": 2725.0, "series": [{"data": [[1.749374578E12, 1843.0], [1.749374577E12, 2389.0], [1.749374581E12, 2520.0], [1.74937458E12, 2372.0], [1.749374579E12, 2370.0], [1.749374573E12, 1695.0], [1.749374572E12, 24.0], [1.749374576E12, 2725.0], [1.749374575E12, 2543.0], [1.749374574E12, 2641.0], [1.749374589E12, 2184.0], [1.749374588E12, 2132.0], [1.749374587E12, 2413.0], [1.749374592E12, 2170.0], [1.749374591E12, 2468.0], [1.74937459E12, 2564.0], [1.749374584E12, 2438.0], [1.749374583E12, 2072.0], [1.749374582E12, 2168.0], [1.749374586E12, 2385.0], [1.749374585E12, 2365.0], [1.7493746E12, 1475.0], [1.749374599E12, 1988.0], [1.749374598E12, 2136.0], [1.749374602E12, 768.0], [1.749374601E12, 1027.0], [1.749374594E12, 2258.0], [1.749374593E12, 2149.0], [1.749374597E12, 1967.0], [1.749374596E12, 2576.0], [1.749374595E12, 2226.0], [1.749374603E12, 759.0]], "isOverall": false, "label": "/user/search-success", "isController": false}, {"data": [[1.7493746E12, 17.0], [1.749374578E12, 30.0], [1.749374577E12, 1.0], [1.749374602E12, 2094.0], [1.749374601E12, 16.0], [1.749374593E12, 2.0], [1.749374603E12, 13.0]], "isOverall": false, "label": "/user/search-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374603E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.749374572E12, "maxY": 2725.0, "series": [{"data": [[1.749374578E12, 1843.0], [1.749374577E12, 2389.0], [1.749374581E12, 2520.0], [1.74937458E12, 2372.0], [1.749374579E12, 2370.0], [1.749374573E12, 1695.0], [1.749374572E12, 24.0], [1.749374576E12, 2725.0], [1.749374575E12, 2543.0], [1.749374574E12, 2641.0], [1.749374589E12, 2184.0], [1.749374588E12, 2132.0], [1.749374587E12, 2413.0], [1.749374592E12, 2170.0], [1.749374591E12, 2468.0], [1.74937459E12, 2564.0], [1.749374584E12, 2438.0], [1.749374583E12, 2072.0], [1.749374582E12, 2168.0], [1.749374586E12, 2385.0], [1.749374585E12, 2365.0], [1.7493746E12, 1475.0], [1.749374599E12, 1988.0], [1.749374598E12, 2136.0], [1.749374602E12, 768.0], [1.749374601E12, 1027.0], [1.749374594E12, 2258.0], [1.749374593E12, 2149.0], [1.749374597E12, 1967.0], [1.749374596E12, 2576.0], [1.749374595E12, 2226.0], [1.749374603E12, 759.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7493746E12, 17.0], [1.749374578E12, 30.0], [1.749374577E12, 1.0], [1.749374602E12, 2094.0], [1.749374601E12, 16.0], [1.749374593E12, 2.0], [1.749374603E12, 13.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374603E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

