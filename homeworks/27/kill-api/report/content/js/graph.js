/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 60026.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 3.0], [2.6, 3.0], [2.7, 4.0], [2.8, 10.0], [2.9, 15.0], [3.0, 24.0], [3.1, 32.0], [3.2, 39.0], [3.3, 44.0], [3.4, 49.0], [3.5, 55.0], [3.6, 59.0], [3.7, 63.0], [3.8, 67.0], [3.9, 72.0], [4.0, 76.0], [4.1, 79.0], [4.2, 83.0], [4.3, 85.0], [4.4, 87.0], [4.5, 90.0], [4.6, 91.0], [4.7, 94.0], [4.8, 96.0], [4.9, 97.0], [5.0, 100.0], [5.1, 102.0], [5.2, 104.0], [5.3, 105.0], [5.4, 107.0], [5.5, 108.0], [5.6, 110.0], [5.7, 111.0], [5.8, 112.0], [5.9, 114.0], [6.0, 115.0], [6.1, 116.0], [6.2, 117.0], [6.3, 118.0], [6.4, 119.0], [6.5, 120.0], [6.6, 121.0], [6.7, 122.0], [6.8, 122.0], [6.9, 123.0], [7.0, 124.0], [7.1, 125.0], [7.2, 126.0], [7.3, 127.0], [7.4, 127.0], [7.5, 128.0], [7.6, 128.0], [7.7, 129.0], [7.8, 130.0], [7.9, 130.0], [8.0, 131.0], [8.1, 131.0], [8.2, 132.0], [8.3, 132.0], [8.4, 133.0], [8.5, 133.0], [8.6, 134.0], [8.7, 134.0], [8.8, 135.0], [8.9, 135.0], [9.0, 136.0], [9.1, 136.0], [9.2, 136.0], [9.3, 137.0], [9.4, 137.0], [9.5, 138.0], [9.6, 138.0], [9.7, 138.0], [9.8, 139.0], [9.9, 139.0], [10.0, 140.0], [10.1, 140.0], [10.2, 140.0], [10.3, 141.0], [10.4, 141.0], [10.5, 142.0], [10.6, 142.0], [10.7, 143.0], [10.8, 143.0], [10.9, 144.0], [11.0, 144.0], [11.1, 145.0], [11.2, 145.0], [11.3, 146.0], [11.4, 146.0], [11.5, 147.0], [11.6, 147.0], [11.7, 148.0], [11.8, 148.0], [11.9, 149.0], [12.0, 149.0], [12.1, 150.0], [12.2, 150.0], [12.3, 150.0], [12.4, 151.0], [12.5, 151.0], [12.6, 152.0], [12.7, 152.0], [12.8, 153.0], [12.9, 153.0], [13.0, 154.0], [13.1, 154.0], [13.2, 155.0], [13.3, 155.0], [13.4, 156.0], [13.5, 156.0], [13.6, 156.0], [13.7, 157.0], [13.8, 157.0], [13.9, 158.0], [14.0, 158.0], [14.1, 159.0], [14.2, 159.0], [14.3, 160.0], [14.4, 160.0], [14.5, 160.0], [14.6, 161.0], [14.7, 161.0], [14.8, 162.0], [14.9, 162.0], [15.0, 162.0], [15.1, 163.0], [15.2, 163.0], [15.3, 163.0], [15.4, 164.0], [15.5, 164.0], [15.6, 165.0], [15.7, 165.0], [15.8, 165.0], [15.9, 166.0], [16.0, 166.0], [16.1, 166.0], [16.2, 167.0], [16.3, 167.0], [16.4, 168.0], [16.5, 168.0], [16.6, 168.0], [16.7, 169.0], [16.8, 169.0], [16.9, 169.0], [17.0, 170.0], [17.1, 170.0], [17.2, 170.0], [17.3, 171.0], [17.4, 171.0], [17.5, 171.0], [17.6, 172.0], [17.7, 172.0], [17.8, 172.0], [17.9, 173.0], [18.0, 173.0], [18.1, 173.0], [18.2, 174.0], [18.3, 174.0], [18.4, 174.0], [18.5, 175.0], [18.6, 175.0], [18.7, 175.0], [18.8, 175.0], [18.9, 176.0], [19.0, 176.0], [19.1, 176.0], [19.2, 177.0], [19.3, 177.0], [19.4, 177.0], [19.5, 178.0], [19.6, 178.0], [19.7, 178.0], [19.8, 179.0], [19.9, 179.0], [20.0, 179.0], [20.1, 179.0], [20.2, 180.0], [20.3, 180.0], [20.4, 180.0], [20.5, 181.0], [20.6, 181.0], [20.7, 181.0], [20.8, 182.0], [20.9, 182.0], [21.0, 182.0], [21.1, 182.0], [21.2, 183.0], [21.3, 183.0], [21.4, 183.0], [21.5, 183.0], [21.6, 184.0], [21.7, 184.0], [21.8, 184.0], [21.9, 185.0], [22.0, 185.0], [22.1, 185.0], [22.2, 185.0], [22.3, 186.0], [22.4, 186.0], [22.5, 186.0], [22.6, 186.0], [22.7, 187.0], [22.8, 187.0], [22.9, 187.0], [23.0, 188.0], [23.1, 188.0], [23.2, 188.0], [23.3, 188.0], [23.4, 189.0], [23.5, 189.0], [23.6, 189.0], [23.7, 190.0], [23.8, 190.0], [23.9, 190.0], [24.0, 191.0], [24.1, 191.0], [24.2, 191.0], [24.3, 192.0], [24.4, 192.0], [24.5, 192.0], [24.6, 193.0], [24.7, 193.0], [24.8, 193.0], [24.9, 194.0], [25.0, 194.0], [25.1, 194.0], [25.2, 195.0], [25.3, 195.0], [25.4, 195.0], [25.5, 196.0], [25.6, 196.0], [25.7, 196.0], [25.8, 197.0], [25.9, 197.0], [26.0, 197.0], [26.1, 198.0], [26.2, 198.0], [26.3, 198.0], [26.4, 199.0], [26.5, 199.0], [26.6, 199.0], [26.7, 200.0], [26.8, 200.0], [26.9, 200.0], [27.0, 201.0], [27.1, 201.0], [27.2, 201.0], [27.3, 202.0], [27.4, 202.0], [27.5, 202.0], [27.6, 203.0], [27.7, 203.0], [27.8, 203.0], [27.9, 204.0], [28.0, 204.0], [28.1, 204.0], [28.2, 205.0], [28.3, 205.0], [28.4, 206.0], [28.5, 206.0], [28.6, 206.0], [28.7, 207.0], [28.8, 207.0], [28.9, 207.0], [29.0, 208.0], [29.1, 208.0], [29.2, 208.0], [29.3, 209.0], [29.4, 209.0], [29.5, 209.0], [29.6, 210.0], [29.7, 210.0], [29.8, 210.0], [29.9, 211.0], [30.0, 211.0], [30.1, 211.0], [30.2, 212.0], [30.3, 212.0], [30.4, 213.0], [30.5, 213.0], [30.6, 213.0], [30.7, 214.0], [30.8, 214.0], [30.9, 214.0], [31.0, 215.0], [31.1, 215.0], [31.2, 215.0], [31.3, 216.0], [31.4, 216.0], [31.5, 217.0], [31.6, 217.0], [31.7, 217.0], [31.8, 218.0], [31.9, 218.0], [32.0, 218.0], [32.1, 219.0], [32.2, 219.0], [32.3, 220.0], [32.4, 220.0], [32.5, 220.0], [32.6, 221.0], [32.7, 221.0], [32.8, 222.0], [32.9, 222.0], [33.0, 222.0], [33.1, 223.0], [33.2, 223.0], [33.3, 223.0], [33.4, 224.0], [33.5, 224.0], [33.6, 225.0], [33.7, 225.0], [33.8, 225.0], [33.9, 226.0], [34.0, 226.0], [34.1, 226.0], [34.2, 227.0], [34.3, 227.0], [34.4, 228.0], [34.5, 228.0], [34.6, 228.0], [34.7, 228.0], [34.8, 229.0], [34.9, 229.0], [35.0, 229.0], [35.1, 230.0], [35.2, 230.0], [35.3, 230.0], [35.4, 231.0], [35.5, 231.0], [35.6, 231.0], [35.7, 232.0], [35.8, 232.0], [35.9, 232.0], [36.0, 233.0], [36.1, 233.0], [36.2, 233.0], [36.3, 234.0], [36.4, 234.0], [36.5, 234.0], [36.6, 235.0], [36.7, 235.0], [36.8, 235.0], [36.9, 236.0], [37.0, 236.0], [37.1, 236.0], [37.2, 237.0], [37.3, 237.0], [37.4, 237.0], [37.5, 238.0], [37.6, 238.0], [37.7, 238.0], [37.8, 238.0], [37.9, 239.0], [38.0, 239.0], [38.1, 239.0], [38.2, 240.0], [38.3, 240.0], [38.4, 240.0], [38.5, 241.0], [38.6, 241.0], [38.7, 241.0], [38.8, 242.0], [38.9, 242.0], [39.0, 242.0], [39.1, 243.0], [39.2, 243.0], [39.3, 243.0], [39.4, 244.0], [39.5, 244.0], [39.6, 244.0], [39.7, 245.0], [39.8, 245.0], [39.9, 245.0], [40.0, 246.0], [40.1, 246.0], [40.2, 246.0], [40.3, 247.0], [40.4, 247.0], [40.5, 247.0], [40.6, 248.0], [40.7, 248.0], [40.8, 248.0], [40.9, 249.0], [41.0, 249.0], [41.1, 249.0], [41.2, 250.0], [41.3, 250.0], [41.4, 250.0], [41.5, 251.0], [41.6, 251.0], [41.7, 251.0], [41.8, 252.0], [41.9, 252.0], [42.0, 252.0], [42.1, 253.0], [42.2, 253.0], [42.3, 253.0], [42.4, 254.0], [42.5, 254.0], [42.6, 254.0], [42.7, 254.0], [42.8, 255.0], [42.9, 255.0], [43.0, 255.0], [43.1, 256.0], [43.2, 256.0], [43.3, 256.0], [43.4, 256.0], [43.5, 257.0], [43.6, 257.0], [43.7, 257.0], [43.8, 258.0], [43.9, 258.0], [44.0, 258.0], [44.1, 259.0], [44.2, 259.0], [44.3, 259.0], [44.4, 259.0], [44.5, 260.0], [44.6, 260.0], [44.7, 260.0], [44.8, 261.0], [44.9, 261.0], [45.0, 261.0], [45.1, 262.0], [45.2, 262.0], [45.3, 262.0], [45.4, 263.0], [45.5, 263.0], [45.6, 263.0], [45.7, 263.0], [45.8, 264.0], [45.9, 264.0], [46.0, 264.0], [46.1, 265.0], [46.2, 265.0], [46.3, 265.0], [46.4, 266.0], [46.5, 266.0], [46.6, 266.0], [46.7, 266.0], [46.8, 267.0], [46.9, 267.0], [47.0, 267.0], [47.1, 268.0], [47.2, 268.0], [47.3, 268.0], [47.4, 269.0], [47.5, 269.0], [47.6, 269.0], [47.7, 269.0], [47.8, 270.0], [47.9, 270.0], [48.0, 270.0], [48.1, 271.0], [48.2, 271.0], [48.3, 271.0], [48.4, 272.0], [48.5, 272.0], [48.6, 272.0], [48.7, 273.0], [48.8, 273.0], [48.9, 273.0], [49.0, 273.0], [49.1, 274.0], [49.2, 274.0], [49.3, 274.0], [49.4, 275.0], [49.5, 275.0], [49.6, 275.0], [49.7, 276.0], [49.8, 276.0], [49.9, 276.0], [50.0, 277.0], [50.1, 277.0], [50.2, 277.0], [50.3, 278.0], [50.4, 278.0], [50.5, 278.0], [50.6, 279.0], [50.7, 279.0], [50.8, 279.0], [50.9, 280.0], [51.0, 280.0], [51.1, 280.0], [51.2, 281.0], [51.3, 281.0], [51.4, 281.0], [51.5, 282.0], [51.6, 282.0], [51.7, 282.0], [51.8, 282.0], [51.9, 283.0], [52.0, 283.0], [52.1, 283.0], [52.2, 284.0], [52.3, 284.0], [52.4, 284.0], [52.5, 285.0], [52.6, 285.0], [52.7, 286.0], [52.8, 286.0], [52.9, 286.0], [53.0, 287.0], [53.1, 287.0], [53.2, 287.0], [53.3, 287.0], [53.4, 288.0], [53.5, 288.0], [53.6, 289.0], [53.7, 289.0], [53.8, 289.0], [53.9, 290.0], [54.0, 290.0], [54.1, 290.0], [54.2, 291.0], [54.3, 291.0], [54.4, 291.0], [54.5, 292.0], [54.6, 292.0], [54.7, 292.0], [54.8, 293.0], [54.9, 293.0], [55.0, 293.0], [55.1, 294.0], [55.2, 294.0], [55.3, 294.0], [55.4, 295.0], [55.5, 295.0], [55.6, 295.0], [55.7, 296.0], [55.8, 296.0], [55.9, 296.0], [56.0, 297.0], [56.1, 297.0], [56.2, 297.0], [56.3, 298.0], [56.4, 298.0], [56.5, 298.0], [56.6, 299.0], [56.7, 299.0], [56.8, 299.0], [56.9, 300.0], [57.0, 300.0], [57.1, 300.0], [57.2, 301.0], [57.3, 301.0], [57.4, 301.0], [57.5, 302.0], [57.6, 302.0], [57.7, 302.0], [57.8, 303.0], [57.9, 303.0], [58.0, 303.0], [58.1, 304.0], [58.2, 304.0], [58.3, 304.0], [58.4, 305.0], [58.5, 305.0], [58.6, 305.0], [58.7, 306.0], [58.8, 306.0], [58.9, 306.0], [59.0, 307.0], [59.1, 307.0], [59.2, 307.0], [59.3, 308.0], [59.4, 308.0], [59.5, 308.0], [59.6, 309.0], [59.7, 309.0], [59.8, 309.0], [59.9, 309.0], [60.0, 310.0], [60.1, 310.0], [60.2, 310.0], [60.3, 311.0], [60.4, 311.0], [60.5, 311.0], [60.6, 312.0], [60.7, 312.0], [60.8, 312.0], [60.9, 313.0], [61.0, 313.0], [61.1, 314.0], [61.2, 314.0], [61.3, 314.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 316.0], [61.8, 316.0], [61.9, 316.0], [62.0, 317.0], [62.1, 317.0], [62.2, 317.0], [62.3, 318.0], [62.4, 318.0], [62.5, 318.0], [62.6, 319.0], [62.7, 319.0], [62.8, 319.0], [62.9, 320.0], [63.0, 320.0], [63.1, 320.0], [63.2, 321.0], [63.3, 321.0], [63.4, 322.0], [63.5, 322.0], [63.6, 322.0], [63.7, 323.0], [63.8, 323.0], [63.9, 323.0], [64.0, 324.0], [64.1, 324.0], [64.2, 324.0], [64.3, 325.0], [64.4, 325.0], [64.5, 325.0], [64.6, 326.0], [64.7, 326.0], [64.8, 327.0], [64.9, 327.0], [65.0, 327.0], [65.1, 328.0], [65.2, 328.0], [65.3, 328.0], [65.4, 329.0], [65.5, 329.0], [65.6, 330.0], [65.7, 330.0], [65.8, 330.0], [65.9, 331.0], [66.0, 331.0], [66.1, 331.0], [66.2, 332.0], [66.3, 332.0], [66.4, 333.0], [66.5, 333.0], [66.6, 334.0], [66.7, 334.0], [66.8, 334.0], [66.9, 335.0], [67.0, 335.0], [67.1, 335.0], [67.2, 336.0], [67.3, 336.0], [67.4, 337.0], [67.5, 337.0], [67.6, 338.0], [67.7, 338.0], [67.8, 339.0], [67.9, 339.0], [68.0, 339.0], [68.1, 340.0], [68.2, 340.0], [68.3, 341.0], [68.4, 341.0], [68.5, 341.0], [68.6, 342.0], [68.7, 342.0], [68.8, 342.0], [68.9, 343.0], [69.0, 343.0], [69.1, 344.0], [69.2, 344.0], [69.3, 345.0], [69.4, 345.0], [69.5, 345.0], [69.6, 346.0], [69.7, 346.0], [69.8, 347.0], [69.9, 347.0], [70.0, 347.0], [70.1, 348.0], [70.2, 348.0], [70.3, 349.0], [70.4, 349.0], [70.5, 350.0], [70.6, 350.0], [70.7, 350.0], [70.8, 351.0], [70.9, 351.0], [71.0, 352.0], [71.1, 352.0], [71.2, 353.0], [71.3, 353.0], [71.4, 353.0], [71.5, 354.0], [71.6, 354.0], [71.7, 355.0], [71.8, 355.0], [71.9, 356.0], [72.0, 356.0], [72.1, 356.0], [72.2, 357.0], [72.3, 357.0], [72.4, 358.0], [72.5, 358.0], [72.6, 359.0], [72.7, 359.0], [72.8, 360.0], [72.9, 360.0], [73.0, 361.0], [73.1, 361.0], [73.2, 361.0], [73.3, 362.0], [73.4, 362.0], [73.5, 363.0], [73.6, 363.0], [73.7, 364.0], [73.8, 364.0], [73.9, 364.0], [74.0, 365.0], [74.1, 365.0], [74.2, 366.0], [74.3, 366.0], [74.4, 367.0], [74.5, 367.0], [74.6, 368.0], [74.7, 368.0], [74.8, 368.0], [74.9, 369.0], [75.0, 369.0], [75.1, 370.0], [75.2, 370.0], [75.3, 371.0], [75.4, 371.0], [75.5, 372.0], [75.6, 372.0], [75.7, 372.0], [75.8, 373.0], [75.9, 373.0], [76.0, 374.0], [76.1, 374.0], [76.2, 375.0], [76.3, 375.0], [76.4, 376.0], [76.5, 376.0], [76.6, 377.0], [76.7, 377.0], [76.8, 377.0], [76.9, 378.0], [77.0, 378.0], [77.1, 379.0], [77.2, 379.0], [77.3, 379.0], [77.4, 380.0], [77.5, 380.0], [77.6, 381.0], [77.7, 381.0], [77.8, 382.0], [77.9, 382.0], [78.0, 383.0], [78.1, 383.0], [78.2, 384.0], [78.3, 384.0], [78.4, 385.0], [78.5, 385.0], [78.6, 386.0], [78.7, 386.0], [78.8, 387.0], [78.9, 387.0], [79.0, 388.0], [79.1, 388.0], [79.2, 389.0], [79.3, 389.0], [79.4, 390.0], [79.5, 391.0], [79.6, 391.0], [79.7, 391.0], [79.8, 392.0], [79.9, 392.0], [80.0, 393.0], [80.1, 394.0], [80.2, 394.0], [80.3, 395.0], [80.4, 395.0], [80.5, 396.0], [80.6, 397.0], [80.7, 397.0], [80.8, 398.0], [80.9, 398.0], [81.0, 399.0], [81.1, 400.0], [81.2, 400.0], [81.3, 400.0], [81.4, 401.0], [81.5, 402.0], [81.6, 402.0], [81.7, 403.0], [81.8, 404.0], [81.9, 404.0], [82.0, 405.0], [82.1, 406.0], [82.2, 406.0], [82.3, 407.0], [82.4, 407.0], [82.5, 408.0], [82.6, 409.0], [82.7, 409.0], [82.8, 410.0], [82.9, 411.0], [83.0, 411.0], [83.1, 412.0], [83.2, 412.0], [83.3, 413.0], [83.4, 413.0], [83.5, 414.0], [83.6, 415.0], [83.7, 415.0], [83.8, 416.0], [83.9, 417.0], [84.0, 417.0], [84.1, 418.0], [84.2, 419.0], [84.3, 419.0], [84.4, 420.0], [84.5, 421.0], [84.6, 421.0], [84.7, 422.0], [84.8, 423.0], [84.9, 423.0], [85.0, 424.0], [85.1, 425.0], [85.2, 425.0], [85.3, 426.0], [85.4, 427.0], [85.5, 428.0], [85.6, 429.0], [85.7, 429.0], [85.8, 430.0], [85.9, 431.0], [86.0, 432.0], [86.1, 432.0], [86.2, 433.0], [86.3, 434.0], [86.4, 435.0], [86.5, 436.0], [86.6, 437.0], [86.7, 437.0], [86.8, 438.0], [86.9, 439.0], [87.0, 440.0], [87.1, 441.0], [87.2, 442.0], [87.3, 443.0], [87.4, 444.0], [87.5, 445.0], [87.6, 446.0], [87.7, 446.0], [87.8, 447.0], [87.9, 449.0], [88.0, 450.0], [88.1, 451.0], [88.2, 452.0], [88.3, 453.0], [88.4, 454.0], [88.5, 455.0], [88.6, 456.0], [88.7, 457.0], [88.8, 458.0], [88.9, 459.0], [89.0, 460.0], [89.1, 461.0], [89.2, 463.0], [89.3, 464.0], [89.4, 465.0], [89.5, 466.0], [89.6, 467.0], [89.7, 469.0], [89.8, 470.0], [89.9, 471.0], [90.0, 472.0], [90.1, 474.0], [90.2, 475.0], [90.3, 476.0], [90.4, 477.0], [90.5, 479.0], [90.6, 480.0], [90.7, 482.0], [90.8, 483.0], [90.9, 484.0], [91.0, 485.0], [91.1, 486.0], [91.2, 488.0], [91.3, 489.0], [91.4, 491.0], [91.5, 493.0], [91.6, 494.0], [91.7, 496.0], [91.8, 497.0], [91.9, 499.0], [92.0, 501.0], [92.1, 503.0], [92.2, 504.0], [92.3, 506.0], [92.4, 508.0], [92.5, 510.0], [92.6, 512.0], [92.7, 514.0], [92.8, 516.0], [92.9, 518.0], [93.0, 520.0], [93.1, 523.0], [93.2, 526.0], [93.3, 529.0], [93.4, 531.0], [93.5, 534.0], [93.6, 537.0], [93.7, 541.0], [93.8, 544.0], [93.9, 547.0], [94.0, 550.0], [94.1, 554.0], [94.2, 557.0], [94.3, 561.0], [94.4, 565.0], [94.5, 569.0], [94.6, 572.0], [94.7, 575.0], [94.8, 579.0], [94.9, 583.0], [95.0, 586.0], [95.1, 590.0], [95.2, 593.0], [95.3, 596.0], [95.4, 601.0], [95.5, 605.0], [95.6, 609.0], [95.7, 612.0], [95.8, 616.0], [95.9, 620.0], [96.0, 624.0], [96.1, 628.0], [96.2, 632.0], [96.3, 636.0], [96.4, 642.0], [96.5, 646.0], [96.6, 651.0], [96.7, 656.0], [96.8, 661.0], [96.9, 666.0], [97.0, 672.0], [97.1, 678.0], [97.2, 684.0], [97.3, 690.0], [97.4, 698.0], [97.5, 705.0], [97.6, 714.0], [97.7, 725.0], [97.8, 738.0], [97.9, 751.0], [98.0, 762.0], [98.1, 775.0], [98.2, 793.0], [98.3, 814.0], [98.4, 845.0], [98.5, 889.0], [98.6, 928.0], [98.7, 956.0], [98.8, 984.0], [98.9, 1056.0], [99.0, 1364.0], [99.1, 1554.0], [99.2, 18642.0], [99.3, 34442.0], [99.4, 35408.0], [99.5, 35537.0], [99.6, 60001.0], [99.7, 60004.0], [99.8, 60007.0], [99.9, 60012.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 22795.0, "series": [{"data": [[0.0, 3773.0], [600.0, 1558.0], [700.0, 611.0], [800.0, 219.0], [900.0, 232.0], [1000.0, 69.0], [17400.0, 18.0], [17300.0, 9.0], [1100.0, 28.0], [18400.0, 1.0], [1200.0, 3.0], [18600.0, 26.0], [1300.0, 45.0], [1400.0, 40.0], [1500.0, 25.0], [100.0, 16362.0], [1600.0, 10.0], [1700.0, 6.0], [1900.0, 11.0], [2000.0, 2.0], [2100.0, 1.0], [34300.0, 46.0], [34600.0, 40.0], [34400.0, 23.0], [33600.0, 3.0], [34500.0, 20.0], [33300.0, 2.0], [35400.0, 56.0], [35500.0, 33.0], [35600.0, 45.0], [35300.0, 1.0], [200.0, 22795.0], [60000.0, 320.0], [59900.0, 1.0], [300.0, 18344.0], [400.0, 8183.0], [500.0, 2596.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 699.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 67294.0, "series": [{"data": [[0.0, 67294.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5320.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 699.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 2244.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.074074074074076, "minX": 1.749374671E12, "maxY": 1000.0, "series": [{"data": [[1.749374749E12, 138.96428571428575], [1.7493747E12, 1000.0], [1.749374745E12, 199.7857142857143], [1.749374673E12, 1000.0], [1.749374677E12, 1000.0], [1.749374675E12, 1000.0], [1.749374718E12, 564.2575757575758], [1.749374753E12, 78.0], [1.749374757E12, 14.074074074074076], [1.749374671E12, 190.672131147541], [1.749374755E12, 59.5], [1.749374684E12, 1000.0], [1.749374688E12, 1000.0], [1.749374729E12, 406.08333333333337], [1.749374686E12, 1000.0], [1.74937468E12, 1000.0], [1.749374678E12, 1000.0], [1.749374725E12, 455.1176470588236], [1.749374682E12, 1000.0], [1.749374696E12, 1000.0], [1.749374694E12, 1000.0], [1.749374741E12, 262.59999999999997], [1.749374698E12, 1000.0], [1.749374739E12, 307.44827586206895], [1.749374733E12, 365.6774193548387], [1.74937469E12, 1000.0], [1.749374692E12, 1000.0], [1.749374748E12, 155.0], [1.749374752E12, 104.64000000000001], [1.74937475E12, 120.875], [1.749374701E12, 972.9294167371082], [1.749374744E12, 221.875], [1.749374699E12, 1000.0], [1.749374742E12, 243.75], [1.749374746E12, 171.82142857142856], [1.749374674E12, 1000.0], [1.749374715E12, 621.875], [1.749374676E12, 1000.0], [1.749374672E12, 565.820396145611], [1.749374756E12, 41.714285714285715], [1.749374685E12, 1000.0], [1.749374683E12, 1000.0], [1.749374687E12, 1000.0], [1.749374679E12, 1000.0], [1.749374722E12, 505.8823529411765], [1.749374681E12, 1000.0], [1.749374695E12, 1000.0], [1.749374697E12, 1000.0], [1.74937474E12, 280.24000000000007], [1.749374689E12, 1000.0], [1.749374693E12, 1000.0], [1.749374736E12, 335.8214285714286], [1.749374691E12, 1000.0]], "isOverall": false, "label": "OTUS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374757E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.0, "maxY": 60023.75, "series": [{"data": [[2.0, 60001.0], [3.0, 60003.0], [4.0, 60001.0], [6.0, 60006.0], [7.0, 60010.0], [8.0, 60016.0], [9.0, 60009.0], [10.0, 60000.0], [11.0, 60007.0], [12.0, 60008.0], [13.0, 60006.0], [14.0, 60009.0], [15.0, 60003.0], [16.0, 60008.0], [17.0, 60003.0], [18.0, 60003.0], [19.0, 60005.0], [21.0, 60005.5], [22.0, 60004.0], [23.0, 60002.0], [24.0, 60001.0], [25.0, 59999.0], [26.0, 60001.0], [27.0, 60000.0], [28.0, 60003.0], [29.0, 60001.0], [30.0, 60001.0], [31.0, 60002.0], [33.0, 60001.0], [32.0, 60004.0], [34.0, 60011.0], [37.0, 60004.0], [36.0, 60005.0], [39.0, 60004.0], [38.0, 60003.0], [41.0, 60003.0], [43.0, 60004.0], [42.0, 60001.0], [45.0, 60004.0], [44.0, 60007.0], [47.0, 60005.5], [49.0, 60003.0], [51.0, 60005.0], [50.0, 60003.0], [53.0, 60002.0], [55.0, 60014.0], [54.0, 60003.0], [57.0, 60002.0], [56.0, 60002.0], [59.0, 60003.0], [58.0, 60002.0], [61.0, 60003.0], [60.0, 60002.0], [63.0, 60003.0], [62.0, 60003.0], [64.0, 60004.0], [71.0, 60010.0], [70.0, 60020.0], [69.0, 60019.0], [68.0, 60019.5], [75.0, 60005.0], [74.0, 60008.0], [73.0, 60008.5], [78.0, 60008.0], [77.0, 60010.0], [76.0, 60009.0], [83.0, 60007.0], [82.0, 60004.0], [81.0, 60006.0], [80.0, 60004.0], [87.0, 60006.0], [86.0, 60007.0], [85.0, 60003.0], [91.0, 60003.0], [90.0, 60003.0], [89.0, 60003.0], [88.0, 60003.0], [95.0, 60014.0], [94.0, 60017.0], [93.0, 60013.5], [97.0, 60007.0], [96.0, 60007.0], [103.0, 60004.0], [102.0, 60017.4], [107.0, 60007.0], [106.0, 60008.0], [105.0, 60004.0], [104.0, 60007.0], [110.0, 60002.0], [108.0, 60005.0], [115.0, 60006.0], [114.0, 60003.0], [113.0, 60004.5], [112.0, 60002.5], [116.0, 30012.0], [117.0, 39.333333333333336], [118.0, 60015.0], [120.0, 24027.0], [123.0, 30023.5], [122.0, 60004.0], [126.0, 45.75], [124.0, 60001.0], [131.0, 40.5], [134.0, 60010.0], [132.0, 60014.0], [130.0, 60009.0], [129.0, 60000.0], [128.0, 60023.75], [143.0, 60010.0], [142.0, 60013.0], [140.0, 60018.0], [139.0, 60014.5], [137.0, 60013.0], [136.0, 60016.0], [151.0, 60015.0], [150.0, 60012.0], [149.0, 60007.5], [147.0, 60009.0], [146.0, 60010.0], [145.0, 60007.5], [158.0, 60000.0], [157.0, 60006.0], [156.0, 60008.0], [155.0, 60006.0], [154.0, 60009.0], [153.0, 60017.0], [152.0, 60013.0], [163.0, 70.33333333333333], [164.0, 80.5], [166.0, 77.0], [167.0, 24055.4], [165.0, 60014.333333333336], [162.0, 60004.0], [161.0, 60002.0], [160.0, 60016.5], [168.0, 15065.75], [169.0, 15048.5], [170.0, 82.25], [171.0, 20038.666666666668], [172.0, 15071.75], [173.0, 30045.0], [175.0, 60008.5], [177.0, 30043.0], [183.0, 60004.0], [182.0, 60003.0], [181.0, 60003.0], [180.0, 60004.0], [179.0, 60009.0], [178.0, 60007.0], [176.0, 60010.0], [191.0, 30011.5], [190.0, 60004.0], [189.0, 60010.0], [188.0, 60011.0], [187.0, 60014.0], [186.0, 60015.0], [185.0, 60002.0], [193.0, 20035.333333333332], [196.0, 30058.0], [199.0, 60008.0], [198.0, 60020.5], [195.0, 60021.0], [192.0, 60014.0], [201.0, 123.0], [205.0, 30059.0], [207.0, 97.0], [206.0, 60012.0], [204.0, 60013.0], [203.0, 60011.5], [202.0, 60008.0], [200.0, 60014.0], [212.0, 45017.25], [213.0, 10098.500000000002], [214.0, 60012.0], [209.0, 60007.0], [208.0, 60010.5], [216.0, 130.0], [218.0, 30066.666666666668], [219.0, 12095.0], [220.0, 15103.0], [221.0, 12085.0], [222.0, 20096.666666666668], [223.0, 20082.0], [217.0, 60014.0], [224.0, 20099.666666666668], [225.0, 7614.25], [226.0, 121.16666666666666], [229.0, 30077.0], [230.0, 105.2], [231.0, 24069.4], [228.0, 60004.0], [227.0, 60005.5], [232.0, 15095.25], [233.0, 30083.0], [234.0, 30065.5], [235.0, 128.25], [236.0, 17233.428571428572], [238.0, 113.0], [237.0, 60010.0], [247.0, 15120.25], [246.0, 60003.0], [244.0, 60004.0], [243.0, 60008.0], [242.0, 60005.0], [241.0, 60013.0], [240.0, 60010.0], [248.0, 20101.0], [250.0, 150.0], [252.0, 30086.5], [255.0, 60005.0], [254.0, 60003.0], [253.0, 60000.0], [251.0, 60004.0], [249.0, 60004.0], [269.0, 30089.0], [256.0, 30090.5], [259.0, 30023.0], [258.0, 60001.0], [257.0, 60003.0], [268.0, 60000.0], [260.0, 30041.0], [261.0, 60007.0], [262.0, 15071.0], [263.0, 20056.333333333332], [264.0, 30052.5], [267.0, 60012.0], [266.0, 60014.0], [270.0, 57.0], [271.0, 60001.0], [284.0, 4007.7333333333336], [273.0, 30054.5], [274.0, 10044.833333333334], [276.0, 6680.777777777777], [277.0, 60003.0], [279.0, 20001.333333333332], [272.0, 60002.0], [278.0, 60002.0], [280.0, 20003.333333333332], [281.0, 4006.6666666666665], [282.0, 7513.125], [283.0, 60001.0], [285.0, 6001.500000000001], [286.0, 3.2], [287.0, 3.0], [291.0, 4004.333333333333], [293.0, 7509.375], [292.0, 60002.0], [294.0, 2729.181818181818], [295.0, 30003.0], [290.0, 60000.0], [288.0, 60001.333333333336], [297.0, 7.666666666666667], [298.0, 7065.058823529412], [300.0, 4288.428571428572], [301.0, 7503.25], [302.0, 12004.0], [303.0, 2.0], [296.0, 60002.0], [316.0, 3.6666666666666665], [305.0, 4.615384615384615], [304.0, 4007.3999999999996], [306.0, 30023.833333333332], [309.0, 4.92], [308.0, 60009.5], [310.0, 60011.5], [311.0, 7505.75], [312.0, 30009.0], [313.0, 6669.222222222223], [314.0, 15004.25], [315.0, 60004.0], [318.0, 12008.333333333332], [319.0, 6670.888888888889], [321.0, 30005.5], [320.0, 7502.125], [322.0, 6.642857142857142], [323.0, 7904.111111111111], [324.0, 2227.375], [325.0, 35547.0], [326.0, 8.222222222222221], [327.0, 8885.875], [328.0, 1.5714285714285714], [329.0, 35542.0], [335.0, 1778.25], [332.0, 4458.0625], [333.0, 35525.0], [334.0, 2221.5], [330.0, 2371.533333333333], [331.0, 27.333333333333332], [337.0, 11862.5], [336.0, 2.0], [338.0, 5923.166666666667], [339.0, 2735.3076923076924], [340.0, 1697.2380952380954], [341.0, 2742.3846153846152], [342.0, 3230.6363636363635], [343.0, 7.444444444444445], [344.0, 2221.46875], [350.0, 1635.4285714285716], [351.0, 1.2500000000000004], [348.0, 23.4], [349.0, 4271.48], [345.0, 5923.0], [347.0, 0.9285714285714285], [346.0, 35526.0], [355.0, 2.0909090909090913], [353.0, 0.6428571428571429], [352.0, 4905.785714285715], [354.0, 71.92307692307692], [356.0, 27327.0], [358.0, 33354.0], [357.0, 34319.0], [359.0, 124.5], [360.0, 11571.666666666668], [367.0, 108.0], [366.0, 34301.0], [364.0, 8738.5], [365.0, 182.71428571428572], [361.0, 11572.0], [362.0, 11569.666666666666], [363.0, 5047.142857142857], [370.0, 167.0], [368.0, 23287.333333333332], [369.0, 34322.0], [371.0, 22891.0], [380.0, 15317.444444444445], [381.0, 121.75], [382.0, 145.83333333333331], [383.0, 65.1111111111111], [372.0, 3955.777777777778], [373.0, 253.66666666666666], [374.0, 4716.133333333333], [375.0, 202.5], [376.0, 225.0], [377.0, 4200.941176470588], [378.0, 214.0], [379.0, 200.85714285714286], [385.0, 224.0], [384.0, 3249.3636363636365], [386.0, 8643.0], [387.0, 177.5], [389.0, 16062.818181818182], [388.0, 35012.5], [390.0, 7020.0], [391.0, 8694.5], [392.0, 21.88888888888889], [396.0, 11564.0], [397.0, 7109.6], [398.0, 2667.0769230769233], [399.0, 11829.666666666666], [393.0, 6939.6], [395.0, 34983.0], [407.0, 4118.294117647059], [401.0, 58.57142857142857], [400.0, 35493.0], [402.0, 34972.0], [412.0, 0.9999999999999998], [413.0, 0.736842105263158], [414.0, 2.95], [415.0, 5428.346153846154], [404.0, 12.75], [405.0, 20894.8], [406.0, 1.7857142857142854], [408.0, 0.7000000000000001], [409.0, 4315.0], [410.0, 1479.7083333333335], [411.0, 2958.4166666666665], [419.0, 18.315789473684212], [416.0, 0.8666666666666666], [417.0, 1.388888888888889], [418.0, 33.0], [420.0, 31.142857142857146], [421.0, 35123.666666666664], [422.0, 35487.0], [425.0, 20283.428571428572], [427.0, 35484.0], [426.0, 35482.0], [431.0, 11568.0], [430.0, 35665.0], [429.0, 34638.0], [428.0, 35487.666666666664], [433.0, 14094.6], [432.0, 26.375000000000004], [435.0, 1825.9473684210527], [434.0, 34629.0], [444.0, 6114.588235294117], [445.0, 1783.9999999999998], [447.0, 1.65], [446.0, 34639.0], [436.0, 2.8666666666666676], [437.0, 3797.1111111111113], [438.0, 1427.2399999999998], [439.0, 1650.4761904761906], [440.0, 1333.6153846153848], [442.0, 1.6842105263157894], [441.0, 34676.0], [443.0, 1.3666666666666665], [449.0, 1.2142857142857144], [448.0, 3059.391304347826], [450.0, 2424.862068965517], [451.0, 1050.8484848484848], [452.0, 0.8181818181818181], [453.0, 6390.818181818182], [454.0, 2183.1875], [455.0, 4456.875], [456.0, 23.272727272727273], [462.0, 17865.0], [460.0, 35141.0], [463.0, 65.0], [457.0, 14106.2], [458.0, 11598.666666666666], [465.0, 53.230769230769226], [464.0, 7642.444444444444], [466.0, 9910.857142857143], [467.0, 4.5], [469.0, 3.3333333333333335], [470.0, 3.25], [471.0, 1.208333333333334], [472.0, 0.5], [479.0, 15731.0], [477.0, 1426.7999999999997], [476.0, 34615.0], [478.0, 3961.5555555555557], [473.0, 1.0], [474.0, 14054.599999999999], [475.0, 2770.68], [481.0, 0.25], [480.0, 1.1818181818181817], [482.0, 1.0625], [483.0, 0.5999999999999999], [484.0, 8315.095238095239], [485.0, 34446.0], [486.0, 1.3333333333333333], [487.0, 2153.75], [488.0, 7655.666666666666], [494.0, 2460.785714285714], [495.0, 1.2222222222222225], [492.0, 5061.285714285715], [493.0, 3227.0], [489.0, 0.8999999999999999], [490.0, 5299.307692307692], [491.0, 2534.142857142857], [497.0, 4429.125], [496.0, 7088.4], [498.0, 3132.6363636363635], [499.0, 6909.8], [500.0, 8952.75], [501.0, 2494.142857142857], [502.0, 3017.833333333333], [503.0, 4508.625], [505.0, 5806.166666666667], [504.0, 35421.0], [510.0, 8611.25], [511.0, 2461.9285714285716], [508.0, 0.9090909090909091], [509.0, 4171.0], [506.0, 2305.866666666667], [507.0, 2530.4285714285716], [519.0, 8.0], [515.0, 1.0], [512.0, 1.0], [527.0, 11806.0], [526.0, 35455.0], [513.0, 2287.225806451613], [514.0, 8864.75], [516.0, 17219.25], [517.0, 1.846153846153846], [518.0, 5826.0], [528.0, 15188.714285714286], [541.0, 2973.166666666667], [540.0, 35662.0], [542.0, 5096.0], [538.0, 9325.0], [539.0, 13323.75], [536.0, 1.1111111111111112], [537.0, 2665.230769230769], [529.0, 2536.214285714286], [530.0, 6953.266666666666], [531.0, 4459.0], [532.0, 1244.1999999999998], [533.0, 0.9833333333333334], [535.0, 5094.857142857143], [534.0, 26645.0], [520.0, 8.0], [523.0, 35415.0], [521.0, 34944.0], [525.0, 9.0], [550.0, 6391.705882352941], [557.0, 2887.9999999999995], [547.0, 2745.3846153846152], [545.0, 2476.785714285714], [544.0, 34639.0], [558.0, 2.0833333333333335], [559.0, 23768.666666666668], [548.0, 17319.0], [551.0, 3242.909090909091], [568.0, 0.75], [569.0, 2331.25], [570.0, 4772.0], [573.0, 3958.5555555555557], [572.0, 35622.5], [574.0, 250.0], [575.0, 76.4], [560.0, 2474.857142857143], [562.0, 1.5], [563.0, 17983.5], [564.0, 1.846153846153846], [566.0, 7188.8], [567.0, 2.230769230769231], [552.0, 4664.25], [553.0, 1733.25], [555.0, 2972.833333333333], [554.0, 34635.0], [556.0, 35663.0], [582.0, 213.60000000000002], [577.0, 14141.555555555555], [576.0, 395.0], [590.0, 263.6363636363636], [591.0, 11189.6], [588.0, 17927.0], [589.0, 340.3], [586.0, 264.57142857142856], [587.0, 6250.166666666667], [578.0, 338.5], [579.0, 300.14285714285717], [580.0, 10221.222222222223], [583.0, 9048.25], [600.0, 292.6666666666667], [601.0, 10538.4], [602.0, 9118.75], [603.0, 3239.0], [604.0, 4591.625], [605.0, 178.0], [607.0, 3629.0666666666666], [592.0, 4002.8], [593.0, 305.6666666666667], [594.0, 12532.333333333334], [596.0, 9503.5], [598.0, 11745.0], [599.0, 2764.7142857142853], [584.0, 7307.0], [585.0, 11063.4], [611.0, 4438.25], [608.0, 363.6666666666667], [621.0, 17287.5], [622.0, 4455.0], [619.0, 169.8], [620.0, 8733.0], [609.0, 275.6875], [610.0, 8925.375], [612.0, 5860.333333333333], [613.0, 1732.6363636363635], [614.0, 17362.5], [615.0, 4621.75], [633.0, 17349.0], [630.0, 25878.0], [628.0, 17437.0], [627.0, 17437.0], [626.0, 34343.0], [625.0, 17441.0], [624.0, 25895.5], [632.0, 25893.0], [617.0, 282.0], [616.0, 17438.0], [618.0, 3064.916666666667], [669.0, 140.5], [662.0, 187.2], [663.0, 163.75], [666.0, 190.66666666666666], [667.0, 165.0], [668.0, 131.0], [670.0, 177.4], [671.0, 169.0], [661.0, 150.0], [659.0, 144.0], [658.0, 143.0], [657.0, 189.33333333333334], [665.0, 149.0], [664.0, 143.0], [646.0, 148.0], [645.0, 141.0], [644.0, 27677.8], [642.0, 17433.0], [654.0, 144.0], [652.0, 141.0], [651.0, 144.0], [650.0, 154.0], [648.0, 147.5], [698.0, 175.1818181818182], [672.0, 174.33333333333334], [673.0, 141.0], [675.0, 152.0], [674.0, 141.0], [678.0, 137.0], [676.0, 139.0], [687.0, 137.0], [686.0, 137.0], [685.0, 137.0], [684.0, 144.0], [683.0, 145.0], [681.0, 158.75], [695.0, 170.25], [703.0, 158.85714285714286], [689.0, 138.0], [693.0, 139.0], [691.0, 137.5], [694.0, 150.0], [696.0, 201.5], [697.0, 150.66666666666666], [699.0, 163.1], [700.0, 140.33333333333334], [701.0, 163.0], [702.0, 211.66666666666666], [722.0, 144.0], [734.0, 138.0], [735.0, 161.66666666666666], [721.0, 143.0], [731.0, 144.5], [730.0, 148.0], [729.0, 207.0], [708.0, 138.0], [707.0, 172.0], [706.0, 138.0], [719.0, 140.5], [717.0, 139.0], [716.0, 137.0], [715.0, 137.0], [714.0, 170.0], [712.0, 162.0], [727.0, 143.0], [725.0, 146.0], [724.0, 139.0], [763.0, 219.5], [752.0, 142.5], [751.0, 150.44444444444446], [738.0, 138.5], [737.0, 135.0], [742.0, 145.0], [741.0, 191.66666666666666], [749.0, 146.0], [746.0, 135.0], [745.0, 140.0], [756.0, 409.0], [755.0, 137.0], [754.0, 146.5], [753.0, 140.0], [757.0, 378.1818181818182], [759.0, 353.75], [760.0, 264.54545454545456], [762.0, 184.5], [761.0, 132.0], [764.0, 164.57142857142858], [765.0, 165.57142857142858], [766.0, 171.29999999999998], [767.0, 180.22222222222223], [769.0, 164.625], [768.0, 145.0], [783.0, 194.0], [771.0, 162.0], [770.0, 145.0], [774.0, 137.0], [772.0, 136.0], [792.0, 242.25], [793.0, 350.2], [794.0, 338.5], [795.0, 495.2], [796.0, 336.8666666666667], [798.0, 407.0], [799.0, 299.4545454545455], [788.0, 137.0], [787.0, 165.5], [784.0, 167.0], [777.0, 354.5], [776.0, 141.0], [778.0, 131.0], [780.0, 268.3333333333333], [781.0, 350.5], [782.0, 192.33333333333331], [789.0, 424.0], [790.0, 405.5], [791.0, 217.33333333333334], [807.0, 262.5], [802.0, 325.07692307692304], [801.0, 403.7142857142857], [815.0, 201.375], [813.0, 228.0], [814.0, 212.0], [803.0, 375.0], [804.0, 347.3636363636363], [805.0, 407.46153846153845], [816.0, 256.6363636363637], [831.0, 316.5], [830.0, 144.0], [828.0, 348.6666666666667], [829.0, 257.6666666666667], [825.0, 196.125], [826.0, 293.0], [817.0, 359.375], [818.0, 402.5], [819.0, 433.8888888888889], [820.0, 415.0], [821.0, 401.59999999999997], [822.0, 282.625], [823.0, 206.2], [809.0, 306.076923076923], [810.0, 231.07142857142858], [811.0, 234.66666666666666], [812.0, 213.70000000000002], [836.0, 453.0], [833.0, 188.5], [832.0, 154.0], [847.0, 136.0], [845.0, 143.5], [843.0, 263.0], [840.0, 148.33333333333334], [834.0, 225.0], [835.0, 122.0], [856.0, 167.66666666666666], [839.0, 138.0], [837.0, 283.0], [857.0, 243.5], [859.0, 177.66666666666666], [860.0, 207.5], [861.0, 204.16666666666666], [862.0, 206.33333333333334], [863.0, 204.66666666666666], [848.0, 137.0], [851.0, 140.0], [849.0, 139.0], [855.0, 114.5], [852.0, 145.5], [890.0, 211.9], [882.0, 204.0], [864.0, 179.54545454545456], [868.0, 138.0], [867.0, 167.66666666666666], [871.0, 136.0], [870.0, 136.0], [879.0, 136.0], [876.0, 135.0], [875.0, 135.5], [873.0, 136.0], [872.0, 139.0], [883.0, 159.77777777777777], [886.0, 223.85714285714286], [887.0, 172.66666666666666], [888.0, 176.875], [889.0, 185.42857142857142], [891.0, 183.2], [892.0, 169.58333333333334], [893.0, 199.75], [895.0, 204.875], [881.0, 143.33333333333334], [880.0, 140.0], [894.0, 131.0], [926.0, 129.66666666666666], [896.0, 161.54545454545453], [911.0, 139.66666666666666], [909.0, 129.0], [908.0, 132.5], [905.0, 133.0], [904.0, 128.0], [897.0, 146.0], [921.0, 132.0], [903.0, 183.5], [901.0, 184.33333333333334], [899.0, 133.0], [898.0, 179.0], [919.0, 142.5], [918.0, 141.0], [917.0, 138.0], [913.0, 130.0], [912.0, 136.0], [948.0, 144.5], [957.0, 138.66666666666666], [944.0, 129.0], [956.0, 125.0], [953.0, 142.5], [935.0, 186.33333333333334], [934.0, 132.0], [931.0, 148.0], [929.0, 139.0], [928.0, 136.66666666666666], [943.0, 127.0], [942.0, 128.5], [938.0, 132.33333333333334], [951.0, 165.0], [950.0, 142.0], [949.0, 140.0], [946.0, 141.0], [945.0, 135.5], [986.0, 319.25], [980.0, 276.6], [963.0, 178.57142857142858], [962.0, 139.0], [961.0, 133.0], [964.0, 138.0], [967.0, 121.0], [965.0, 180.5], [975.0, 149.0], [974.0, 140.0], [973.0, 135.25], [972.0, 122.0], [968.0, 124.0], [981.0, 215.79999999999998], [982.0, 209.0], [983.0, 218.23076923076925], [984.0, 282.3], [985.0, 325.7692307692308], [987.0, 363.8333333333333], [988.0, 293.9166666666667], [989.0, 272.4736842105263], [990.0, 366.8571428571429], [991.0, 249.99999999999994], [979.0, 157.375], [977.0, 151.28571428571428], [994.0, 221.6666666666667], [993.0, 289.38461538461536], [995.0, 175.55555555555554], [996.0, 256.2857142857143], [997.0, 192.57142857142858], [1000.0, 304.62833704507545], [999.0, 147.0], [998.0, 147.8709677419355], [992.0, 150.0], [1.0, 60000.0]], "isOverall": false, "label": "/user/search", "isController": false}, {"data": [[970.6080971981386, 683.3625342456693]], "isOverall": false, "label": "/user/search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2375.0, "minX": 1.749374671E12, "maxY": 7.1513776E7, "series": [{"data": [[1.749374749E12, 705750.0], [1.7493747E12, 6.3734397E7], [1.749374745E12, 880301.0], [1.749374673E12, 7.104638E7], [1.749374677E12, 5.9952093E7], [1.749374675E12, 6.5680438E7], [1.749374718E12, 1591059.0], [1.749374753E12, 675743.0], [1.749374757E12, 627356.0], [1.749374671E12, 2214108.0], [1.749374755E12, 189627.0], [1.749374684E12, 6.2089578E7], [1.749374688E12, 6.1218623E7], [1.749374729E12, 1172974.0], [1.749374686E12, 6.3302225E7], [1.74937468E12, 6.5528239E7], [1.749374678E12, 6.1348516E7], [1.749374725E12, 1263780.0], [1.749374682E12, 6.303049E7], [1.749374696E12, 5.9192303E7], [1.749374694E12, 6.0025845E7], [1.749374741E12, 176352.0], [1.749374698E12, 6.2295144E7], [1.749374739E12, 468930.0], [1.749374733E12, 647345.0], [1.74937469E12, 6.3712507E7], [1.749374692E12, 5.8501718E7], [1.749374748E12, 108837.0], [1.749374752E12, 708455.0], [1.74937475E12, 193925.0], [1.749374701E12, 6.1014135E7], [1.749374744E12, 477949.0], [1.749374699E12, 5.8987964E7], [1.749374742E12, 848483.0], [1.749374746E12, 826633.0], [1.749374674E12, 7.1513776E7], [1.749374715E12, 1450374.0], [1.749374676E12, 6.968226E7], [1.749374672E12, 3.8710163E7], [1.749374756E12, 665510.0], [1.749374685E12, 6.1434234E7], [1.749374683E12, 6.2684548E7], [1.749374687E12, 6.2412995E7], [1.749374679E12, 5.9715442E7], [1.749374722E12, 990200.0], [1.749374681E12, 5.9296543E7], [1.749374695E12, 6.4811395E7], [1.749374697E12, 6.3044074E7], [1.74937474E12, 828286.0], [1.749374689E12, 6.1300261E7], [1.749374693E12, 5.9764863E7], [1.749374736E12, 795782.0], [1.749374691E12, 5.973108E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.749374749E12, 13300.0], [1.7493747E12, 1189400.0], [1.749374745E12, 13300.0], [1.749374673E12, 1293425.0], [1.749374677E12, 1130500.0], [1.749374675E12, 1238800.0], [1.749374718E12, 31350.0], [1.749374753E12, 13300.0], [1.749374757E12, 12825.0], [1.749374671E12, 57950.0], [1.749374755E12, 3800.0], [1.749374684E12, 1153775.0], [1.749374688E12, 1161375.0], [1.749374729E12, 22800.0], [1.749374686E12, 1184175.0], [1.74937468E12, 1212675.0], [1.749374678E12, 1125750.0], [1.749374725E12, 24225.0], [1.749374682E12, 1186550.0], [1.749374696E12, 1066375.0], [1.749374694E12, 1102950.0], [1.749374741E12, 4750.0], [1.749374698E12, 1152825.0], [1.749374739E12, 13775.0], [1.749374733E12, 14725.0], [1.74937469E12, 1165650.0], [1.749374692E12, 1106750.0], [1.749374748E12, 2375.0], [1.749374752E12, 11875.0], [1.74937475E12, 3800.0], [1.749374701E12, 1123850.0], [1.749374744E12, 7600.0], [1.749374699E12, 1086325.0], [1.749374742E12, 13300.0], [1.749374746E12, 13300.0], [1.749374674E12, 1346625.0], [1.749374715E12, 22800.0], [1.749374676E12, 1288200.0], [1.749374672E12, 1774600.0], [1.749374756E12, 13300.0], [1.749374685E12, 1139050.0], [1.749374683E12, 1157575.0], [1.749374687E12, 1168500.0], [1.749374679E12, 1117675.0], [1.749374722E12, 24225.0], [1.749374681E12, 1095350.0], [1.749374695E12, 1193675.0], [1.749374697E12, 1181325.0], [1.74937474E12, 11875.0], [1.749374689E12, 1158525.0], [1.749374693E12, 1101050.0], [1.749374736E12, 13300.0], [1.749374691E12, 1103900.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374757E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 94.15573770491805, "minX": 1.749374671E12, "maxY": 60013.17857142858, "series": [{"data": [[1.749374749E12, 60013.17857142858], [1.7493747E12, 157.02476038338665], [1.749374745E12, 60012.32142857143], [1.749374673E12, 374.6907822254868], [1.749374677E12, 368.076064489458], [1.749374675E12, 361.5743865030664], [1.749374718E12, 28764.409090909092], [1.749374753E12, 60008.82142857143], [1.749374757E12, 60004.51851851852], [1.749374671E12, 94.15573770491805], [1.749374755E12, 60002.50000000001], [1.749374684E12, 348.1000411692052], [1.749374688E12, 291.33496932515396], [1.749374729E12, 35077.37500000001], [1.749374686E12, 320.1371841155237], [1.74937468E12, 391.7387387387394], [1.749374678E12, 467.6810126582278], [1.749374725E12, 34978.666666666664], [1.749374682E12, 371.40232185748545], [1.749374696E12, 216.0316258351893], [1.749374694E12, 238.77304048234296], [1.749374741E12, 60009.8], [1.749374698E12, 184.39513803049002], [1.749374739E12, 60009.72413793102], [1.749374733E12, 34292.032258064515], [1.74937469E12, 278.2310513447432], [1.749374692E12, 266.3635193133036], [1.749374748E12, 60009.2], [1.749374752E12, 60008.92000000001], [1.74937475E12, 60006.375], [1.749374701E12, 149.64708368554534], [1.749374744E12, 60007.3125], [1.749374699E12, 175.951027547005], [1.749374742E12, 60006.24999999999], [1.749374746E12, 60008.89285714286], [1.749374674E12, 390.83668430335], [1.749374715E12, 24536.541666666668], [1.749374676E12, 325.32558997050256], [1.749374672E12, 111.19566381156308], [1.749374756E12, 60003.96428571429], [1.749374685E12, 338.48957464553814], [1.749374683E12, 346.33073450964235], [1.749374687E12, 310.3329268292683], [1.749374679E12, 467.49978750531244], [1.749374722E12, 34991.41176470588], [1.749374681E12, 391.3313096270603], [1.749374695E12, 218.39753282928783], [1.749374697E12, 196.51467631684767], [1.74937474E12, 60001.880000000005], [1.749374689E12, 286.05863058630524], [1.749374693E12, 252.086712683348], [1.749374736E12, 35532.99999999999], [1.749374691E12, 275.25344234079154]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374757E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 93.08196721311477, "minX": 1.749374671E12, "maxY": 60012.07142857142, "series": [{"data": [[1.749374749E12, 60012.07142857142], [1.7493747E12, 150.78234824281137], [1.749374745E12, 60011.14285714285], [1.749374673E12, 354.63606316562607], [1.749374677E12, 349.2021496486154], [1.749374675E12, 343.50996932515307], [1.749374718E12, 28763.80303030304], [1.749374753E12, 60007.25], [1.749374757E12, 60004.37037037037], [1.749374671E12, 93.08196721311477], [1.749374755E12, 60002.50000000001], [1.749374684E12, 330.6080691642652], [1.749374688E12, 276.4781186094069], [1.749374729E12, 35076.625], [1.749374686E12, 305.28880866426005], [1.74937468E12, 372.6639247943601], [1.749374678E12, 445.4535864978902], [1.749374725E12, 34978.6274509804], [1.749374682E12, 351.77141713370645], [1.749374696E12, 204.8187082405347], [1.749374694E12, 226.8966408268731], [1.749374741E12, 60008.899999999994], [1.749374698E12, 176.28265348166445], [1.749374739E12, 60009.55172413792], [1.749374733E12, 34291.96774193548], [1.74937469E12, 263.7803585982065], [1.749374692E12, 254.84506437768272], [1.749374748E12, 60007.2], [1.749374752E12, 60007.8], [1.74937475E12, 60004.0], [1.749374701E12, 143.5528317836008], [1.749374744E12, 60006.125], [1.749374699E12, 168.2133799737647], [1.749374742E12, 60006.107142857145], [1.749374746E12, 60008.821428571435], [1.749374674E12, 370.90370370370437], [1.749374715E12, 24536.145833333336], [1.749374676E12, 309.6231563421824], [1.749374672E12, 106.40497858672391], [1.749374756E12, 60003.607142857145], [1.749374685E12, 321.68015012510295], [1.749374683E12, 329.3368896183831], [1.749374687E12, 295.77642276422796], [1.749374679E12, 448.9379515512121], [1.749374722E12, 34990.78431372549], [1.749374681E12, 370.41977450130014], [1.749374695E12, 208.18702745722274], [1.749374697E12, 188.15118616807368], [1.74937474E12, 60001.759999999995], [1.749374689E12, 273.9376793767937], [1.749374693E12, 239.21440897325314], [1.749374736E12, 35532.99999999999], [1.749374691E12, 261.8377796901882]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374757E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.749374671E12, "maxY": 17.090163934426233, "series": [{"data": [[1.749374749E12, 0.0], [1.7493747E12, 0.0], [1.749374745E12, 0.0], [1.749374673E12, 0.034520749173705526], [1.749374677E12, 0.0012401818933443574], [1.749374675E12, 0.0], [1.749374718E12, 0.0], [1.749374753E12, 0.0], [1.749374757E12, 0.0], [1.749374671E12, 17.090163934426233], [1.749374755E12, 0.0], [1.749374684E12, 0.0], [1.749374688E12, 0.0], [1.749374729E12, 0.0], [1.749374686E12, 0.0], [1.74937468E12, 0.0], [1.749374678E12, 0.010548523206751103], [1.749374725E12, 0.0], [1.749374682E12, 0.0], [1.749374696E12, 0.0], [1.749374694E12, 0.0], [1.749374741E12, 0.0], [1.749374698E12, 0.0], [1.749374739E12, 0.0], [1.749374733E12, 0.0], [1.74937469E12, 0.0], [1.749374692E12, 0.0], [1.749374748E12, 0.0], [1.749374752E12, 0.0], [1.74937475E12, 0.0], [1.749374701E12, 0.0], [1.749374744E12, 0.0], [1.749374699E12, 0.0], [1.749374742E12, 0.0], [1.749374746E12, 0.0], [1.749374674E12, 0.0], [1.749374715E12, 0.0], [1.749374676E12, 0.0], [1.749374672E12, 0.26258029978586833], [1.749374756E12, 0.0], [1.749374685E12, 0.0], [1.749374683E12, 0.0], [1.749374687E12, 0.0], [1.749374679E12, 0.0773480662983424], [1.749374722E12, 0.0], [1.749374681E12, 0.0], [1.749374695E12, 0.0], [1.749374697E12, 0.0], [1.74937474E12, 0.0], [1.749374689E12, 0.0], [1.749374693E12, 0.0], [1.749374736E12, 0.0], [1.749374691E12, 0.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374757E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.749374671E12, "maxY": 60026.0, "series": [{"data": [[1.749374749E12, 60026.0], [1.7493747E12, 310.0], [1.749374745E12, 60024.0], [1.749374673E12, 1672.0], [1.749374677E12, 1208.0], [1.749374675E12, 858.0], [1.749374718E12, 35665.0], [1.749374753E12, 60021.0], [1.749374757E12, 60016.0], [1.749374671E12, 154.0], [1.749374755E12, 60003.0], [1.749374684E12, 708.0], [1.749374688E12, 644.0], [1.749374729E12, 35502.0], [1.749374686E12, 672.0], [1.74937468E12, 812.0], [1.749374678E12, 1361.0], [1.749374725E12, 35666.0], [1.749374682E12, 792.0], [1.749374696E12, 437.0], [1.749374694E12, 578.0], [1.749374741E12, 60026.0], [1.749374698E12, 379.0], [1.749374739E12, 60018.0], [1.749374733E12, 35360.0], [1.74937469E12, 549.0], [1.749374692E12, 533.0], [1.749374748E12, 60017.0], [1.749374752E12, 60020.0], [1.74937475E12, 60015.0], [1.749374701E12, 306.0], [1.749374744E12, 60018.0], [1.749374699E12, 357.0], [1.749374742E12, 60017.0], [1.749374746E12, 60018.0], [1.749374674E12, 1116.0], [1.749374715E12, 35430.0], [1.749374676E12, 1003.0], [1.749374672E12, 745.0], [1.749374756E12, 60014.0], [1.749374685E12, 721.0], [1.749374683E12, 701.0], [1.749374687E12, 635.0], [1.749374679E12, 2138.0], [1.749374722E12, 35484.0], [1.749374681E12, 807.0], [1.749374695E12, 450.0], [1.749374697E12, 391.0], [1.74937474E12, 60006.0], [1.749374689E12, 622.0], [1.749374693E12, 519.0], [1.749374736E12, 35549.0], [1.749374691E12, 542.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.749374749E12, 60024.1], [1.7493747E12, 198.0], [1.749374745E12, 60019.4], [1.749374673E12, 602.0], [1.749374677E12, 749.0], [1.749374675E12, 469.0], [1.749374718E12, 35662.0], [1.749374753E12, 60021.0], [1.749374757E12, 60010.0], [1.749374671E12, 144.0], [1.749374755E12, 60003.0], [1.749374684E12, 427.0], [1.749374688E12, 362.4000000000001], [1.749374729E12, 35493.5], [1.749374686E12, 403.0], [1.74937468E12, 489.0], [1.749374678E12, 837.0], [1.749374725E12, 35655.0], [1.749374682E12, 461.0], [1.749374696E12, 286.0], [1.749374694E12, 309.7000000000003], [1.749374741E12, 60025.1], [1.749374698E12, 224.20000000000027], [1.749374739E12, 60016.0], [1.749374733E12, 34346.8], [1.74937469E12, 342.0], [1.749374692E12, 335.0], [1.749374748E12, 60017.0], [1.749374752E12, 60019.0], [1.74937475E12, 60015.0], [1.749374701E12, 192.30000000000018], [1.749374744E12, 60015.2], [1.749374699E12, 223.0], [1.749374742E12, 60014.1], [1.749374746E12, 60016.1], [1.749374674E12, 658.0], [1.749374715E12, 34354.0], [1.749374676E12, 611.0], [1.749374672E12, 425.0], [1.749374756E12, 60008.3], [1.749374685E12, 414.0], [1.749374683E12, 416.0], [1.749374687E12, 383.0], [1.749374679E12, 574.5999999999999], [1.749374722E12, 35474.4], [1.749374681E12, 475.0], [1.749374695E12, 278.0], [1.749374697E12, 249.20000000000027], [1.74937474E12, 60004.4], [1.749374689E12, 355.0], [1.749374693E12, 314.0], [1.749374736E12, 35547.1], [1.749374691E12, 335.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.749374749E12, 60026.0], [1.7493747E12, 283.9499999999998], [1.749374745E12, 60024.0], [1.749374673E12, 857.2799999999993], [1.749374677E12, 1063.0], [1.749374675E12, 685.8199999999997], [1.749374718E12, 35665.0], [1.749374753E12, 60021.0], [1.749374757E12, 60016.0], [1.749374671E12, 154.0], [1.749374755E12, 60003.0], [1.749374684E12, 610.1999999999989], [1.749374688E12, 514.6199999999999], [1.749374729E12, 35502.0], [1.749374686E12, 565.0], [1.74937468E12, 704.3800000000001], [1.749374678E12, 1041.58], [1.749374725E12, 35666.0], [1.749374682E12, 655.0099999999998], [1.749374696E12, 377.6199999999999], [1.749374694E12, 445.0], [1.749374741E12, 60026.0], [1.749374698E12, 341.4399999999996], [1.749374739E12, 60018.0], [1.749374733E12, 35360.0], [1.74937469E12, 493.0], [1.749374692E12, 474.7600000000002], [1.749374748E12, 60017.0], [1.749374752E12, 60020.0], [1.74937475E12, 60015.0], [1.749374701E12, 275.0], [1.749374744E12, 60018.0], [1.749374699E12, 332.1199999999999], [1.749374742E12, 60017.0], [1.749374746E12, 60018.0], [1.749374674E12, 933.8399999999992], [1.749374715E12, 35430.0], [1.749374676E12, 815.2699999999977], [1.749374672E12, 604.0400000000002], [1.749374756E12, 60014.0], [1.749374685E12, 607.0], [1.749374683E12, 589.6199999999999], [1.749374687E12, 544.3899999999999], [1.749374679E12, 1638.46], [1.749374722E12, 35484.0], [1.749374681E12, 661.9299999999998], [1.749374695E12, 397.0], [1.749374697E12, 354.1199999999999], [1.74937474E12, 60006.0], [1.749374689E12, 506.5999999999999], [1.749374693E12, 455.0], [1.749374736E12, 35549.0], [1.749374691E12, 481.25]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.749374749E12, 60025.55], [1.7493747E12, 231.0], [1.749374745E12, 60023.55], [1.749374673E12, 661.0], [1.749374677E12, 786.0], [1.749374675E12, 558.0999999999995], [1.749374718E12, 35662.65], [1.749374753E12, 60021.0], [1.749374757E12, 60013.6], [1.749374671E12, 148.85], [1.749374755E12, 60003.0], [1.749374684E12, 499.0], [1.749374688E12, 433.6999999999998], [1.749374729E12, 35499.55], [1.749374686E12, 457.0], [1.74937468E12, 574.2999999999997], [1.749374678E12, 952.0], [1.749374725E12, 35660.8], [1.749374682E12, 541.0], [1.749374696E12, 324.0], [1.749374694E12, 379.0], [1.749374741E12, 60026.0], [1.749374698E12, 273.5999999999999], [1.749374739E12, 60017.0], [1.749374733E12, 34752.2], [1.74937469E12, 421.0], [1.749374692E12, 388.4499999999998], [1.749374748E12, 60017.0], [1.749374752E12, 60019.7], [1.74937475E12, 60015.0], [1.749374701E12, 217.6500000000001], [1.749374744E12, 60018.0], [1.749374699E12, 265.0], [1.749374742E12, 60016.1], [1.749374746E12, 60017.55], [1.749374674E12, 706.0], [1.749374715E12, 34939.1], [1.749374676E12, 669.0], [1.749374672E12, 448.39999999999986], [1.749374756E12, 60012.65], [1.749374685E12, 499.0499999999997], [1.749374683E12, 505.0999999999999], [1.749374687E12, 459.0], [1.749374679E12, 1348.0], [1.749374722E12, 35482.0], [1.749374681E12, 572.3000000000002], [1.749374695E12, 327.0], [1.749374697E12, 285.0], [1.74937474E12, 60005.7], [1.749374689E12, 403.0], [1.749374693E12, 371.09999999999945], [1.749374736E12, 35548.55], [1.749374691E12, 396.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.749374749E12, 60000.0], [1.7493747E12, 71.0], [1.749374745E12, 60004.0], [1.749374673E12, 56.0], [1.749374677E12, 4.0], [1.749374675E12, 168.0], [1.749374718E12, 18606.0], [1.749374753E12, 60002.0], [1.749374757E12, 59999.0], [1.749374671E12, 12.0], [1.749374755E12, 60002.0], [1.749374684E12, 184.0], [1.749374688E12, 156.0], [1.749374729E12, 34502.0], [1.749374686E12, 185.0], [1.74937468E12, 212.0], [1.749374678E12, 183.0], [1.749374725E12, 33678.0], [1.749374682E12, 188.0], [1.749374696E12, 99.0], [1.749374694E12, 126.0], [1.749374741E12, 60001.0], [1.749374698E12, 82.0], [1.749374739E12, 60001.0], [1.749374733E12, 33350.0], [1.74937469E12, 146.0], [1.749374692E12, 133.0], [1.749374748E12, 60006.0], [1.749374752E12, 60001.0], [1.74937475E12, 60001.0], [1.749374701E12, 75.0], [1.749374744E12, 60003.0], [1.749374699E12, 87.0], [1.749374742E12, 60000.0], [1.749374746E12, 60000.0], [1.749374674E12, 18.0], [1.749374715E12, 17349.0], [1.749374676E12, 55.0], [1.749374672E12, 12.0], [1.749374756E12, 60001.0], [1.749374685E12, 167.0], [1.749374683E12, 197.0], [1.749374687E12, 161.0], [1.749374679E12, 226.0], [1.749374722E12, 34430.0], [1.749374681E12, 194.0], [1.749374695E12, 110.0], [1.749374697E12, 94.0], [1.74937474E12, 60000.0], [1.749374689E12, 140.0], [1.749374693E12, 132.0], [1.749374736E12, 35513.0], [1.749374691E12, 138.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.749374749E12, 60013.0], [1.7493747E12, 155.0], [1.749374745E12, 60012.5], [1.749374673E12, 374.0], [1.749374677E12, 367.5], [1.749374675E12, 344.0], [1.749374718E12, 34635.0], [1.749374753E12, 60007.0], [1.749374757E12, 60003.0], [1.749374671E12, 89.5], [1.749374755E12, 60002.5], [1.749374684E12, 337.0], [1.749374688E12, 283.0], [1.749374729E12, 35445.5], [1.749374686E12, 309.0], [1.74937468E12, 375.0], [1.749374678E12, 407.0], [1.749374725E12, 34639.0], [1.749374682E12, 353.5], [1.749374696E12, 213.0], [1.749374694E12, 234.0], [1.749374741E12, 60009.5], [1.749374698E12, 178.0], [1.749374739E12, 60010.0], [1.749374733E12, 34319.0], [1.74937469E12, 265.0], [1.749374692E12, 261.0], [1.749374748E12, 60008.0], [1.749374752E12, 60007.0], [1.74937475E12, 60004.0], [1.749374701E12, 141.0], [1.749374744E12, 60006.0], [1.749374699E12, 173.0], [1.749374742E12, 60005.0], [1.749374746E12, 60009.5], [1.749374674E12, 413.0], [1.749374715E12, 17450.0], [1.749374676E12, 257.0], [1.749374672E12, 272.0], [1.749374756E12, 60003.5], [1.749374685E12, 335.0], [1.749374683E12, 331.0], [1.749374687E12, 298.5], [1.749374679E12, 395.0], [1.749374722E12, 35408.0], [1.749374681E12, 391.0], [1.749374695E12, 210.0], [1.749374697E12, 192.0], [1.74937474E12, 60002.0], [1.749374689E12, 274.0], [1.749374693E12, 250.0], [1.749374736E12, 35533.5], [1.749374691E12, 265.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374757E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 5.0, "maxY": 60010.0, "series": [{"data": [[48.0, 34505.5], [51.0, 34672.5], [66.0, 34635.0], [5.0, 60008.0], [122.0, 89.5], [8.0, 60003.0], [2245.0, 213.0], [2287.0, 173.0], [2324.0, 265.5], [2419.0, 367.5], [2370.0, 407.0], [2353.0, 395.0], [2366.0, 141.0], [2306.0, 391.0], [2429.0, 337.0], [2427.0, 178.0], [2398.0, 335.0], [2330.0, 261.0], [2318.0, 250.0], [2322.0, 234.0], [2445.0, 283.0], [2553.0, 375.0], [2498.0, 353.5], [2437.0, 331.0], [2493.0, 309.0], [2487.0, 192.0], [2460.0, 298.5], [2439.0, 274.0], [2454.0, 265.0], [2513.0, 210.0], [2504.0, 155.0], [2608.0, 344.0], [10.0, 60009.5], [2723.0, 374.0], [2712.0, 257.0], [2835.0, 413.0], [3736.0, 272.0], [16.0, 60006.0], [25.0, 60004.0], [27.0, 60003.0], [28.0, 60006.5], [29.0, 60010.0], [31.0, 34319.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2419.0, 860.0], [3736.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3736.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 5.0, "maxY": 60010.0, "series": [{"data": [[48.0, 34505.5], [51.0, 34672.5], [66.0, 34635.0], [5.0, 60007.0], [122.0, 89.0], [8.0, 60003.0], [2245.0, 209.0], [2287.0, 171.0], [2324.0, 257.0], [2419.0, 366.5], [2370.0, 396.0], [2353.0, 385.0], [2366.0, 140.0], [2306.0, 383.0], [2429.0, 329.0], [2427.0, 177.0], [2398.0, 325.5], [2330.0, 254.0], [2318.0, 235.5], [2322.0, 228.0], [2445.0, 273.0], [2553.0, 366.0], [2498.0, 347.0], [2437.0, 323.0], [2493.0, 300.0], [2487.0, 189.0], [2460.0, 292.0], [2439.0, 270.0], [2454.0, 260.0], [2513.0, 205.0], [2504.0, 153.0], [2608.0, 337.0], [10.0, 60009.5], [2723.0, 354.0], [2712.0, 248.0], [2835.0, 405.0], [3736.0, 258.0], [16.0, 60006.0], [25.0, 60004.0], [27.0, 60003.0], [28.0, 60006.0], [29.0, 60010.0], [31.0, 34319.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2419.0, 620.0], [3736.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3736.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 355.0, "minX": 1.749374671E12, "maxY": 4503.0, "series": [{"data": [[1.749374701E12, 2010.0], [1.7493747E12, 2504.0], [1.749374699E12, 2287.0], [1.749374674E12, 2835.0], [1.749374673E12, 2723.0], [1.749374677E12, 2419.0], [1.749374676E12, 2712.0], [1.749374675E12, 2608.0], [1.749374672E12, 4503.0], [1.749374671E12, 355.0], [1.749374685E12, 2398.0], [1.749374684E12, 2429.0], [1.749374683E12, 2437.0], [1.749374688E12, 2445.0], [1.749374687E12, 2460.0], [1.749374686E12, 2493.0], [1.74937468E12, 2553.0], [1.749374679E12, 2353.0], [1.749374678E12, 2370.0], [1.749374682E12, 2498.0], [1.749374681E12, 2306.0], [1.749374696E12, 2245.0], [1.749374695E12, 2513.0], [1.749374694E12, 2322.0], [1.749374698E12, 2427.0], [1.749374697E12, 2487.0], [1.74937469E12, 2454.0], [1.749374689E12, 2439.0], [1.749374693E12, 2318.0], [1.749374692E12, 2330.0], [1.749374691E12, 2324.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374701E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.749374671E12, "maxY": 2835.0, "series": [{"data": [[1.749374749E12, 28.0], [1.7493747E12, 2504.0], [1.749374745E12, 28.0], [1.749374673E12, 2723.0], [1.749374677E12, 2380.0], [1.749374675E12, 2608.0], [1.749374718E12, 66.0], [1.749374753E12, 28.0], [1.749374757E12, 27.0], [1.749374671E12, 122.0], [1.749374755E12, 8.0], [1.749374684E12, 2429.0], [1.749374688E12, 2445.0], [1.749374729E12, 48.0], [1.749374686E12, 2493.0], [1.74937468E12, 2553.0], [1.749374678E12, 2370.0], [1.749374725E12, 51.0], [1.749374682E12, 2498.0], [1.749374696E12, 2245.0], [1.749374694E12, 2322.0], [1.749374741E12, 10.0], [1.749374698E12, 2427.0], [1.749374739E12, 29.0], [1.749374733E12, 31.0], [1.74937469E12, 2454.0], [1.749374692E12, 2330.0], [1.749374748E12, 5.0], [1.749374752E12, 25.0], [1.74937475E12, 8.0], [1.749374701E12, 2366.0], [1.749374744E12, 16.0], [1.749374699E12, 2287.0], [1.749374742E12, 28.0], [1.749374746E12, 28.0], [1.749374674E12, 2835.0], [1.749374715E12, 48.0], [1.749374676E12, 2712.0], [1.749374672E12, 1531.0], [1.749374756E12, 28.0], [1.749374685E12, 2398.0], [1.749374683E12, 2437.0], [1.749374687E12, 2460.0], [1.749374679E12, 2353.0], [1.749374722E12, 51.0], [1.749374681E12, 2306.0], [1.749374695E12, 2513.0], [1.749374697E12, 2487.0], [1.74937474E12, 25.0], [1.749374689E12, 2439.0], [1.749374693E12, 2318.0], [1.749374736E12, 28.0], [1.749374691E12, 2324.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.749374672E12, 2205.0]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.749374677E12, 39.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.749374757E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.749374671E12, "maxY": 2835.0, "series": [{"data": [[1.749374749E12, 28.0], [1.7493747E12, 2504.0], [1.749374745E12, 28.0], [1.749374673E12, 2723.0], [1.749374677E12, 2380.0], [1.749374675E12, 2608.0], [1.749374718E12, 66.0], [1.749374753E12, 28.0], [1.749374757E12, 27.0], [1.749374671E12, 122.0], [1.749374755E12, 8.0], [1.749374684E12, 2429.0], [1.749374688E12, 2445.0], [1.749374729E12, 48.0], [1.749374686E12, 2493.0], [1.74937468E12, 2553.0], [1.749374678E12, 2370.0], [1.749374725E12, 51.0], [1.749374682E12, 2498.0], [1.749374696E12, 2245.0], [1.749374694E12, 2322.0], [1.749374741E12, 10.0], [1.749374698E12, 2427.0], [1.749374739E12, 29.0], [1.749374733E12, 31.0], [1.74937469E12, 2454.0], [1.749374692E12, 2330.0], [1.749374748E12, 5.0], [1.749374752E12, 25.0], [1.74937475E12, 8.0], [1.749374701E12, 2366.0], [1.749374744E12, 16.0], [1.749374699E12, 2287.0], [1.749374742E12, 28.0], [1.749374746E12, 28.0], [1.749374674E12, 2835.0], [1.749374715E12, 48.0], [1.749374676E12, 2712.0], [1.749374672E12, 1531.0], [1.749374756E12, 28.0], [1.749374685E12, 2398.0], [1.749374683E12, 2437.0], [1.749374687E12, 2460.0], [1.749374679E12, 2353.0], [1.749374722E12, 51.0], [1.749374681E12, 2306.0], [1.749374695E12, 2513.0], [1.749374697E12, 2487.0], [1.74937474E12, 25.0], [1.749374689E12, 2439.0], [1.749374693E12, 2318.0], [1.749374736E12, 28.0], [1.749374691E12, 2324.0]], "isOverall": false, "label": "/user/search-success", "isController": false}, {"data": [[1.749374677E12, 39.0], [1.749374672E12, 2205.0]], "isOverall": false, "label": "/user/search-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374757E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.749374671E12, "maxY": 2835.0, "series": [{"data": [[1.749374749E12, 28.0], [1.7493747E12, 2504.0], [1.749374745E12, 28.0], [1.749374673E12, 2723.0], [1.749374677E12, 2380.0], [1.749374675E12, 2608.0], [1.749374718E12, 66.0], [1.749374753E12, 28.0], [1.749374757E12, 27.0], [1.749374671E12, 122.0], [1.749374755E12, 8.0], [1.749374684E12, 2429.0], [1.749374688E12, 2445.0], [1.749374729E12, 48.0], [1.749374686E12, 2493.0], [1.74937468E12, 2553.0], [1.749374678E12, 2370.0], [1.749374725E12, 51.0], [1.749374682E12, 2498.0], [1.749374696E12, 2245.0], [1.749374694E12, 2322.0], [1.749374741E12, 10.0], [1.749374698E12, 2427.0], [1.749374739E12, 29.0], [1.749374733E12, 31.0], [1.74937469E12, 2454.0], [1.749374692E12, 2330.0], [1.749374748E12, 5.0], [1.749374752E12, 25.0], [1.74937475E12, 8.0], [1.749374701E12, 2366.0], [1.749374744E12, 16.0], [1.749374699E12, 2287.0], [1.749374742E12, 28.0], [1.749374746E12, 28.0], [1.749374674E12, 2835.0], [1.749374715E12, 48.0], [1.749374676E12, 2712.0], [1.749374672E12, 1531.0], [1.749374756E12, 28.0], [1.749374685E12, 2398.0], [1.749374683E12, 2437.0], [1.749374687E12, 2460.0], [1.749374679E12, 2353.0], [1.749374722E12, 51.0], [1.749374681E12, 2306.0], [1.749374695E12, 2513.0], [1.749374697E12, 2487.0], [1.74937474E12, 25.0], [1.749374689E12, 2439.0], [1.749374693E12, 2318.0], [1.749374736E12, 28.0], [1.749374691E12, 2324.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.749374677E12, 39.0], [1.749374672E12, 2205.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.749374757E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

