/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 216.0, "minX": 0.0, "maxY": 34483.0, "series": [{"data": [[0.0, 216.0], [0.1, 234.0], [0.2, 236.0], [0.3, 254.0], [0.4, 263.0], [0.5, 272.0], [0.6, 272.0], [0.7, 278.0], [0.8, 281.0], [0.9, 294.0], [1.0, 402.0], [1.1, 408.0], [1.2, 414.0], [1.3, 415.0], [1.4, 417.0], [1.5, 2425.0], [1.6, 2433.0], [1.7, 2441.0], [1.8, 2453.0], [1.9, 2477.0], [2.0, 2485.0], [2.1, 2527.0], [2.2, 2581.0], [2.3, 2583.0], [2.4, 2619.0], [2.5, 2633.0], [2.6, 2671.0], [2.7, 2694.0], [2.8, 2737.0], [2.9, 2763.0], [3.0, 2764.0], [3.1, 2788.0], [3.2, 2796.0], [3.3, 2803.0], [3.4, 2807.0], [3.5, 2810.0], [3.6, 2823.0], [3.7, 2833.0], [3.8, 2842.0], [3.9, 2844.0], [4.0, 2848.0], [4.1, 2848.0], [4.2, 2850.0], [4.3, 2856.0], [4.4, 2871.0], [4.5, 2876.0], [4.6, 2878.0], [4.7, 2885.0], [4.8, 2890.0], [4.9, 2892.0], [5.0, 2894.0], [5.1, 2899.0], [5.2, 2906.0], [5.3, 2924.0], [5.4, 2938.0], [5.5, 2947.0], [5.6, 2947.0], [5.7, 2954.0], [5.8, 2956.0], [5.9, 2957.0], [6.0, 2960.0], [6.1, 2965.0], [6.2, 2965.0], [6.3, 2969.0], [6.4, 2979.0], [6.5, 3000.0], [6.6, 3003.0], [6.7, 3015.0], [6.8, 3020.0], [6.9, 3036.0], [7.0, 3041.0], [7.1, 3042.0], [7.2, 3042.0], [7.3, 3049.0], [7.4, 3052.0], [7.5, 3092.0], [7.6, 3094.0], [7.7, 3095.0], [7.8, 3106.0], [7.9, 3108.0], [8.0, 3110.0], [8.1, 3117.0], [8.2, 3146.0], [8.3, 3165.0], [8.4, 3173.0], [8.5, 3178.0], [8.6, 3180.0], [8.7, 3185.0], [8.8, 3215.0], [8.9, 3225.0], [9.0, 3226.0], [9.1, 3245.0], [9.2, 3252.0], [9.3, 3256.0], [9.4, 3267.0], [9.5, 3284.0], [9.6, 3300.0], [9.7, 3303.0], [9.8, 3329.0], [9.9, 3333.0], [10.0, 19315.0], [10.1, 19323.0], [10.2, 19323.0], [10.3, 19326.0], [10.4, 19326.0], [10.5, 19326.0], [10.6, 19327.0], [10.7, 19327.0], [10.8, 20318.0], [10.9, 20326.0], [11.0, 20326.0], [11.1, 20327.0], [11.2, 20327.0], [11.3, 20327.0], [11.4, 20327.0], [11.5, 20327.0], [11.6, 20328.0], [11.7, 20328.0], [11.8, 20329.0], [11.9, 20333.0], [12.0, 20333.0], [12.1, 20333.0], [12.2, 20333.0], [12.3, 20333.0], [12.4, 20333.0], [12.5, 20333.0], [12.6, 20333.0], [12.7, 20333.0], [12.8, 20334.0], [12.9, 20334.0], [13.0, 22292.0], [13.1, 22294.0], [13.2, 22296.0], [13.3, 22299.0], [13.4, 22302.0], [13.5, 22310.0], [13.6, 22312.0], [13.7, 22313.0], [13.8, 22315.0], [13.9, 22316.0], [14.0, 22319.0], [14.1, 22320.0], [14.2, 22323.0], [14.3, 22326.0], [14.4, 22327.0], [14.5, 22328.0], [14.6, 22328.0], [14.7, 22329.0], [14.8, 22329.0], [14.9, 22329.0], [15.0, 22330.0], [15.1, 22330.0], [15.2, 22330.0], [15.3, 22330.0], [15.4, 22330.0], [15.5, 22331.0], [15.6, 22333.0], [15.7, 22333.0], [15.8, 22333.0], [15.9, 22333.0], [16.0, 22333.0], [16.1, 22334.0], [16.2, 23238.0], [16.3, 23239.0], [16.4, 23250.0], [16.5, 23256.0], [16.6, 23262.0], [16.7, 23263.0], [16.8, 23264.0], [16.9, 23266.0], [17.0, 23266.0], [17.1, 23269.0], [17.2, 23271.0], [17.3, 23272.0], [17.4, 23276.0], [17.5, 23281.0], [17.6, 23287.0], [17.7, 23287.0], [17.8, 23288.0], [17.9, 23288.0], [18.0, 23296.0], [18.1, 24224.0], [18.2, 24226.0], [18.3, 24229.0], [18.4, 24230.0], [18.5, 24232.0], [18.6, 24234.0], [18.7, 24234.0], [18.8, 24235.0], [18.9, 24236.0], [19.0, 24241.0], [19.1, 24243.0], [19.2, 24244.0], [19.3, 24244.0], [19.4, 24247.0], [19.5, 24247.0], [19.6, 24247.0], [19.7, 24248.0], [19.8, 24249.0], [19.9, 24253.0], [20.0, 24255.0], [20.1, 24258.0], [20.2, 24258.0], [20.3, 24258.0], [20.4, 24260.0], [20.5, 24260.0], [20.6, 24261.0], [20.7, 25171.0], [20.8, 25177.0], [20.9, 25182.0], [21.0, 25189.0], [21.1, 25192.0], [21.2, 25209.0], [21.3, 25211.0], [21.4, 25212.0], [21.5, 25215.0], [21.6, 25217.0], [21.7, 25218.0], [21.8, 25220.0], [21.9, 25223.0], [22.0, 25225.0], [22.1, 25229.0], [22.2, 25257.0], [22.3, 26158.0], [22.4, 26159.0], [22.5, 26162.0], [22.6, 26162.0], [22.7, 26164.0], [22.8, 26168.0], [22.9, 26168.0], [23.0, 26175.0], [23.1, 26188.0], [23.2, 26194.0], [23.3, 26195.0], [23.4, 26196.0], [23.5, 26200.0], [23.6, 26203.0], [23.7, 26203.0], [23.8, 26203.0], [23.9, 26204.0], [24.0, 26205.0], [24.1, 26205.0], [24.2, 26206.0], [24.3, 26208.0], [24.4, 26212.0], [24.5, 26213.0], [24.6, 26214.0], [24.7, 26215.0], [24.8, 27156.0], [24.9, 27161.0], [25.0, 27165.0], [25.1, 27170.0], [25.2, 29108.0], [25.3, 29111.0], [25.4, 29111.0], [25.5, 29112.0], [25.6, 29117.0], [25.7, 29121.0], [25.8, 29125.0], [25.9, 29126.0], [26.0, 29131.0], [26.1, 29133.0], [26.2, 29134.0], [26.3, 29134.0], [26.4, 29134.0], [26.5, 29134.0], [26.6, 29137.0], [26.7, 29138.0], [26.8, 29139.0], [26.9, 29139.0], [27.0, 29141.0], [27.1, 29142.0], [27.2, 29144.0], [27.3, 29144.0], [27.4, 29145.0], [27.5, 29145.0], [27.6, 29145.0], [27.7, 29148.0], [27.8, 29150.0], [27.9, 29153.0], [28.0, 30074.0], [28.1, 30074.0], [28.2, 30075.0], [28.3, 30077.0], [28.4, 30077.0], [28.5, 30079.0], [28.6, 30080.0], [28.7, 30080.0], [28.8, 30083.0], [28.9, 30085.0], [29.0, 30085.0], [29.1, 30089.0], [29.2, 30089.0], [29.3, 30091.0], [29.4, 30092.0], [29.5, 30092.0], [29.6, 30092.0], [29.7, 30095.0], [29.8, 30096.0], [29.9, 30099.0], [30.0, 30099.0], [30.1, 30099.0], [30.2, 30100.0], [30.3, 30100.0], [30.4, 30102.0], [30.5, 30102.0], [30.6, 30103.0], [30.7, 30105.0], [30.8, 30106.0], [30.9, 30111.0], [31.0, 32019.0], [31.1, 32034.0], [31.2, 32034.0], [31.3, 32049.0], [31.4, 32049.0], [31.5, 32066.0], [31.6, 33362.0], [31.7, 33364.0], [31.8, 33375.0], [31.9, 33388.0], [32.0, 33391.0], [32.1, 33398.0], [32.2, 33403.0], [32.3, 33404.0], [32.4, 33408.0], [32.5, 33427.0], [32.6, 33428.0], [32.7, 33442.0], [32.8, 33443.0], [32.9, 33444.0], [33.0, 33449.0], [33.1, 33451.0], [33.2, 33466.0], [33.3, 33466.0], [33.4, 33475.0], [33.5, 33476.0], [33.6, 33481.0], [33.7, 33482.0], [33.8, 33485.0], [33.9, 33490.0], [34.0, 33497.0], [34.1, 33498.0], [34.2, 33498.0], [34.3, 33499.0], [34.4, 33500.0], [34.5, 33504.0], [34.6, 33504.0], [34.7, 33505.0], [34.8, 33505.0], [34.9, 33507.0], [35.0, 33508.0], [35.1, 33513.0], [35.2, 33515.0], [35.3, 33516.0], [35.4, 33518.0], [35.5, 33518.0], [35.6, 33525.0], [35.7, 33526.0], [35.8, 33526.0], [35.9, 33529.0], [36.0, 33530.0], [36.1, 33538.0], [36.2, 33539.0], [36.3, 33540.0], [36.4, 33541.0], [36.5, 33541.0], [36.6, 33542.0], [36.7, 33542.0], [36.8, 33543.0], [36.9, 33543.0], [37.0, 33543.0], [37.1, 33543.0], [37.2, 33544.0], [37.3, 33545.0], [37.4, 33545.0], [37.5, 33545.0], [37.6, 33547.0], [37.7, 33547.0], [37.8, 33548.0], [37.9, 33549.0], [38.0, 33549.0], [38.1, 33550.0], [38.2, 33551.0], [38.3, 33552.0], [38.4, 33552.0], [38.5, 33553.0], [38.6, 33554.0], [38.7, 33556.0], [38.8, 33557.0], [38.9, 33558.0], [39.0, 33559.0], [39.1, 33559.0], [39.2, 33560.0], [39.3, 33561.0], [39.4, 33562.0], [39.5, 33562.0], [39.6, 33562.0], [39.7, 33565.0], [39.8, 33567.0], [39.9, 33567.0], [40.0, 33568.0], [40.1, 33570.0], [40.2, 33571.0], [40.3, 33571.0], [40.4, 33571.0], [40.5, 33571.0], [40.6, 33571.0], [40.7, 33574.0], [40.8, 33575.0], [40.9, 33575.0], [41.0, 33578.0], [41.1, 33578.0], [41.2, 33578.0], [41.3, 33580.0], [41.4, 33580.0], [41.5, 33584.0], [41.6, 33585.0], [41.7, 33585.0], [41.8, 33585.0], [41.9, 33585.0], [42.0, 33586.0], [42.1, 33587.0], [42.2, 33587.0], [42.3, 33587.0], [42.4, 33590.0], [42.5, 33596.0], [42.6, 33596.0], [42.7, 33597.0], [42.8, 33598.0], [42.9, 33598.0], [43.0, 33599.0], [43.1, 33600.0], [43.2, 33600.0], [43.3, 33602.0], [43.4, 33602.0], [43.5, 33604.0], [43.6, 33608.0], [43.7, 33608.0], [43.8, 33608.0], [43.9, 33609.0], [44.0, 33610.0], [44.1, 33611.0], [44.2, 33616.0], [44.3, 33617.0], [44.4, 33619.0], [44.5, 33621.0], [44.6, 33622.0], [44.7, 33622.0], [44.8, 33622.0], [44.9, 33623.0], [45.0, 33624.0], [45.1, 33627.0], [45.2, 33627.0], [45.3, 33629.0], [45.4, 33632.0], [45.5, 33633.0], [45.6, 33635.0], [45.7, 33637.0], [45.8, 33638.0], [45.9, 33638.0], [46.0, 33640.0], [46.1, 33641.0], [46.2, 33642.0], [46.3, 33642.0], [46.4, 33643.0], [46.5, 33644.0], [46.6, 33645.0], [46.7, 33650.0], [46.8, 33650.0], [46.9, 33650.0], [47.0, 33653.0], [47.1, 33653.0], [47.2, 33653.0], [47.3, 33654.0], [47.4, 33654.0], [47.5, 33656.0], [47.6, 33656.0], [47.7, 33656.0], [47.8, 33659.0], [47.9, 33660.0], [48.0, 33661.0], [48.1, 33664.0], [48.2, 33665.0], [48.3, 33665.0], [48.4, 33666.0], [48.5, 33666.0], [48.6, 33666.0], [48.7, 33668.0], [48.8, 33670.0], [48.9, 33670.0], [49.0, 33670.0], [49.1, 33671.0], [49.2, 33673.0], [49.3, 33676.0], [49.4, 33676.0], [49.5, 33679.0], [49.6, 33682.0], [49.7, 33682.0], [49.8, 33684.0], [49.9, 33684.0], [50.0, 33685.0], [50.1, 33685.0], [50.2, 33687.0], [50.3, 33688.0], [50.4, 33688.0], [50.5, 33690.0], [50.6, 33690.0], [50.7, 33692.0], [50.8, 33692.0], [50.9, 33693.0], [51.0, 33698.0], [51.1, 33701.0], [51.2, 33702.0], [51.3, 33705.0], [51.4, 33707.0], [51.5, 33708.0], [51.6, 33708.0], [51.7, 33710.0], [51.8, 33710.0], [51.9, 33710.0], [52.0, 33711.0], [52.1, 33711.0], [52.2, 33711.0], [52.3, 33714.0], [52.4, 33715.0], [52.5, 33716.0], [52.6, 33716.0], [52.7, 33718.0], [52.8, 33718.0], [52.9, 33719.0], [53.0, 33719.0], [53.1, 33719.0], [53.2, 33720.0], [53.3, 33721.0], [53.4, 33721.0], [53.5, 33721.0], [53.6, 33721.0], [53.7, 33722.0], [53.8, 33723.0], [53.9, 33726.0], [54.0, 33727.0], [54.1, 33727.0], [54.2, 33729.0], [54.3, 33729.0], [54.4, 33730.0], [54.5, 33730.0], [54.6, 33731.0], [54.7, 33735.0], [54.8, 33735.0], [54.9, 33736.0], [55.0, 33737.0], [55.1, 33738.0], [55.2, 33739.0], [55.3, 33739.0], [55.4, 33742.0], [55.5, 33742.0], [55.6, 33743.0], [55.7, 33744.0], [55.8, 33744.0], [55.9, 33745.0], [56.0, 33745.0], [56.1, 33746.0], [56.2, 33749.0], [56.3, 33749.0], [56.4, 33750.0], [56.5, 33750.0], [56.6, 33750.0], [56.7, 33750.0], [56.8, 33754.0], [56.9, 33755.0], [57.0, 33757.0], [57.1, 33759.0], [57.2, 33760.0], [57.3, 33760.0], [57.4, 33762.0], [57.5, 33762.0], [57.6, 33762.0], [57.7, 33765.0], [57.8, 33766.0], [57.9, 33766.0], [58.0, 33766.0], [58.1, 33766.0], [58.2, 33767.0], [58.3, 33767.0], [58.4, 33767.0], [58.5, 33768.0], [58.6, 33771.0], [58.7, 33771.0], [58.8, 33771.0], [58.9, 33773.0], [59.0, 33773.0], [59.1, 33775.0], [59.2, 33775.0], [59.3, 33775.0], [59.4, 33776.0], [59.5, 33778.0], [59.6, 33779.0], [59.7, 33781.0], [59.8, 33781.0], [59.9, 33782.0], [60.0, 33782.0], [60.1, 33782.0], [60.2, 33783.0], [60.3, 33784.0], [60.4, 33788.0], [60.5, 33790.0], [60.6, 33790.0], [60.7, 33791.0], [60.8, 33792.0], [60.9, 33793.0], [61.0, 33794.0], [61.1, 33794.0], [61.2, 33794.0], [61.3, 33797.0], [61.4, 33797.0], [61.5, 33798.0], [61.6, 33798.0], [61.7, 33799.0], [61.8, 33799.0], [61.9, 33800.0], [62.0, 33802.0], [62.1, 33802.0], [62.2, 33803.0], [62.3, 33804.0], [62.4, 33804.0], [62.5, 33804.0], [62.6, 33804.0], [62.7, 33805.0], [62.8, 33805.0], [62.9, 33805.0], [63.0, 33806.0], [63.1, 33810.0], [63.2, 33810.0], [63.3, 33814.0], [63.4, 33815.0], [63.5, 33816.0], [63.6, 33816.0], [63.7, 33817.0], [63.8, 33818.0], [63.9, 33819.0], [64.0, 33822.0], [64.1, 33823.0], [64.2, 33823.0], [64.3, 33826.0], [64.4, 33826.0], [64.5, 33828.0], [64.6, 33829.0], [64.7, 33829.0], [64.8, 33829.0], [64.9, 33829.0], [65.0, 33832.0], [65.1, 33835.0], [65.2, 33835.0], [65.3, 33835.0], [65.4, 33835.0], [65.5, 33836.0], [65.6, 33838.0], [65.7, 33839.0], [65.8, 33841.0], [65.9, 33841.0], [66.0, 33843.0], [66.1, 33843.0], [66.2, 33847.0], [66.3, 33847.0], [66.4, 33847.0], [66.5, 33849.0], [66.6, 33849.0], [66.7, 33849.0], [66.8, 33850.0], [66.9, 33851.0], [67.0, 33854.0], [67.1, 33854.0], [67.2, 33855.0], [67.3, 33856.0], [67.4, 33857.0], [67.5, 33861.0], [67.6, 33862.0], [67.7, 33862.0], [67.8, 33863.0], [67.9, 33864.0], [68.0, 33864.0], [68.1, 33865.0], [68.2, 33865.0], [68.3, 33866.0], [68.4, 33867.0], [68.5, 33868.0], [68.6, 33868.0], [68.7, 33868.0], [68.8, 33869.0], [68.9, 33869.0], [69.0, 33870.0], [69.1, 33870.0], [69.2, 33870.0], [69.3, 33872.0], [69.4, 33873.0], [69.5, 33874.0], [69.6, 33874.0], [69.7, 33875.0], [69.8, 33875.0], [69.9, 33876.0], [70.0, 33877.0], [70.1, 33877.0], [70.2, 33878.0], [70.3, 33880.0], [70.4, 33880.0], [70.5, 33882.0], [70.6, 33882.0], [70.7, 33882.0], [70.8, 33883.0], [70.9, 33883.0], [71.0, 33883.0], [71.1, 33885.0], [71.2, 33885.0], [71.3, 33885.0], [71.4, 33885.0], [71.5, 33887.0], [71.6, 33887.0], [71.7, 33887.0], [71.8, 33888.0], [71.9, 33888.0], [72.0, 33888.0], [72.1, 33890.0], [72.2, 33891.0], [72.3, 33891.0], [72.4, 33894.0], [72.5, 33894.0], [72.6, 33895.0], [72.7, 33895.0], [72.8, 33897.0], [72.9, 33897.0], [73.0, 33900.0], [73.1, 33900.0], [73.2, 33901.0], [73.3, 33901.0], [73.4, 33901.0], [73.5, 33902.0], [73.6, 33902.0], [73.7, 33903.0], [73.8, 33903.0], [73.9, 33905.0], [74.0, 33906.0], [74.1, 33907.0], [74.2, 33908.0], [74.3, 33908.0], [74.4, 33908.0], [74.5, 33909.0], [74.6, 33909.0], [74.7, 33910.0], [74.8, 33910.0], [74.9, 33911.0], [75.0, 33914.0], [75.1, 33915.0], [75.2, 33917.0], [75.3, 33918.0], [75.4, 33918.0], [75.5, 33919.0], [75.6, 33920.0], [75.7, 33921.0], [75.8, 33922.0], [75.9, 33922.0], [76.0, 33923.0], [76.1, 33923.0], [76.2, 33924.0], [76.3, 33926.0], [76.4, 33926.0], [76.5, 33926.0], [76.6, 33927.0], [76.7, 33929.0], [76.8, 33929.0], [76.9, 33930.0], [77.0, 33931.0], [77.1, 33931.0], [77.2, 33933.0], [77.3, 33933.0], [77.4, 33934.0], [77.5, 33936.0], [77.6, 33936.0], [77.7, 33937.0], [77.8, 33938.0], [77.9, 33938.0], [78.0, 33941.0], [78.1, 33942.0], [78.2, 33943.0], [78.3, 33943.0], [78.4, 33944.0], [78.5, 33945.0], [78.6, 33945.0], [78.7, 33946.0], [78.8, 33946.0], [78.9, 33948.0], [79.0, 33948.0], [79.1, 33949.0], [79.2, 33950.0], [79.3, 33950.0], [79.4, 33950.0], [79.5, 33951.0], [79.6, 33951.0], [79.7, 33951.0], [79.8, 33953.0], [79.9, 33953.0], [80.0, 33953.0], [80.1, 33957.0], [80.2, 33958.0], [80.3, 33958.0], [80.4, 33960.0], [80.5, 33961.0], [80.6, 33962.0], [80.7, 33963.0], [80.8, 33963.0], [80.9, 33967.0], [81.0, 33967.0], [81.1, 33969.0], [81.2, 33969.0], [81.3, 33972.0], [81.4, 33973.0], [81.5, 33973.0], [81.6, 33974.0], [81.7, 33975.0], [81.8, 33976.0], [81.9, 33979.0], [82.0, 33980.0], [82.1, 33981.0], [82.2, 33981.0], [82.3, 33981.0], [82.4, 33982.0], [82.5, 33982.0], [82.6, 33983.0], [82.7, 33983.0], [82.8, 33984.0], [82.9, 33985.0], [83.0, 33985.0], [83.1, 33986.0], [83.2, 33986.0], [83.3, 33986.0], [83.4, 33986.0], [83.5, 33987.0], [83.6, 33990.0], [83.7, 33991.0], [83.8, 33992.0], [83.9, 33993.0], [84.0, 33994.0], [84.1, 33994.0], [84.2, 33997.0], [84.3, 33999.0], [84.4, 34003.0], [84.5, 34005.0], [84.6, 34005.0], [84.7, 34006.0], [84.8, 34008.0], [84.9, 34008.0], [85.0, 34009.0], [85.1, 34009.0], [85.2, 34010.0], [85.3, 34013.0], [85.4, 34013.0], [85.5, 34015.0], [85.6, 34017.0], [85.7, 34019.0], [85.8, 34021.0], [85.9, 34024.0], [86.0, 34027.0], [86.1, 34027.0], [86.2, 34028.0], [86.3, 34030.0], [86.4, 34030.0], [86.5, 34033.0], [86.6, 34033.0], [86.7, 34034.0], [86.8, 34036.0], [86.9, 34036.0], [87.0, 34042.0], [87.1, 34044.0], [87.2, 34046.0], [87.3, 34047.0], [87.4, 34050.0], [87.5, 34053.0], [87.6, 34053.0], [87.7, 34054.0], [87.8, 34056.0], [87.9, 34057.0], [88.0, 34057.0], [88.1, 34058.0], [88.2, 34058.0], [88.3, 34065.0], [88.4, 34067.0], [88.5, 34067.0], [88.6, 34068.0], [88.7, 34068.0], [88.8, 34070.0], [88.9, 34070.0], [89.0, 34071.0], [89.1, 34072.0], [89.2, 34075.0], [89.3, 34075.0], [89.4, 34078.0], [89.5, 34081.0], [89.6, 34083.0], [89.7, 34085.0], [89.8, 34093.0], [89.9, 34096.0], [90.0, 34096.0], [90.1, 34103.0], [90.2, 34104.0], [90.3, 34105.0], [90.4, 34108.0], [90.5, 34109.0], [90.6, 34109.0], [90.7, 34110.0], [90.8, 34111.0], [90.9, 34113.0], [91.0, 34115.0], [91.1, 34115.0], [91.2, 34116.0], [91.3, 34117.0], [91.4, 34118.0], [91.5, 34120.0], [91.6, 34121.0], [91.7, 34122.0], [91.8, 34122.0], [91.9, 34130.0], [92.0, 34131.0], [92.1, 34132.0], [92.2, 34133.0], [92.3, 34134.0], [92.4, 34135.0], [92.5, 34143.0], [92.6, 34145.0], [92.7, 34145.0], [92.8, 34154.0], [92.9, 34162.0], [93.0, 34166.0], [93.1, 34168.0], [93.2, 34175.0], [93.3, 34177.0], [93.4, 34182.0], [93.5, 34183.0], [93.6, 34188.0], [93.7, 34195.0], [93.8, 34201.0], [93.9, 34202.0], [94.0, 34209.0], [94.1, 34210.0], [94.2, 34211.0], [94.3, 34211.0], [94.4, 34218.0], [94.5, 34218.0], [94.6, 34226.0], [94.7, 34230.0], [94.8, 34233.0], [94.9, 34238.0], [95.0, 34239.0], [95.1, 34241.0], [95.2, 34243.0], [95.3, 34251.0], [95.4, 34251.0], [95.5, 34257.0], [95.6, 34258.0], [95.7, 34267.0], [95.8, 34270.0], [95.9, 34273.0], [96.0, 34276.0], [96.1, 34285.0], [96.2, 34285.0], [96.3, 34289.0], [96.4, 34299.0], [96.5, 34306.0], [96.6, 34308.0], [96.7, 34313.0], [96.8, 34317.0], [96.9, 34318.0], [97.0, 34318.0], [97.1, 34323.0], [97.2, 34324.0], [97.3, 34331.0], [97.4, 34346.0], [97.5, 34356.0], [97.6, 34357.0], [97.7, 34358.0], [97.8, 34358.0], [97.9, 34360.0], [98.0, 34361.0], [98.1, 34362.0], [98.2, 34363.0], [98.3, 34370.0], [98.4, 34372.0], [98.5, 34389.0], [98.6, 34393.0], [98.7, 34398.0], [98.8, 34405.0], [98.9, 34411.0], [99.0, 34412.0], [99.1, 34426.0], [99.2, 34428.0], [99.3, 34431.0], [99.4, 34446.0], [99.5, 34450.0], [99.6, 34455.0], [99.7, 34458.0], [99.8, 34462.0], [99.9, 34463.0], [100.0, 34483.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 200.0, "maxY": 126.0, "series": [{"data": [[19300.0, 8.0], [20300.0, 25.0], [22300.0, 31.0], [22200.0, 4.0], [23200.0, 21.0], [24200.0, 29.0], [25200.0, 12.0], [25100.0, 6.0], [26200.0, 14.0], [26100.0, 14.0], [27100.0, 4.0], [29100.0, 32.0], [30000.0, 24.0], [30100.0, 9.0], [32000.0, 6.0], [33800.0, 124.0], [33700.0, 120.0], [34400.0, 14.0], [34100.0, 42.0], [34200.0, 30.0], [34300.0, 25.0], [33400.0, 25.0], [33300.0, 7.0], [34000.0, 63.0], [33900.0, 126.0], [33600.0, 89.0], [33500.0, 96.0], [2400.0, 7.0], [2500.0, 3.0], [2600.0, 4.0], [2800.0, 21.0], [2700.0, 6.0], [2900.0, 15.0], [3000.0, 14.0], [3100.0, 11.0], [200.0, 11.0], [3200.0, 9.0], [3300.0, 5.0], [400.0, 5.0]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 856.0, "series": [{"data": [[0.0, 16.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 856.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 239.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 9.466812E11, "maxY": 1000.0, "series": [{"data": [[9.46681229E11, 817.03125], [9.46681227E11, 835.0], [9.466812E11, 17.92857142857143], [9.46681232E11, 765.1666666666666], [9.4668122E11, 984.36], [9.4668123E11, 784.7575757575759], [9.46681219E11, 1000.0], [9.46681224E11, 897.6551724137931], [9.46681234E11, 529.8284574468086], [9.46681223E11, 922.3809523809524], [9.46681201E11, 1.5], [9.46681222E11, 953.8285714285713], [9.46681226E11, 851.1428571428571], [9.46681225E11, 874.0555555555554], [9.46681203E11, 48.536842105263126], [9.46681235E11, 5.111111111111111]], "isOverall": false, "label": "OTUS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.46681235E11, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1086.6666666666665, "minX": 1.0, "maxY": 34462.0, "series": [{"data": [[2.0, 12414.333333333334], [3.0, 3913.8999999999996], [4.0, 18533.5], [5.0, 2965.0], [6.0, 23726.333333333332], [7.0, 18501.0], [8.0, 18500.0], [9.0, 18476.0], [10.0, 18465.0], [11.0, 18508.0], [12.0, 18525.5], [13.0, 34003.0], [14.0, 3009.0], [15.0, 23598.666666666668], [16.0, 18465.0], [17.0, 18449.0], [18.0, 18267.0], [19.0, 18260.5], [20.0, 33948.0], [21.0, 13123.666666666666], [22.0, 18265.0], [23.0, 2671.0], [24.0, 23474.333333333332], [25.0, 18306.5], [26.0, 2737.0], [27.0, 23455.666666666668], [28.0, 33798.0], [29.0, 13139.333333333334], [30.0, 33759.0], [31.0, 33727.0], [33.0, 2836.25], [35.0, 2497.0], [37.0, 2425.0], [36.0, 2796.0], [40.0, 2433.0], [43.0, 3092.0], [42.0, 2718.0], [44.0, 1086.6666666666665], [46.0, 1413.4], [47.0, 3303.0], [49.0, 2892.0], [48.0, 3333.0], [51.0, 3180.0], [50.0, 3110.0], [52.0, 2477.0], [54.0, 3152.0], [57.0, 3225.0], [56.0, 2996.5], [58.0, 3165.0], [61.0, 3170.0], [60.0, 2844.0], [63.0, 2943.0], [62.0, 3215.0], [67.0, 3202.0], [65.0, 3345.0], [64.0, 2871.0], [68.0, 2826.0], [75.0, 3252.0], [74.0, 3173.0], [73.0, 3043.4], [79.0, 3021.0], [78.0, 3052.0], [76.0, 2842.0], [83.0, 2878.0], [82.0, 2979.0], [81.0, 3178.0], [80.0, 3300.0], [87.0, 3036.5], [86.0, 2978.0], [95.0, 3239.0], [94.0, 2938.0], [93.0, 3329.0], [92.0, 3082.6], [334.0, 34195.0], [333.0, 34455.0], [332.0, 33920.0], [328.0, 33849.0], [327.0, 34006.5], [323.0, 34360.0], [344.0, 34133.0], [350.0, 33700.5], [347.0, 34462.0], [346.0, 34035.0], [345.0, 33945.0], [343.0, 33849.0], [342.0, 34243.0], [341.0, 33814.0], [339.0, 33745.0], [355.0, 33900.0], [366.0, 33909.333333333336], [364.0, 33738.0], [363.0, 33766.0], [361.0, 33706.0], [360.0, 33930.0], [359.0, 34393.0], [358.0, 34183.0], [354.0, 34024.0], [353.0, 33897.5], [352.0, 33688.0], [382.0, 33738.5], [379.0, 33991.0], [380.0, 33666.0], [378.0, 33767.0], [377.0, 33959.399999999994], [374.0, 33815.0], [373.0, 33742.0], [370.0, 34356.0], [368.0, 34085.0], [398.0, 33840.5], [399.0, 33936.0], [396.0, 33910.0], [387.0, 33826.0], [385.0, 33920.333333333336], [395.0, 34067.0], [394.0, 33957.0], [393.0, 33642.0], [392.0, 34118.0], [391.0, 34119.0], [389.0, 33876.5], [388.0, 33775.0], [414.0, 34127.0], [415.0, 34038.0], [413.0, 33682.0], [403.0, 33990.0], [402.0, 33637.0], [411.0, 34019.333333333336], [409.0, 33730.0], [408.0, 33692.0], [406.0, 33767.5], [405.0, 33948.75], [404.0, 34007.0], [429.0, 34006.0], [427.0, 34307.75], [426.0, 34113.0], [423.0, 34115.2], [422.0, 34027.0], [421.0, 34318.0], [444.0, 33925.375], [441.0, 34066.333333333336], [437.0, 33841.0], [435.0, 33759.0], [434.0, 34094.0], [433.0, 34048.333333333336], [432.0, 33659.0], [451.0, 33585.0], [461.0, 33773.5], [462.0, 33759.666666666664], [460.0, 33697.5], [457.0, 33600.0], [458.0, 33578.0], [455.0, 34154.0], [454.0, 33762.5], [452.0, 33869.0], [449.0, 33957.5], [448.0, 34083.0], [478.0, 33990.666666666664], [479.0, 34095.333333333336], [477.0, 33836.0], [476.0, 33972.0], [475.0, 33903.4], [474.0, 33934.0], [473.0, 33814.5], [470.0, 33828.333333333336], [466.0, 33879.14285714286], [464.0, 34306.0], [468.0, 33599.0], [494.0, 33822.333333333336], [493.0, 33887.0], [491.0, 34171.0], [490.0, 33893.5], [484.0, 33836.0], [485.0, 34048.0], [482.0, 33813.0], [480.0, 34190.0], [510.0, 33805.75], [511.0, 33798.0], [508.0, 33883.0], [507.0, 33760.0], [506.0, 33727.0], [505.0, 33733.0], [504.0, 34196.5], [500.0, 33837.6], [497.0, 33816.0], [496.0, 33788.0], [499.0, 33836.125], [541.0, 33828.0], [543.0, 33870.33333333333], [538.0, 33683.5], [536.0, 33951.0], [534.0, 33934.0], [535.0, 33559.0], [532.0, 34179.5], [528.0, 33802.0], [527.0, 33788.5], [513.0, 33767.25], [512.0, 34071.0], [516.0, 33616.0], [514.0, 33732.0], [519.0, 33986.0], [518.0, 33860.0], [524.0, 33686.0], [522.0, 33983.0], [521.0, 33929.0], [520.0, 33702.5], [563.0, 33589.5], [575.0, 33560.0], [572.0, 34020.333333333336], [568.0, 33792.0], [557.0, 33614.0], [545.0, 33708.372093023245], [548.0, 33818.5], [547.0, 33940.5], [550.0, 33963.0], [566.0, 33717.333333333336], [565.0, 33786.0], [564.0, 33797.0], [560.0, 33902.166666666664], [556.0, 33508.0], [554.0, 33692.0], [553.0, 33997.0], [552.0, 33772.666666666664], [605.0, 33812.666666666664], [606.0, 33558.0], [602.0, 33889.0], [601.0, 33975.0], [598.0, 33888.5], [594.0, 33660.71428571429], [593.0, 33717.75], [592.0, 33687.0], [589.0, 33847.395061728406], [585.0, 33627.0], [591.0, 33538.0], [576.0, 33793.75], [580.0, 33553.0], [579.0, 33717.0], [582.0, 33836.0], [581.0, 33974.0], [633.0, 33969.0], [638.0, 33992.0], [639.0, 33969.0], [624.0, 33644.0], [626.0, 33505.0], [625.0, 33804.0], [629.0, 33632.0], [628.0, 33487.0], [637.0, 33986.0], [636.0, 33953.0], [634.0, 33906.0], [632.0, 33985.0], [614.0, 33585.0], [613.0, 33490.0], [612.0, 33444.0], [611.0, 33541.0], [609.0, 33663.5], [608.0, 33498.0], [623.0, 33838.0], [622.0, 33588.0], [621.0, 34270.0], [620.0, 34079.0], [618.0, 33880.0], [616.0, 33797.0], [631.0, 33943.0], [630.0, 33602.0], [669.0, 33859.666666666664], [670.0, 33946.0], [665.0, 33742.0], [664.0, 33683.0], [662.0, 33407.0], [660.0, 33461.333333333336], [657.0, 33482.0], [656.0, 33611.0], [655.0, 33364.0], [642.0, 33653.0], [640.0, 33976.0], [644.0, 33468.0], [643.0, 33532.0], [646.0, 34109.0], [645.0, 33408.0], [654.0, 33866.0], [653.0, 33818.0], [652.0, 34211.0], [651.0, 33665.0], [650.0, 33680.0], [649.0, 33398.0], [648.0, 33869.0], [691.0, 33388.0], [702.0, 33640.0], [703.0, 33887.0], [690.0, 33404.0], [689.0, 33851.4], [701.0, 33642.0], [699.0, 33585.5], [697.0, 33677.0], [679.0, 34162.0], [678.0, 33902.5], [676.0, 33442.0], [675.0, 33567.0], [674.0, 33883.0], [673.0, 33725.0], [684.0, 33885.0], [683.0, 33774.75], [695.0, 33457.5], [693.0, 33529.0], [692.0, 33499.0], [729.0, 33885.0], [734.0, 34010.0], [735.0, 33358.0], [720.0, 33653.0], [722.0, 33875.0], [721.0, 33362.0], [725.0, 33883.0], [724.0, 33874.5], [733.0, 33804.0], [732.0, 33773.0], [731.0, 33884.0], [728.0, 33822.0], [711.0, 33918.0], [710.0, 33827.0], [708.0, 33826.5], [706.0, 33783.0], [705.0, 33812.0], [719.0, 33835.0], [718.0, 33869.0], [717.0, 33885.0], [716.0, 33902.0], [715.0, 33908.0], [714.0, 33861.5], [712.0, 33861.0], [727.0, 33427.0], [726.0, 33888.0], [761.0, 33859.666666666664], [754.0, 33784.0], [767.0, 32049.666666666668], [764.0, 32041.5], [762.0, 32019.0], [751.0, 33736.0], [737.0, 33819.0], [739.0, 33875.0], [738.0, 33891.0], [742.0, 33576.5], [740.0, 33802.0], [750.0, 33754.0], [749.0, 33789.0], [747.0, 33849.0], [746.0, 33870.0], [745.0, 33887.0], [744.0, 33861.0], [758.0, 33854.0], [757.0, 33796.0], [756.0, 33998.5], [753.0, 33805.0], [792.0, 30078.5], [787.0, 30092.5], [799.0, 30093.5], [798.0, 30074.0], [796.0, 30094.333333333332], [782.0, 30077.0], [770.0, 30092.0], [768.0, 30111.0], [772.0, 30105.0], [771.0, 30092.0], [774.0, 30084.0], [773.0, 30080.0], [781.0, 30080.0], [779.0, 30097.0], [778.0, 30100.0], [777.0, 30089.0], [776.0, 30099.0], [791.0, 30079.0], [790.0, 30100.0], [788.0, 30095.0], [785.0, 30100.0], [784.0, 30089.0], [824.0, 29134.0], [818.0, 29109.5], [829.0, 29142.5], [827.0, 29132.5], [825.0, 29123.0], [815.0, 29133.0], [800.0, 30095.0], [802.0, 29134.0], [801.0, 29125.0], [805.0, 29133.0], [804.0, 29141.0], [807.0, 29149.5], [806.0, 29111.0], [814.0, 29150.0], [813.0, 29143.5], [812.0, 29137.0], [810.0, 29138.0], [808.0, 29145.0], [822.0, 29132.5], [821.0, 29138.0], [819.0, 29121.0], [816.0, 29110.0], [860.0, 26191.0], [863.0, 26205.0], [859.0, 26195.0], [857.0, 26183.0], [855.0, 26198.5], [853.0, 26192.333333333332], [850.0, 26184.0], [848.0, 26181.5], [846.0, 26158.0], [833.0, 27170.0], [832.0, 29142.0], [836.0, 27158.5], [835.0, 27165.0], [839.0, 26206.0], [838.0, 26185.5], [845.0, 26200.0], [843.0, 26208.0], [841.0, 26185.0], [893.0, 24246.0], [894.0, 24260.0], [891.0, 24248.0], [890.0, 24253.0], [889.0, 24247.0], [888.0, 24253.0], [879.0, 25215.0], [865.0, 25209.0], [864.0, 26193.0], [868.0, 25202.5], [867.0, 25257.0], [871.0, 25202.0], [869.0, 25177.0], [878.0, 25208.666666666668], [875.0, 25217.0], [874.0, 25218.0], [873.0, 25204.5], [887.0, 24235.0], [886.0, 24232.0], [884.0, 24240.5], [882.0, 25200.0], [922.0, 23275.0], [913.0, 23296.0], [924.0, 23287.0], [926.0, 23260.0], [912.0, 23288.0], [923.0, 23239.0], [920.0, 23250.5], [903.0, 24236.666666666668], [901.0, 24236.0], [899.0, 24241.5], [897.0, 24242.0], [896.0, 24244.0], [911.0, 24251.0], [910.0, 24224.0], [909.0, 24258.0], [906.0, 24244.0], [905.0, 24247.0], [918.0, 23262.0], [917.0, 23259.5], [915.0, 23268.5], [954.0, 22330.0], [958.0, 22329.0], [959.0, 22310.5], [956.0, 22318.0], [952.0, 22330.0], [950.0, 22330.0], [948.0, 22321.125000000004], [932.0, 23280.0], [931.0, 23287.0], [929.0, 23276.0], [928.0, 23252.5], [987.0, 20324.0], [989.0, 20327.0], [990.0, 20328.0], [988.0, 20327.0], [984.0, 20327.0], [983.0, 20328.0], [982.0, 20332.0], [967.0, 22321.0], [966.0, 22323.0], [965.0, 22302.0], [963.0, 22319.0], [961.0, 22328.0], [960.0, 22330.0], [1000.0, 19324.124999999996], [992.0, 20326.0], [1.0, 9408.25]], "isOverall": false, "label": "/user/search", "isController": false}, {"data": [[552.8982898289825, 28885.09630963097]], "isOverall": false, "label": "/user/search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 9.466812E11, "maxY": 4.16072576E8, "series": [{"data": [[9.46681229E11, 44120.0], [9.46681227E11, 5328.0], [9.466812E11, 7746032.0], [9.46681232E11, 7992.0], [9.4668122E11, 33300.0], [9.4668123E11, 45452.0], [9.46681219E11, 10658.0], [9.46681224E11, 40124.0], [9.46681234E11, 4.16072576E8], [9.46681223E11, 28720.0], [9.46681201E11, 1106576.0], [9.46681222E11, 46623.0], [9.46681226E11, 38792.0], [9.46681225E11, 26220.0], [9.46681203E11, 5.256236E7], [9.46681235E11, 4979592.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[9.46681229E11, 0.0], [9.46681227E11, 0.0], [9.466812E11, 6776.0], [9.46681232E11, 0.0], [9.4668122E11, 0.0], [9.4668123E11, 0.0], [9.46681219E11, 0.0], [9.46681224E11, 0.0], [9.46681234E11, 363968.0], [9.46681223E11, 0.0], [9.46681201E11, 968.0], [9.46681222E11, 0.0], [9.46681226E11, 0.0], [9.46681225E11, 0.0], [9.46681203E11, 45980.0], [9.46681235E11, 4356.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.46681235E11, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 263.0, "minX": 9.466812E11, "maxY": 34111.333333333336, "series": [{"data": [[9.46681229E11, 29133.75], [9.46681227E11, 27163.0], [9.466812E11, 316.0], [9.46681232E11, 32041.833333333336], [9.4668122E11, 20329.640000000003], [9.4668123E11, 30091.333333333332], [9.46681219E11, 19324.124999999996], [9.46681224E11, 24243.655172413786], [9.46681234E11, 33844.37500000005], [9.46681223E11, 23267.95238095238], [9.46681201E11, 263.0], [9.46681222E11, 22321.571428571428], [9.46681226E11, 26191.178571428572], [9.46681225E11, 25207.61111111111], [9.46681203E11, 2940.536842105263], [9.46681235E11, 34111.333333333336]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 9.46681235E11, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 261.5, "minX": 9.466812E11, "maxY": 34108.11111111112, "series": [{"data": [[9.46681229E11, 14686.28125], [9.46681227E11, 15557.75], [9.466812E11, 313.92857142857144], [9.46681232E11, 21937.166666666668], [9.4668122E11, 14742.359999999999], [9.4668123E11, 14671.121212121212], [9.46681219E11, 10348.375], [9.46681224E11, 14704.655172413793], [9.46681234E11, 30102.087765957447], [9.46681223E11, 15017.04761904762], [9.46681201E11, 261.5], [9.46681222E11, 14073.714285714284], [9.46681226E11, 14621.785714285716], [9.46681225E11, 13118.222222222223], [9.46681203E11, 2356.5894736842106], [9.46681235E11, 34108.11111111112]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 9.46681235E11, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 9.466812E11, "maxY": 13.999999999999998, "series": [{"data": [[9.46681229E11, 0.4375], [9.46681227E11, 0.5], [9.466812E11, 4.714285714285714], [9.46681232E11, 0.0], [9.4668122E11, 13.999999999999998], [9.4668123E11, 0.484848484848485], [9.46681219E11, 12.0], [9.46681224E11, 0.5862068965517243], [9.46681234E11, 0.5305851063829795], [9.46681223E11, 0.33333333333333337], [9.46681201E11, 0.0], [9.46681222E11, 10.685714285714287], [9.46681226E11, 0.2857142857142858], [9.46681225E11, 0.6111111111111113], [9.46681203E11, 0.9263157894736845], [9.46681235E11, 0.3333333333333333]], "isOverall": false, "label": "/user/search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 9.46681235E11, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 216.0, "minX": 9.466812E11, "maxY": 34483.0, "series": [{"data": [[9.46681234E11, 34483.0], [9.46681201E11, 272.0], [9.466812E11, 417.0], [9.46681203E11, 3345.0], [9.46681235E11, 34122.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[9.46681234E11, 34176.4], [9.46681201E11, 272.0], [9.466812E11, 416.0], [9.46681203E11, 3247.8], [9.46681235E11, 34122.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[9.46681234E11, 34438.05], [9.46681201E11, 272.0], [9.466812E11, 417.0], [9.46681203E11, 3345.0], [9.46681235E11, 34122.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[9.46681234E11, 34309.75], [9.46681201E11, 272.0], [9.466812E11, 417.0], [9.46681203E11, 3300.6], [9.46681235E11, 34122.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[9.46681234E11, 33358.0], [9.46681201E11, 254.0], [9.466812E11, 216.0], [9.46681203E11, 2425.0], [9.46681235E11, 34096.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[9.46681234E11, 33835.0], [9.46681201E11, 263.0], [9.466812E11, 287.5], [9.46681203E11, 2954.0], [9.46681235E11, 34110.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.46681235E11, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 263.0, "minX": 2.0, "maxY": 34110.0, "series": [{"data": [[2.0, 263.0], [9.0, 34110.0], [95.0, 2954.0], [752.0, 33835.0], [14.0, 287.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 19326.0], [4.0, 27163.0], [32.0, 29135.5], [33.0, 30092.0], [35.0, 22328.0], [18.0, 25213.5], [21.0, 23269.0], [6.0, 32041.5], [25.0, 20329.0], [28.0, 26199.5], [29.0, 24244.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 752.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 261.5, "minX": 2.0, "maxY": 34107.0, "series": [{"data": [[2.0, 261.5], [9.0, 34107.0], [95.0, 2255.0], [752.0, 30768.0], [14.0, 285.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 15713.5], [4.0, 15557.0], [32.0, 15530.5], [33.0, 15483.0], [35.0, 15717.0], [18.0, 15602.5], [21.0, 15660.0], [6.0, 17530.5], [25.0, 15727.0], [28.0, 15594.5], [29.0, 15642.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 752.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.0, "minX": 9.46681199E11, "maxY": 1100.0, "series": [{"data": [[9.466812E11, 1100.0], [9.46681199E11, 11.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.466812E11, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 9.466812E11, "maxY": 752.0, "series": [{"data": [[9.46681234E11, 752.0], [9.46681201E11, 2.0], [9.466812E11, 14.0], [9.46681203E11, 95.0], [9.46681235E11, 9.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[9.46681224E11, 2.0], [9.46681229E11, 2.0], [9.46681223E11, 1.0], [9.46681226E11, 2.0], [9.46681225E11, 3.0], [9.4668123E11, 2.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[9.46681224E11, 27.0], [9.46681229E11, 30.0], [9.46681223E11, 20.0], [9.46681222E11, 35.0], [9.46681227E11, 4.0], [9.46681232E11, 6.0], [9.46681226E11, 26.0], [9.4668122E11, 25.0], [9.46681225E11, 15.0], [9.4668123E11, 31.0], [9.46681219E11, 8.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.46681235E11, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.0, "minX": 9.466812E11, "maxY": 752.0, "series": [{"data": [[9.46681234E11, 752.0], [9.46681201E11, 2.0], [9.466812E11, 14.0], [9.46681203E11, 95.0], [9.46681235E11, 9.0]], "isOverall": false, "label": "/user/search-success", "isController": false}, {"data": [[9.46681224E11, 29.0], [9.46681229E11, 32.0], [9.46681223E11, 21.0], [9.46681222E11, 35.0], [9.46681227E11, 4.0], [9.46681232E11, 6.0], [9.46681226E11, 28.0], [9.4668122E11, 25.0], [9.46681225E11, 18.0], [9.4668123E11, 33.0], [9.46681219E11, 8.0]], "isOverall": false, "label": "/user/search-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 9.46681235E11, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.0, "minX": 9.466812E11, "maxY": 752.0, "series": [{"data": [[9.46681234E11, 752.0], [9.46681201E11, 2.0], [9.466812E11, 14.0], [9.46681203E11, 95.0], [9.46681235E11, 9.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[9.46681224E11, 29.0], [9.46681229E11, 32.0], [9.46681223E11, 21.0], [9.46681222E11, 35.0], [9.46681227E11, 4.0], [9.46681232E11, 6.0], [9.46681226E11, 28.0], [9.4668122E11, 25.0], [9.46681225E11, 18.0], [9.4668123E11, 33.0], [9.46681219E11, 8.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 9.46681235E11, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

